// Code generated by Prisma (prisma@1.22.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  deployment: (where?: DeploymentWhereInput) => Promise<boolean>;
  email: (where?: EmailWhereInput) => Promise<boolean>;
  inviteToken: (where?: InviteTokenWhereInput) => Promise<boolean>;
  localCredential: (where?: LocalCredentialWhereInput) => Promise<boolean>;
  roleBinding: (where?: RoleBindingWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  workspace: (where?: WorkspaceWhereInput) => Promise<boolean>;
  workspaceProperty: (where?: WorkspacePropertyWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  deployment: (where: DeploymentWhereUniqueInput) => DeploymentPromise;
  deployments: (
    args?: {
      where?: DeploymentWhereInput;
      orderBy?: DeploymentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Deployment>;
  deploymentsConnection: (
    args?: {
      where?: DeploymentWhereInput;
      orderBy?: DeploymentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => DeploymentConnectionPromise;
  email: (where: EmailWhereUniqueInput) => EmailPromise;
  emails: (
    args?: {
      where?: EmailWhereInput;
      orderBy?: EmailOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Email>;
  emailsConnection: (
    args?: {
      where?: EmailWhereInput;
      orderBy?: EmailOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => EmailConnectionPromise;
  inviteToken: (where: InviteTokenWhereUniqueInput) => InviteTokenPromise;
  inviteTokens: (
    args?: {
      where?: InviteTokenWhereInput;
      orderBy?: InviteTokenOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<InviteToken>;
  inviteTokensConnection: (
    args?: {
      where?: InviteTokenWhereInput;
      orderBy?: InviteTokenOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => InviteTokenConnectionPromise;
  localCredential: (
    where: LocalCredentialWhereUniqueInput
  ) => LocalCredentialPromise;
  localCredentials: (
    args?: {
      where?: LocalCredentialWhereInput;
      orderBy?: LocalCredentialOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<LocalCredential>;
  localCredentialsConnection: (
    args?: {
      where?: LocalCredentialWhereInput;
      orderBy?: LocalCredentialOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => LocalCredentialConnectionPromise;
  roleBinding: (where: RoleBindingWhereUniqueInput) => RoleBindingPromise;
  roleBindings: (
    args?: {
      where?: RoleBindingWhereInput;
      orderBy?: RoleBindingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<RoleBinding>;
  roleBindingsConnection: (
    args?: {
      where?: RoleBindingWhereInput;
      orderBy?: RoleBindingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => RoleBindingConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  workspace: (where: WorkspaceWhereUniqueInput) => WorkspacePromise;
  workspaces: (
    args?: {
      where?: WorkspaceWhereInput;
      orderBy?: WorkspaceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Workspace>;
  workspacesConnection: (
    args?: {
      where?: WorkspaceWhereInput;
      orderBy?: WorkspaceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => WorkspaceConnectionPromise;
  workspaceProperty: (
    where: WorkspacePropertyWhereUniqueInput
  ) => WorkspacePropertyPromise;
  workspaceProperties: (
    args?: {
      where?: WorkspacePropertyWhereInput;
      orderBy?: WorkspacePropertyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<WorkspaceProperty>;
  workspacePropertiesConnection: (
    args?: {
      where?: WorkspacePropertyWhereInput;
      orderBy?: WorkspacePropertyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => WorkspacePropertyConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createDeployment: (data: DeploymentCreateInput) => DeploymentPromise;
  updateDeployment: (
    args: { data: DeploymentUpdateInput; where: DeploymentWhereUniqueInput }
  ) => DeploymentPromise;
  updateManyDeployments: (
    args: {
      data: DeploymentUpdateManyMutationInput;
      where?: DeploymentWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertDeployment: (
    args: {
      where: DeploymentWhereUniqueInput;
      create: DeploymentCreateInput;
      update: DeploymentUpdateInput;
    }
  ) => DeploymentPromise;
  deleteDeployment: (where: DeploymentWhereUniqueInput) => DeploymentPromise;
  deleteManyDeployments: (where?: DeploymentWhereInput) => BatchPayloadPromise;
  createEmail: (data: EmailCreateInput) => EmailPromise;
  updateEmail: (
    args: { data: EmailUpdateInput; where: EmailWhereUniqueInput }
  ) => EmailPromise;
  updateManyEmails: (
    args: { data: EmailUpdateManyMutationInput; where?: EmailWhereInput }
  ) => BatchPayloadPromise;
  upsertEmail: (
    args: {
      where: EmailWhereUniqueInput;
      create: EmailCreateInput;
      update: EmailUpdateInput;
    }
  ) => EmailPromise;
  deleteEmail: (where: EmailWhereUniqueInput) => EmailPromise;
  deleteManyEmails: (where?: EmailWhereInput) => BatchPayloadPromise;
  createInviteToken: (data: InviteTokenCreateInput) => InviteTokenPromise;
  updateInviteToken: (
    args: { data: InviteTokenUpdateInput; where: InviteTokenWhereUniqueInput }
  ) => InviteTokenPromise;
  updateManyInviteTokens: (
    args: {
      data: InviteTokenUpdateManyMutationInput;
      where?: InviteTokenWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertInviteToken: (
    args: {
      where: InviteTokenWhereUniqueInput;
      create: InviteTokenCreateInput;
      update: InviteTokenUpdateInput;
    }
  ) => InviteTokenPromise;
  deleteInviteToken: (where: InviteTokenWhereUniqueInput) => InviteTokenPromise;
  deleteManyInviteTokens: (
    where?: InviteTokenWhereInput
  ) => BatchPayloadPromise;
  createLocalCredential: (
    data: LocalCredentialCreateInput
  ) => LocalCredentialPromise;
  updateLocalCredential: (
    args: {
      data: LocalCredentialUpdateInput;
      where: LocalCredentialWhereUniqueInput;
    }
  ) => LocalCredentialPromise;
  updateManyLocalCredentials: (
    args: {
      data: LocalCredentialUpdateManyMutationInput;
      where?: LocalCredentialWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertLocalCredential: (
    args: {
      where: LocalCredentialWhereUniqueInput;
      create: LocalCredentialCreateInput;
      update: LocalCredentialUpdateInput;
    }
  ) => LocalCredentialPromise;
  deleteLocalCredential: (
    where: LocalCredentialWhereUniqueInput
  ) => LocalCredentialPromise;
  deleteManyLocalCredentials: (
    where?: LocalCredentialWhereInput
  ) => BatchPayloadPromise;
  createRoleBinding: (data: RoleBindingCreateInput) => RoleBindingPromise;
  updateRoleBinding: (
    args: { data: RoleBindingUpdateInput; where: RoleBindingWhereUniqueInput }
  ) => RoleBindingPromise;
  updateManyRoleBindings: (
    args: {
      data: RoleBindingUpdateManyMutationInput;
      where?: RoleBindingWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertRoleBinding: (
    args: {
      where: RoleBindingWhereUniqueInput;
      create: RoleBindingCreateInput;
      update: RoleBindingUpdateInput;
    }
  ) => RoleBindingPromise;
  deleteRoleBinding: (where: RoleBindingWhereUniqueInput) => RoleBindingPromise;
  deleteManyRoleBindings: (
    where?: RoleBindingWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createWorkspace: (data: WorkspaceCreateInput) => WorkspacePromise;
  updateWorkspace: (
    args: { data: WorkspaceUpdateInput; where: WorkspaceWhereUniqueInput }
  ) => WorkspacePromise;
  updateManyWorkspaces: (
    args: {
      data: WorkspaceUpdateManyMutationInput;
      where?: WorkspaceWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertWorkspace: (
    args: {
      where: WorkspaceWhereUniqueInput;
      create: WorkspaceCreateInput;
      update: WorkspaceUpdateInput;
    }
  ) => WorkspacePromise;
  deleteWorkspace: (where: WorkspaceWhereUniqueInput) => WorkspacePromise;
  deleteManyWorkspaces: (where?: WorkspaceWhereInput) => BatchPayloadPromise;
  createWorkspaceProperty: (
    data: WorkspacePropertyCreateInput
  ) => WorkspacePropertyPromise;
  updateWorkspaceProperty: (
    args: {
      data: WorkspacePropertyUpdateInput;
      where: WorkspacePropertyWhereUniqueInput;
    }
  ) => WorkspacePropertyPromise;
  updateManyWorkspaceProperties: (
    args: {
      data: WorkspacePropertyUpdateManyMutationInput;
      where?: WorkspacePropertyWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertWorkspaceProperty: (
    args: {
      where: WorkspacePropertyWhereUniqueInput;
      create: WorkspacePropertyCreateInput;
      update: WorkspacePropertyUpdateInput;
    }
  ) => WorkspacePropertyPromise;
  deleteWorkspaceProperty: (
    where: WorkspacePropertyWhereUniqueInput
  ) => WorkspacePropertyPromise;
  deleteManyWorkspaceProperties: (
    where?: WorkspacePropertyWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  deployment: (
    where?: DeploymentSubscriptionWhereInput
  ) => DeploymentSubscriptionPayloadSubscription;
  email: (
    where?: EmailSubscriptionWhereInput
  ) => EmailSubscriptionPayloadSubscription;
  inviteToken: (
    where?: InviteTokenSubscriptionWhereInput
  ) => InviteTokenSubscriptionPayloadSubscription;
  localCredential: (
    where?: LocalCredentialSubscriptionWhereInput
  ) => LocalCredentialSubscriptionPayloadSubscription;
  roleBinding: (
    where?: RoleBindingSubscriptionWhereInput
  ) => RoleBindingSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  workspace: (
    where?: WorkspaceSubscriptionWhereInput
  ) => WorkspaceSubscriptionPayloadSubscription;
  workspaceProperty: (
    where?: WorkspacePropertySubscriptionWhereInput
  ) => WorkspacePropertySubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type DeploymentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "config_ASC"
  | "config_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Role =
  | "USER"
  | "WORKSPACE_ADMIN"
  | "WORKSPACE_EDITOR"
  | "WORKSPACE_VIEWER"
  | "DEPLOYMENT_ADMIN"
  | "DEPLOYMENT_EDITOR"
  | "DEPLOYMENT_VIEWER"
  | "SYSTEM_ADMIN"
  | "SYSTEM_EDITOR"
  | "SYSTEM_VIEWER";

export type EmailOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "address_ASC"
  | "address_DESC"
  | "main_ASC"
  | "main_DESC"
  | "token_ASC"
  | "token_DESC"
  | "verified_ASC"
  | "verified_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type InviteTokenOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "assignments_ASC"
  | "assignments_DESC"
  | "email_ASC"
  | "email_DESC"
  | "token_ASC"
  | "token_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type WorkspacePropertyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "category_ASC"
  | "category_DESC"
  | "key_ASC"
  | "key_DESC"
  | "value_ASC"
  | "value_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "fullName_ASC"
  | "fullName_DESC"
  | "status_ASC"
  | "status_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type RoleBindingOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "role_ASC"
  | "role_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type LocalCredentialOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "password_ASC"
  | "password_DESC"
  | "resetToken_ASC"
  | "resetToken_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type WorkspaceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "active_ASC"
  | "active_DESC"
  | "description_ASC"
  | "description_DESC"
  | "label_ASC"
  | "label_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type DeploymentWhereUniqueInput = AtLeastOne<{
  id: UUID;
}>;

export interface DeploymentWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  config?: String;
  config_not?: String;
  config_in?: String[] | String;
  config_not_in?: String[] | String;
  config_lt?: String;
  config_lte?: String;
  config_gt?: String;
  config_gte?: String;
  config_contains?: String;
  config_not_contains?: String;
  config_starts_with?: String;
  config_not_starts_with?: String;
  config_ends_with?: String;
  config_not_ends_with?: String;
  AND?: DeploymentWhereInput[] | DeploymentWhereInput;
  OR?: DeploymentWhereInput[] | DeploymentWhereInput;
  NOT?: DeploymentWhereInput[] | DeploymentWhereInput;
}

export type EmailWhereUniqueInput = AtLeastOne<{
  id: UUID;
  address?: String;
  token?: String;
}>;

export interface EmailWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  address?: String;
  address_not?: String;
  address_in?: String[] | String;
  address_not_in?: String[] | String;
  address_lt?: String;
  address_lte?: String;
  address_gt?: String;
  address_gte?: String;
  address_contains?: String;
  address_not_contains?: String;
  address_starts_with?: String;
  address_not_starts_with?: String;
  address_ends_with?: String;
  address_not_ends_with?: String;
  main?: Boolean;
  main_not?: Boolean;
  token?: String;
  token_not?: String;
  token_in?: String[] | String;
  token_not_in?: String[] | String;
  token_lt?: String;
  token_lte?: String;
  token_gt?: String;
  token_gte?: String;
  token_contains?: String;
  token_not_contains?: String;
  token_starts_with?: String;
  token_not_starts_with?: String;
  token_ends_with?: String;
  token_not_ends_with?: String;
  user?: UserWhereInput;
  verified?: Boolean;
  verified_not?: Boolean;
  AND?: EmailWhereInput[] | EmailWhereInput;
  OR?: EmailWhereInput[] | EmailWhereInput;
  NOT?: EmailWhereInput[] | EmailWhereInput;
}

export interface UserWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  emails_every?: EmailWhereInput;
  emails_some?: EmailWhereInput;
  emails_none?: EmailWhereInput;
  fullName?: String;
  fullName_not?: String;
  fullName_in?: String[] | String;
  fullName_not_in?: String[] | String;
  fullName_lt?: String;
  fullName_lte?: String;
  fullName_gt?: String;
  fullName_gte?: String;
  fullName_contains?: String;
  fullName_not_contains?: String;
  fullName_starts_with?: String;
  fullName_not_starts_with?: String;
  fullName_ends_with?: String;
  fullName_not_ends_with?: String;
  status?: String;
  status_not?: String;
  status_in?: String[] | String;
  status_not_in?: String[] | String;
  status_lt?: String;
  status_lte?: String;
  status_gt?: String;
  status_gte?: String;
  status_contains?: String;
  status_not_contains?: String;
  status_starts_with?: String;
  status_not_starts_with?: String;
  status_ends_with?: String;
  status_not_ends_with?: String;
  inviteTokens_every?: InviteTokenWhereInput;
  inviteTokens_some?: InviteTokenWhereInput;
  inviteTokens_none?: InviteTokenWhereInput;
  localCredential?: LocalCredentialWhereInput;
  roleBindings_every?: RoleBindingWhereInput;
  roleBindings_some?: RoleBindingWhereInput;
  roleBindings_none?: RoleBindingWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface InviteTokenWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  assignments?: String;
  assignments_not?: String;
  assignments_in?: String[] | String;
  assignments_not_in?: String[] | String;
  assignments_lt?: String;
  assignments_lte?: String;
  assignments_gt?: String;
  assignments_gte?: String;
  assignments_contains?: String;
  assignments_not_contains?: String;
  assignments_starts_with?: String;
  assignments_not_starts_with?: String;
  assignments_ends_with?: String;
  assignments_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  token?: String;
  token_not?: String;
  token_in?: String[] | String;
  token_not_in?: String[] | String;
  token_lt?: String;
  token_lte?: String;
  token_gt?: String;
  token_gte?: String;
  token_contains?: String;
  token_not_contains?: String;
  token_starts_with?: String;
  token_not_starts_with?: String;
  token_ends_with?: String;
  token_not_ends_with?: String;
  user?: UserWhereInput;
  workspace?: WorkspaceWhereInput;
  AND?: InviteTokenWhereInput[] | InviteTokenWhereInput;
  OR?: InviteTokenWhereInput[] | InviteTokenWhereInput;
  NOT?: InviteTokenWhereInput[] | InviteTokenWhereInput;
}

export interface WorkspaceWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  active?: Boolean;
  active_not?: Boolean;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  inviteTokens_every?: InviteTokenWhereInput;
  inviteTokens_some?: InviteTokenWhereInput;
  inviteTokens_none?: InviteTokenWhereInput;
  label?: String;
  label_not?: String;
  label_in?: String[] | String;
  label_not_in?: String[] | String;
  label_lt?: String;
  label_lte?: String;
  label_gt?: String;
  label_gte?: String;
  label_contains?: String;
  label_not_contains?: String;
  label_starts_with?: String;
  label_not_starts_with?: String;
  label_ends_with?: String;
  label_not_ends_with?: String;
  properties_every?: WorkspacePropertyWhereInput;
  properties_some?: WorkspacePropertyWhereInput;
  properties_none?: WorkspacePropertyWhereInput;
  users_every?: UserWhereInput;
  users_some?: UserWhereInput;
  users_none?: UserWhereInput;
  AND?: WorkspaceWhereInput[] | WorkspaceWhereInput;
  OR?: WorkspaceWhereInput[] | WorkspaceWhereInput;
  NOT?: WorkspaceWhereInput[] | WorkspaceWhereInput;
}

export interface WorkspacePropertyWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  category?: String;
  category_not?: String;
  category_in?: String[] | String;
  category_not_in?: String[] | String;
  category_lt?: String;
  category_lte?: String;
  category_gt?: String;
  category_gte?: String;
  category_contains?: String;
  category_not_contains?: String;
  category_starts_with?: String;
  category_not_starts_with?: String;
  category_ends_with?: String;
  category_not_ends_with?: String;
  key?: String;
  key_not?: String;
  key_in?: String[] | String;
  key_not_in?: String[] | String;
  key_lt?: String;
  key_lte?: String;
  key_gt?: String;
  key_gte?: String;
  key_contains?: String;
  key_not_contains?: String;
  key_starts_with?: String;
  key_not_starts_with?: String;
  key_ends_with?: String;
  key_not_ends_with?: String;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  workspace?: WorkspaceWhereInput;
  AND?: WorkspacePropertyWhereInput[] | WorkspacePropertyWhereInput;
  OR?: WorkspacePropertyWhereInput[] | WorkspacePropertyWhereInput;
  NOT?: WorkspacePropertyWhereInput[] | WorkspacePropertyWhereInput;
}

export interface LocalCredentialWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  user?: UserWhereInput;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  resetToken?: String;
  resetToken_not?: String;
  resetToken_in?: String[] | String;
  resetToken_not_in?: String[] | String;
  resetToken_lt?: String;
  resetToken_lte?: String;
  resetToken_gt?: String;
  resetToken_gte?: String;
  resetToken_contains?: String;
  resetToken_not_contains?: String;
  resetToken_starts_with?: String;
  resetToken_not_starts_with?: String;
  resetToken_ends_with?: String;
  resetToken_not_ends_with?: String;
  AND?: LocalCredentialWhereInput[] | LocalCredentialWhereInput;
  OR?: LocalCredentialWhereInput[] | LocalCredentialWhereInput;
  NOT?: LocalCredentialWhereInput[] | LocalCredentialWhereInput;
}

export interface RoleBindingWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  subject?: UserWhereInput;
  role?: Role;
  role_not?: Role;
  role_in?: Role[] | Role;
  role_not_in?: Role[] | Role;
  workspace?: WorkspaceWhereInput;
  deployment?: DeploymentWhereInput;
  AND?: RoleBindingWhereInput[] | RoleBindingWhereInput;
  OR?: RoleBindingWhereInput[] | RoleBindingWhereInput;
  NOT?: RoleBindingWhereInput[] | RoleBindingWhereInput;
}

export type InviteTokenWhereUniqueInput = AtLeastOne<{
  id: UUID;
}>;

export type LocalCredentialWhereUniqueInput = AtLeastOne<{
  id: UUID;
  password?: String;
}>;

export type RoleBindingWhereUniqueInput = AtLeastOne<{
  id: UUID;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: UUID;
  username?: String;
}>;

export type WorkspaceWhereUniqueInput = AtLeastOne<{
  id: UUID;
}>;

export type WorkspacePropertyWhereUniqueInput = AtLeastOne<{
  id: UUID;
}>;

export interface DeploymentCreateInput {
  config?: String;
}

export interface DeploymentUpdateInput {
  config?: String;
}

export interface DeploymentUpdateManyMutationInput {
  config?: String;
}

export interface EmailCreateInput {
  address?: String;
  main?: Boolean;
  token?: String;
  user?: UserCreateOneWithoutEmailsInput;
  verified?: Boolean;
}

export interface UserCreateOneWithoutEmailsInput {
  create?: UserCreateWithoutEmailsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutEmailsInput {
  username?: String;
  fullName?: String;
  status?: String;
  inviteTokens?: InviteTokenCreateManyWithoutUserInput;
  localCredential?: LocalCredentialCreateOneWithoutUserInput;
  roleBindings?: RoleBindingCreateManyWithoutSubjectInput;
}

export interface InviteTokenCreateManyWithoutUserInput {
  create?:
    | InviteTokenCreateWithoutUserInput[]
    | InviteTokenCreateWithoutUserInput;
  connect?: InviteTokenWhereUniqueInput[] | InviteTokenWhereUniqueInput;
}

export interface InviteTokenCreateWithoutUserInput {
  assignments?: String;
  email?: String;
  token?: String;
  workspace?: WorkspaceCreateOneWithoutInviteTokensInput;
}

export interface WorkspaceCreateOneWithoutInviteTokensInput {
  create?: WorkspaceCreateWithoutInviteTokensInput;
  connect?: WorkspaceWhereUniqueInput;
}

export interface WorkspaceCreateWithoutInviteTokensInput {
  active?: Boolean;
  description?: String;
  label?: String;
  properties?: WorkspacePropertyCreateManyWithoutWorkspaceInput;
  users?: UserCreateManyInput;
}

export interface WorkspacePropertyCreateManyWithoutWorkspaceInput {
  create?:
    | WorkspacePropertyCreateWithoutWorkspaceInput[]
    | WorkspacePropertyCreateWithoutWorkspaceInput;
  connect?:
    | WorkspacePropertyWhereUniqueInput[]
    | WorkspacePropertyWhereUniqueInput;
}

export interface WorkspacePropertyCreateWithoutWorkspaceInput {
  category?: String;
  key: String;
  value?: String;
}

export interface UserCreateManyInput {
  create?: UserCreateInput[] | UserCreateInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserCreateInput {
  username?: String;
  emails?: EmailCreateManyWithoutUserInput;
  fullName?: String;
  status?: String;
  inviteTokens?: InviteTokenCreateManyWithoutUserInput;
  localCredential?: LocalCredentialCreateOneWithoutUserInput;
  roleBindings?: RoleBindingCreateManyWithoutSubjectInput;
}

export interface EmailCreateManyWithoutUserInput {
  create?: EmailCreateWithoutUserInput[] | EmailCreateWithoutUserInput;
  connect?: EmailWhereUniqueInput[] | EmailWhereUniqueInput;
}

export interface EmailCreateWithoutUserInput {
  address?: String;
  main?: Boolean;
  token?: String;
  verified?: Boolean;
}

export interface LocalCredentialCreateOneWithoutUserInput {
  create?: LocalCredentialCreateWithoutUserInput;
  connect?: LocalCredentialWhereUniqueInput;
}

export interface LocalCredentialCreateWithoutUserInput {
  password?: String;
  resetToken?: String;
}

export interface RoleBindingCreateManyWithoutSubjectInput {
  create?:
    | RoleBindingCreateWithoutSubjectInput[]
    | RoleBindingCreateWithoutSubjectInput;
  connect?: RoleBindingWhereUniqueInput[] | RoleBindingWhereUniqueInput;
}

export interface RoleBindingCreateWithoutSubjectInput {
  role?: Role;
  workspace?: WorkspaceCreateOneInput;
  deployment?: DeploymentCreateOneInput;
}

export interface WorkspaceCreateOneInput {
  create?: WorkspaceCreateInput;
  connect?: WorkspaceWhereUniqueInput;
}

export interface WorkspaceCreateInput {
  active?: Boolean;
  description?: String;
  inviteTokens?: InviteTokenCreateManyWithoutWorkspaceInput;
  label?: String;
  properties?: WorkspacePropertyCreateManyWithoutWorkspaceInput;
  users?: UserCreateManyInput;
}

export interface InviteTokenCreateManyWithoutWorkspaceInput {
  create?:
    | InviteTokenCreateWithoutWorkspaceInput[]
    | InviteTokenCreateWithoutWorkspaceInput;
  connect?: InviteTokenWhereUniqueInput[] | InviteTokenWhereUniqueInput;
}

export interface InviteTokenCreateWithoutWorkspaceInput {
  assignments?: String;
  email?: String;
  token?: String;
  user?: UserCreateOneWithoutInviteTokensInput;
}

export interface UserCreateOneWithoutInviteTokensInput {
  create?: UserCreateWithoutInviteTokensInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutInviteTokensInput {
  username?: String;
  emails?: EmailCreateManyWithoutUserInput;
  fullName?: String;
  status?: String;
  localCredential?: LocalCredentialCreateOneWithoutUserInput;
  roleBindings?: RoleBindingCreateManyWithoutSubjectInput;
}

export interface DeploymentCreateOneInput {
  create?: DeploymentCreateInput;
  connect?: DeploymentWhereUniqueInput;
}

export interface EmailUpdateInput {
  address?: String;
  main?: Boolean;
  token?: String;
  user?: UserUpdateOneWithoutEmailsInput;
  verified?: Boolean;
}

export interface UserUpdateOneWithoutEmailsInput {
  create?: UserCreateWithoutEmailsInput;
  update?: UserUpdateWithoutEmailsDataInput;
  upsert?: UserUpsertWithoutEmailsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutEmailsDataInput {
  username?: String;
  fullName?: String;
  status?: String;
  inviteTokens?: InviteTokenUpdateManyWithoutUserInput;
  localCredential?: LocalCredentialUpdateOneWithoutUserInput;
  roleBindings?: RoleBindingUpdateManyWithoutSubjectInput;
}

export interface InviteTokenUpdateManyWithoutUserInput {
  create?:
    | InviteTokenCreateWithoutUserInput[]
    | InviteTokenCreateWithoutUserInput;
  delete?: InviteTokenWhereUniqueInput[] | InviteTokenWhereUniqueInput;
  connect?: InviteTokenWhereUniqueInput[] | InviteTokenWhereUniqueInput;
  disconnect?: InviteTokenWhereUniqueInput[] | InviteTokenWhereUniqueInput;
  update?:
    | InviteTokenUpdateWithWhereUniqueWithoutUserInput[]
    | InviteTokenUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | InviteTokenUpsertWithWhereUniqueWithoutUserInput[]
    | InviteTokenUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: InviteTokenScalarWhereInput[] | InviteTokenScalarWhereInput;
  updateMany?:
    | InviteTokenUpdateManyWithWhereNestedInput[]
    | InviteTokenUpdateManyWithWhereNestedInput;
}

export interface InviteTokenUpdateWithWhereUniqueWithoutUserInput {
  where: InviteTokenWhereUniqueInput;
  data: InviteTokenUpdateWithoutUserDataInput;
}

export interface InviteTokenUpdateWithoutUserDataInput {
  assignments?: String;
  email?: String;
  token?: String;
  workspace?: WorkspaceUpdateOneWithoutInviteTokensInput;
}

export interface WorkspaceUpdateOneWithoutInviteTokensInput {
  create?: WorkspaceCreateWithoutInviteTokensInput;
  update?: WorkspaceUpdateWithoutInviteTokensDataInput;
  upsert?: WorkspaceUpsertWithoutInviteTokensInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: WorkspaceWhereUniqueInput;
}

export interface WorkspaceUpdateWithoutInviteTokensDataInput {
  active?: Boolean;
  description?: String;
  label?: String;
  properties?: WorkspacePropertyUpdateManyWithoutWorkspaceInput;
  users?: UserUpdateManyInput;
}

export interface WorkspacePropertyUpdateManyWithoutWorkspaceInput {
  create?:
    | WorkspacePropertyCreateWithoutWorkspaceInput[]
    | WorkspacePropertyCreateWithoutWorkspaceInput;
  delete?:
    | WorkspacePropertyWhereUniqueInput[]
    | WorkspacePropertyWhereUniqueInput;
  connect?:
    | WorkspacePropertyWhereUniqueInput[]
    | WorkspacePropertyWhereUniqueInput;
  disconnect?:
    | WorkspacePropertyWhereUniqueInput[]
    | WorkspacePropertyWhereUniqueInput;
  update?:
    | WorkspacePropertyUpdateWithWhereUniqueWithoutWorkspaceInput[]
    | WorkspacePropertyUpdateWithWhereUniqueWithoutWorkspaceInput;
  upsert?:
    | WorkspacePropertyUpsertWithWhereUniqueWithoutWorkspaceInput[]
    | WorkspacePropertyUpsertWithWhereUniqueWithoutWorkspaceInput;
  deleteMany?:
    | WorkspacePropertyScalarWhereInput[]
    | WorkspacePropertyScalarWhereInput;
  updateMany?:
    | WorkspacePropertyUpdateManyWithWhereNestedInput[]
    | WorkspacePropertyUpdateManyWithWhereNestedInput;
}

export interface WorkspacePropertyUpdateWithWhereUniqueWithoutWorkspaceInput {
  where: WorkspacePropertyWhereUniqueInput;
  data: WorkspacePropertyUpdateWithoutWorkspaceDataInput;
}

export interface WorkspacePropertyUpdateWithoutWorkspaceDataInput {
  category?: String;
  key?: String;
  value?: String;
}

export interface WorkspacePropertyUpsertWithWhereUniqueWithoutWorkspaceInput {
  where: WorkspacePropertyWhereUniqueInput;
  update: WorkspacePropertyUpdateWithoutWorkspaceDataInput;
  create: WorkspacePropertyCreateWithoutWorkspaceInput;
}

export interface WorkspacePropertyScalarWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  category?: String;
  category_not?: String;
  category_in?: String[] | String;
  category_not_in?: String[] | String;
  category_lt?: String;
  category_lte?: String;
  category_gt?: String;
  category_gte?: String;
  category_contains?: String;
  category_not_contains?: String;
  category_starts_with?: String;
  category_not_starts_with?: String;
  category_ends_with?: String;
  category_not_ends_with?: String;
  key?: String;
  key_not?: String;
  key_in?: String[] | String;
  key_not_in?: String[] | String;
  key_lt?: String;
  key_lte?: String;
  key_gt?: String;
  key_gte?: String;
  key_contains?: String;
  key_not_contains?: String;
  key_starts_with?: String;
  key_not_starts_with?: String;
  key_ends_with?: String;
  key_not_ends_with?: String;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  AND?: WorkspacePropertyScalarWhereInput[] | WorkspacePropertyScalarWhereInput;
  OR?: WorkspacePropertyScalarWhereInput[] | WorkspacePropertyScalarWhereInput;
  NOT?: WorkspacePropertyScalarWhereInput[] | WorkspacePropertyScalarWhereInput;
}

export interface WorkspacePropertyUpdateManyWithWhereNestedInput {
  where: WorkspacePropertyScalarWhereInput;
  data: WorkspacePropertyUpdateManyDataInput;
}

export interface WorkspacePropertyUpdateManyDataInput {
  category?: String;
  key?: String;
  value?: String;
}

export interface UserUpdateManyInput {
  create?: UserCreateInput[] | UserCreateInput;
  update?:
    | UserUpdateWithWhereUniqueNestedInput[]
    | UserUpdateWithWhereUniqueNestedInput;
  upsert?:
    | UserUpsertWithWhereUniqueNestedInput[]
    | UserUpsertWithWhereUniqueNestedInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  data: UserUpdateDataInput;
}

export interface UserUpdateDataInput {
  username?: String;
  emails?: EmailUpdateManyWithoutUserInput;
  fullName?: String;
  status?: String;
  inviteTokens?: InviteTokenUpdateManyWithoutUserInput;
  localCredential?: LocalCredentialUpdateOneWithoutUserInput;
  roleBindings?: RoleBindingUpdateManyWithoutSubjectInput;
}

export interface EmailUpdateManyWithoutUserInput {
  create?: EmailCreateWithoutUserInput[] | EmailCreateWithoutUserInput;
  delete?: EmailWhereUniqueInput[] | EmailWhereUniqueInput;
  connect?: EmailWhereUniqueInput[] | EmailWhereUniqueInput;
  disconnect?: EmailWhereUniqueInput[] | EmailWhereUniqueInput;
  update?:
    | EmailUpdateWithWhereUniqueWithoutUserInput[]
    | EmailUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | EmailUpsertWithWhereUniqueWithoutUserInput[]
    | EmailUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: EmailScalarWhereInput[] | EmailScalarWhereInput;
  updateMany?:
    | EmailUpdateManyWithWhereNestedInput[]
    | EmailUpdateManyWithWhereNestedInput;
}

export interface EmailUpdateWithWhereUniqueWithoutUserInput {
  where: EmailWhereUniqueInput;
  data: EmailUpdateWithoutUserDataInput;
}

export interface EmailUpdateWithoutUserDataInput {
  address?: String;
  main?: Boolean;
  token?: String;
  verified?: Boolean;
}

export interface EmailUpsertWithWhereUniqueWithoutUserInput {
  where: EmailWhereUniqueInput;
  update: EmailUpdateWithoutUserDataInput;
  create: EmailCreateWithoutUserInput;
}

export interface EmailScalarWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  address?: String;
  address_not?: String;
  address_in?: String[] | String;
  address_not_in?: String[] | String;
  address_lt?: String;
  address_lte?: String;
  address_gt?: String;
  address_gte?: String;
  address_contains?: String;
  address_not_contains?: String;
  address_starts_with?: String;
  address_not_starts_with?: String;
  address_ends_with?: String;
  address_not_ends_with?: String;
  main?: Boolean;
  main_not?: Boolean;
  token?: String;
  token_not?: String;
  token_in?: String[] | String;
  token_not_in?: String[] | String;
  token_lt?: String;
  token_lte?: String;
  token_gt?: String;
  token_gte?: String;
  token_contains?: String;
  token_not_contains?: String;
  token_starts_with?: String;
  token_not_starts_with?: String;
  token_ends_with?: String;
  token_not_ends_with?: String;
  verified?: Boolean;
  verified_not?: Boolean;
  AND?: EmailScalarWhereInput[] | EmailScalarWhereInput;
  OR?: EmailScalarWhereInput[] | EmailScalarWhereInput;
  NOT?: EmailScalarWhereInput[] | EmailScalarWhereInput;
}

export interface EmailUpdateManyWithWhereNestedInput {
  where: EmailScalarWhereInput;
  data: EmailUpdateManyDataInput;
}

export interface EmailUpdateManyDataInput {
  address?: String;
  main?: Boolean;
  token?: String;
  verified?: Boolean;
}

export interface LocalCredentialUpdateOneWithoutUserInput {
  create?: LocalCredentialCreateWithoutUserInput;
  update?: LocalCredentialUpdateWithoutUserDataInput;
  upsert?: LocalCredentialUpsertWithoutUserInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: LocalCredentialWhereUniqueInput;
}

export interface LocalCredentialUpdateWithoutUserDataInput {
  password?: String;
  resetToken?: String;
}

export interface LocalCredentialUpsertWithoutUserInput {
  update: LocalCredentialUpdateWithoutUserDataInput;
  create: LocalCredentialCreateWithoutUserInput;
}

export interface RoleBindingUpdateManyWithoutSubjectInput {
  create?:
    | RoleBindingCreateWithoutSubjectInput[]
    | RoleBindingCreateWithoutSubjectInput;
  delete?: RoleBindingWhereUniqueInput[] | RoleBindingWhereUniqueInput;
  connect?: RoleBindingWhereUniqueInput[] | RoleBindingWhereUniqueInput;
  disconnect?: RoleBindingWhereUniqueInput[] | RoleBindingWhereUniqueInput;
  update?:
    | RoleBindingUpdateWithWhereUniqueWithoutSubjectInput[]
    | RoleBindingUpdateWithWhereUniqueWithoutSubjectInput;
  upsert?:
    | RoleBindingUpsertWithWhereUniqueWithoutSubjectInput[]
    | RoleBindingUpsertWithWhereUniqueWithoutSubjectInput;
  deleteMany?: RoleBindingScalarWhereInput[] | RoleBindingScalarWhereInput;
  updateMany?:
    | RoleBindingUpdateManyWithWhereNestedInput[]
    | RoleBindingUpdateManyWithWhereNestedInput;
}

export interface RoleBindingUpdateWithWhereUniqueWithoutSubjectInput {
  where: RoleBindingWhereUniqueInput;
  data: RoleBindingUpdateWithoutSubjectDataInput;
}

export interface RoleBindingUpdateWithoutSubjectDataInput {
  role?: Role;
  workspace?: WorkspaceUpdateOneInput;
  deployment?: DeploymentUpdateOneInput;
}

export interface WorkspaceUpdateOneInput {
  create?: WorkspaceCreateInput;
  update?: WorkspaceUpdateDataInput;
  upsert?: WorkspaceUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: WorkspaceWhereUniqueInput;
}

export interface WorkspaceUpdateDataInput {
  active?: Boolean;
  description?: String;
  inviteTokens?: InviteTokenUpdateManyWithoutWorkspaceInput;
  label?: String;
  properties?: WorkspacePropertyUpdateManyWithoutWorkspaceInput;
  users?: UserUpdateManyInput;
}

export interface InviteTokenUpdateManyWithoutWorkspaceInput {
  create?:
    | InviteTokenCreateWithoutWorkspaceInput[]
    | InviteTokenCreateWithoutWorkspaceInput;
  delete?: InviteTokenWhereUniqueInput[] | InviteTokenWhereUniqueInput;
  connect?: InviteTokenWhereUniqueInput[] | InviteTokenWhereUniqueInput;
  disconnect?: InviteTokenWhereUniqueInput[] | InviteTokenWhereUniqueInput;
  update?:
    | InviteTokenUpdateWithWhereUniqueWithoutWorkspaceInput[]
    | InviteTokenUpdateWithWhereUniqueWithoutWorkspaceInput;
  upsert?:
    | InviteTokenUpsertWithWhereUniqueWithoutWorkspaceInput[]
    | InviteTokenUpsertWithWhereUniqueWithoutWorkspaceInput;
  deleteMany?: InviteTokenScalarWhereInput[] | InviteTokenScalarWhereInput;
  updateMany?:
    | InviteTokenUpdateManyWithWhereNestedInput[]
    | InviteTokenUpdateManyWithWhereNestedInput;
}

export interface InviteTokenUpdateWithWhereUniqueWithoutWorkspaceInput {
  where: InviteTokenWhereUniqueInput;
  data: InviteTokenUpdateWithoutWorkspaceDataInput;
}

export interface InviteTokenUpdateWithoutWorkspaceDataInput {
  assignments?: String;
  email?: String;
  token?: String;
  user?: UserUpdateOneWithoutInviteTokensInput;
}

export interface UserUpdateOneWithoutInviteTokensInput {
  create?: UserCreateWithoutInviteTokensInput;
  update?: UserUpdateWithoutInviteTokensDataInput;
  upsert?: UserUpsertWithoutInviteTokensInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutInviteTokensDataInput {
  username?: String;
  emails?: EmailUpdateManyWithoutUserInput;
  fullName?: String;
  status?: String;
  localCredential?: LocalCredentialUpdateOneWithoutUserInput;
  roleBindings?: RoleBindingUpdateManyWithoutSubjectInput;
}

export interface UserUpsertWithoutInviteTokensInput {
  update: UserUpdateWithoutInviteTokensDataInput;
  create: UserCreateWithoutInviteTokensInput;
}

export interface InviteTokenUpsertWithWhereUniqueWithoutWorkspaceInput {
  where: InviteTokenWhereUniqueInput;
  update: InviteTokenUpdateWithoutWorkspaceDataInput;
  create: InviteTokenCreateWithoutWorkspaceInput;
}

export interface InviteTokenScalarWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  assignments?: String;
  assignments_not?: String;
  assignments_in?: String[] | String;
  assignments_not_in?: String[] | String;
  assignments_lt?: String;
  assignments_lte?: String;
  assignments_gt?: String;
  assignments_gte?: String;
  assignments_contains?: String;
  assignments_not_contains?: String;
  assignments_starts_with?: String;
  assignments_not_starts_with?: String;
  assignments_ends_with?: String;
  assignments_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  token?: String;
  token_not?: String;
  token_in?: String[] | String;
  token_not_in?: String[] | String;
  token_lt?: String;
  token_lte?: String;
  token_gt?: String;
  token_gte?: String;
  token_contains?: String;
  token_not_contains?: String;
  token_starts_with?: String;
  token_not_starts_with?: String;
  token_ends_with?: String;
  token_not_ends_with?: String;
  AND?: InviteTokenScalarWhereInput[] | InviteTokenScalarWhereInput;
  OR?: InviteTokenScalarWhereInput[] | InviteTokenScalarWhereInput;
  NOT?: InviteTokenScalarWhereInput[] | InviteTokenScalarWhereInput;
}

export interface InviteTokenUpdateManyWithWhereNestedInput {
  where: InviteTokenScalarWhereInput;
  data: InviteTokenUpdateManyDataInput;
}

export interface InviteTokenUpdateManyDataInput {
  assignments?: String;
  email?: String;
  token?: String;
}

export interface WorkspaceUpsertNestedInput {
  update: WorkspaceUpdateDataInput;
  create: WorkspaceCreateInput;
}

export interface DeploymentUpdateOneInput {
  create?: DeploymentCreateInput;
  update?: DeploymentUpdateDataInput;
  upsert?: DeploymentUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: DeploymentWhereUniqueInput;
}

export interface DeploymentUpdateDataInput {
  config?: String;
}

export interface DeploymentUpsertNestedInput {
  update: DeploymentUpdateDataInput;
  create: DeploymentCreateInput;
}

export interface RoleBindingUpsertWithWhereUniqueWithoutSubjectInput {
  where: RoleBindingWhereUniqueInput;
  update: RoleBindingUpdateWithoutSubjectDataInput;
  create: RoleBindingCreateWithoutSubjectInput;
}

export interface RoleBindingScalarWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  role?: Role;
  role_not?: Role;
  role_in?: Role[] | Role;
  role_not_in?: Role[] | Role;
  AND?: RoleBindingScalarWhereInput[] | RoleBindingScalarWhereInput;
  OR?: RoleBindingScalarWhereInput[] | RoleBindingScalarWhereInput;
  NOT?: RoleBindingScalarWhereInput[] | RoleBindingScalarWhereInput;
}

export interface RoleBindingUpdateManyWithWhereNestedInput {
  where: RoleBindingScalarWhereInput;
  data: RoleBindingUpdateManyDataInput;
}

export interface RoleBindingUpdateManyDataInput {
  role?: Role;
}

export interface UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface UserScalarWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  fullName?: String;
  fullName_not?: String;
  fullName_in?: String[] | String;
  fullName_not_in?: String[] | String;
  fullName_lt?: String;
  fullName_lte?: String;
  fullName_gt?: String;
  fullName_gte?: String;
  fullName_contains?: String;
  fullName_not_contains?: String;
  fullName_starts_with?: String;
  fullName_not_starts_with?: String;
  fullName_ends_with?: String;
  fullName_not_ends_with?: String;
  status?: String;
  status_not?: String;
  status_in?: String[] | String;
  status_not_in?: String[] | String;
  status_lt?: String;
  status_lte?: String;
  status_gt?: String;
  status_gte?: String;
  status_contains?: String;
  status_not_contains?: String;
  status_starts_with?: String;
  status_not_starts_with?: String;
  status_ends_with?: String;
  status_not_ends_with?: String;
  AND?: UserScalarWhereInput[] | UserScalarWhereInput;
  OR?: UserScalarWhereInput[] | UserScalarWhereInput;
  NOT?: UserScalarWhereInput[] | UserScalarWhereInput;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  username?: String;
  fullName?: String;
  status?: String;
}

export interface WorkspaceUpsertWithoutInviteTokensInput {
  update: WorkspaceUpdateWithoutInviteTokensDataInput;
  create: WorkspaceCreateWithoutInviteTokensInput;
}

export interface InviteTokenUpsertWithWhereUniqueWithoutUserInput {
  where: InviteTokenWhereUniqueInput;
  update: InviteTokenUpdateWithoutUserDataInput;
  create: InviteTokenCreateWithoutUserInput;
}

export interface UserUpsertWithoutEmailsInput {
  update: UserUpdateWithoutEmailsDataInput;
  create: UserCreateWithoutEmailsInput;
}

export interface EmailUpdateManyMutationInput {
  address?: String;
  main?: Boolean;
  token?: String;
  verified?: Boolean;
}

export interface InviteTokenCreateInput {
  assignments?: String;
  email?: String;
  token?: String;
  user?: UserCreateOneWithoutInviteTokensInput;
  workspace?: WorkspaceCreateOneWithoutInviteTokensInput;
}

export interface InviteTokenUpdateInput {
  assignments?: String;
  email?: String;
  token?: String;
  user?: UserUpdateOneWithoutInviteTokensInput;
  workspace?: WorkspaceUpdateOneWithoutInviteTokensInput;
}

export interface InviteTokenUpdateManyMutationInput {
  assignments?: String;
  email?: String;
  token?: String;
}

export interface LocalCredentialCreateInput {
  user?: UserCreateOneWithoutLocalCredentialInput;
  password?: String;
  resetToken?: String;
}

export interface UserCreateOneWithoutLocalCredentialInput {
  create?: UserCreateWithoutLocalCredentialInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutLocalCredentialInput {
  username?: String;
  emails?: EmailCreateManyWithoutUserInput;
  fullName?: String;
  status?: String;
  inviteTokens?: InviteTokenCreateManyWithoutUserInput;
  roleBindings?: RoleBindingCreateManyWithoutSubjectInput;
}

export interface LocalCredentialUpdateInput {
  user?: UserUpdateOneWithoutLocalCredentialInput;
  password?: String;
  resetToken?: String;
}

export interface UserUpdateOneWithoutLocalCredentialInput {
  create?: UserCreateWithoutLocalCredentialInput;
  update?: UserUpdateWithoutLocalCredentialDataInput;
  upsert?: UserUpsertWithoutLocalCredentialInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutLocalCredentialDataInput {
  username?: String;
  emails?: EmailUpdateManyWithoutUserInput;
  fullName?: String;
  status?: String;
  inviteTokens?: InviteTokenUpdateManyWithoutUserInput;
  roleBindings?: RoleBindingUpdateManyWithoutSubjectInput;
}

export interface UserUpsertWithoutLocalCredentialInput {
  update: UserUpdateWithoutLocalCredentialDataInput;
  create: UserCreateWithoutLocalCredentialInput;
}

export interface LocalCredentialUpdateManyMutationInput {
  password?: String;
  resetToken?: String;
}

export interface RoleBindingCreateInput {
  subject?: UserCreateOneWithoutRoleBindingsInput;
  role?: Role;
  workspace?: WorkspaceCreateOneInput;
  deployment?: DeploymentCreateOneInput;
}

export interface UserCreateOneWithoutRoleBindingsInput {
  create?: UserCreateWithoutRoleBindingsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutRoleBindingsInput {
  username?: String;
  emails?: EmailCreateManyWithoutUserInput;
  fullName?: String;
  status?: String;
  inviteTokens?: InviteTokenCreateManyWithoutUserInput;
  localCredential?: LocalCredentialCreateOneWithoutUserInput;
}

export interface RoleBindingUpdateInput {
  subject?: UserUpdateOneWithoutRoleBindingsInput;
  role?: Role;
  workspace?: WorkspaceUpdateOneInput;
  deployment?: DeploymentUpdateOneInput;
}

export interface UserUpdateOneWithoutRoleBindingsInput {
  create?: UserCreateWithoutRoleBindingsInput;
  update?: UserUpdateWithoutRoleBindingsDataInput;
  upsert?: UserUpsertWithoutRoleBindingsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutRoleBindingsDataInput {
  username?: String;
  emails?: EmailUpdateManyWithoutUserInput;
  fullName?: String;
  status?: String;
  inviteTokens?: InviteTokenUpdateManyWithoutUserInput;
  localCredential?: LocalCredentialUpdateOneWithoutUserInput;
}

export interface UserUpsertWithoutRoleBindingsInput {
  update: UserUpdateWithoutRoleBindingsDataInput;
  create: UserCreateWithoutRoleBindingsInput;
}

export interface RoleBindingUpdateManyMutationInput {
  role?: Role;
}

export interface UserUpdateInput {
  username?: String;
  emails?: EmailUpdateManyWithoutUserInput;
  fullName?: String;
  status?: String;
  inviteTokens?: InviteTokenUpdateManyWithoutUserInput;
  localCredential?: LocalCredentialUpdateOneWithoutUserInput;
  roleBindings?: RoleBindingUpdateManyWithoutSubjectInput;
}

export interface UserUpdateManyMutationInput {
  username?: String;
  fullName?: String;
  status?: String;
}

export interface WorkspaceUpdateInput {
  active?: Boolean;
  description?: String;
  inviteTokens?: InviteTokenUpdateManyWithoutWorkspaceInput;
  label?: String;
  properties?: WorkspacePropertyUpdateManyWithoutWorkspaceInput;
  users?: UserUpdateManyInput;
}

export interface WorkspaceUpdateManyMutationInput {
  active?: Boolean;
  description?: String;
  label?: String;
}

export interface WorkspacePropertyCreateInput {
  category?: String;
  key: String;
  value?: String;
  workspace?: WorkspaceCreateOneWithoutPropertiesInput;
}

export interface WorkspaceCreateOneWithoutPropertiesInput {
  create?: WorkspaceCreateWithoutPropertiesInput;
  connect?: WorkspaceWhereUniqueInput;
}

export interface WorkspaceCreateWithoutPropertiesInput {
  active?: Boolean;
  description?: String;
  inviteTokens?: InviteTokenCreateManyWithoutWorkspaceInput;
  label?: String;
  users?: UserCreateManyInput;
}

export interface WorkspacePropertyUpdateInput {
  category?: String;
  key?: String;
  value?: String;
  workspace?: WorkspaceUpdateOneWithoutPropertiesInput;
}

export interface WorkspaceUpdateOneWithoutPropertiesInput {
  create?: WorkspaceCreateWithoutPropertiesInput;
  update?: WorkspaceUpdateWithoutPropertiesDataInput;
  upsert?: WorkspaceUpsertWithoutPropertiesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: WorkspaceWhereUniqueInput;
}

export interface WorkspaceUpdateWithoutPropertiesDataInput {
  active?: Boolean;
  description?: String;
  inviteTokens?: InviteTokenUpdateManyWithoutWorkspaceInput;
  label?: String;
  users?: UserUpdateManyInput;
}

export interface WorkspaceUpsertWithoutPropertiesInput {
  update: WorkspaceUpdateWithoutPropertiesDataInput;
  create: WorkspaceCreateWithoutPropertiesInput;
}

export interface WorkspacePropertyUpdateManyMutationInput {
  category?: String;
  key?: String;
  value?: String;
}

export interface DeploymentSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DeploymentWhereInput;
  AND?: DeploymentSubscriptionWhereInput[] | DeploymentSubscriptionWhereInput;
  OR?: DeploymentSubscriptionWhereInput[] | DeploymentSubscriptionWhereInput;
  NOT?: DeploymentSubscriptionWhereInput[] | DeploymentSubscriptionWhereInput;
}

export interface EmailSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: EmailWhereInput;
  AND?: EmailSubscriptionWhereInput[] | EmailSubscriptionWhereInput;
  OR?: EmailSubscriptionWhereInput[] | EmailSubscriptionWhereInput;
  NOT?: EmailSubscriptionWhereInput[] | EmailSubscriptionWhereInput;
}

export interface InviteTokenSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: InviteTokenWhereInput;
  AND?: InviteTokenSubscriptionWhereInput[] | InviteTokenSubscriptionWhereInput;
  OR?: InviteTokenSubscriptionWhereInput[] | InviteTokenSubscriptionWhereInput;
  NOT?: InviteTokenSubscriptionWhereInput[] | InviteTokenSubscriptionWhereInput;
}

export interface LocalCredentialSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LocalCredentialWhereInput;
  AND?:
    | LocalCredentialSubscriptionWhereInput[]
    | LocalCredentialSubscriptionWhereInput;
  OR?:
    | LocalCredentialSubscriptionWhereInput[]
    | LocalCredentialSubscriptionWhereInput;
  NOT?:
    | LocalCredentialSubscriptionWhereInput[]
    | LocalCredentialSubscriptionWhereInput;
}

export interface RoleBindingSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: RoleBindingWhereInput;
  AND?: RoleBindingSubscriptionWhereInput[] | RoleBindingSubscriptionWhereInput;
  OR?: RoleBindingSubscriptionWhereInput[] | RoleBindingSubscriptionWhereInput;
  NOT?: RoleBindingSubscriptionWhereInput[] | RoleBindingSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface WorkspaceSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: WorkspaceWhereInput;
  AND?: WorkspaceSubscriptionWhereInput[] | WorkspaceSubscriptionWhereInput;
  OR?: WorkspaceSubscriptionWhereInput[] | WorkspaceSubscriptionWhereInput;
  NOT?: WorkspaceSubscriptionWhereInput[] | WorkspaceSubscriptionWhereInput;
}

export interface WorkspacePropertySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: WorkspacePropertyWhereInput;
  AND?:
    | WorkspacePropertySubscriptionWhereInput[]
    | WorkspacePropertySubscriptionWhereInput;
  OR?:
    | WorkspacePropertySubscriptionWhereInput[]
    | WorkspacePropertySubscriptionWhereInput;
  NOT?:
    | WorkspacePropertySubscriptionWhereInput[]
    | WorkspacePropertySubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Deployment {
  id: UUID;
  config?: String;
}

export interface DeploymentPromise extends Promise<Deployment>, Fragmentable {
  id: () => Promise<UUID>;
  config: () => Promise<String>;
}

export interface DeploymentSubscription
  extends Promise<AsyncIterator<Deployment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  config: () => Promise<AsyncIterator<String>>;
}

export interface DeploymentConnection {}

export interface DeploymentConnectionPromise
  extends Promise<DeploymentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DeploymentEdge>>() => T;
  aggregate: <T = AggregateDeploymentPromise>() => T;
}

export interface DeploymentConnectionSubscription
  extends Promise<AsyncIterator<DeploymentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DeploymentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDeploymentSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface DeploymentEdge {
  cursor: String;
}

export interface DeploymentEdgePromise
  extends Promise<DeploymentEdge>,
    Fragmentable {
  node: <T = DeploymentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DeploymentEdgeSubscription
  extends Promise<AsyncIterator<DeploymentEdge>>,
    Fragmentable {
  node: <T = DeploymentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDeployment {
  count: Int;
}

export interface AggregateDeploymentPromise
  extends Promise<AggregateDeployment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDeploymentSubscription
  extends Promise<AsyncIterator<AggregateDeployment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Email {
  id: UUID;
  address?: String;
  main?: Boolean;
  token?: String;
  verified?: Boolean;
}

export interface EmailPromise extends Promise<Email>, Fragmentable {
  id: () => Promise<UUID>;
  address: () => Promise<String>;
  main: () => Promise<Boolean>;
  token: () => Promise<String>;
  user: <T = UserPromise>() => T;
  verified: () => Promise<Boolean>;
}

export interface EmailSubscription
  extends Promise<AsyncIterator<Email>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  address: () => Promise<AsyncIterator<String>>;
  main: () => Promise<AsyncIterator<Boolean>>;
  token: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  verified: () => Promise<AsyncIterator<Boolean>>;
}

export interface User {
  id: UUID;
  username?: String;
  fullName?: String;
  status?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<UUID>;
  username: () => Promise<String>;
  emails: <T = FragmentableArray<Email>>(
    args?: {
      where?: EmailWhereInput;
      orderBy?: EmailOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  fullName: () => Promise<String>;
  status: () => Promise<String>;
  inviteTokens: <T = FragmentableArray<InviteToken>>(
    args?: {
      where?: InviteTokenWhereInput;
      orderBy?: InviteTokenOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  localCredential: <T = LocalCredentialPromise>() => T;
  roleBindings: <T = FragmentableArray<RoleBinding>>(
    args?: {
      where?: RoleBindingWhereInput;
      orderBy?: RoleBindingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  username: () => Promise<AsyncIterator<String>>;
  emails: <T = Promise<AsyncIterator<EmailSubscription>>>(
    args?: {
      where?: EmailWhereInput;
      orderBy?: EmailOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  fullName: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  inviteTokens: <T = Promise<AsyncIterator<InviteTokenSubscription>>>(
    args?: {
      where?: InviteTokenWhereInput;
      orderBy?: InviteTokenOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  localCredential: <T = LocalCredentialSubscription>() => T;
  roleBindings: <T = Promise<AsyncIterator<RoleBindingSubscription>>>(
    args?: {
      where?: RoleBindingWhereInput;
      orderBy?: RoleBindingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface InviteToken {
  id: UUID;
  assignments?: String;
  email?: String;
  token?: String;
}

export interface InviteTokenPromise extends Promise<InviteToken>, Fragmentable {
  id: () => Promise<UUID>;
  assignments: () => Promise<String>;
  email: () => Promise<String>;
  token: () => Promise<String>;
  user: <T = UserPromise>() => T;
  workspace: <T = WorkspacePromise>() => T;
}

export interface InviteTokenSubscription
  extends Promise<AsyncIterator<InviteToken>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  assignments: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  token: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  workspace: <T = WorkspaceSubscription>() => T;
}

export interface Workspace {
  id: UUID;
  active?: Boolean;
  description?: String;
  label?: String;
}

export interface WorkspacePromise extends Promise<Workspace>, Fragmentable {
  id: () => Promise<UUID>;
  active: () => Promise<Boolean>;
  description: () => Promise<String>;
  inviteTokens: <T = FragmentableArray<InviteToken>>(
    args?: {
      where?: InviteTokenWhereInput;
      orderBy?: InviteTokenOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  label: () => Promise<String>;
  properties: <T = FragmentableArray<WorkspaceProperty>>(
    args?: {
      where?: WorkspacePropertyWhereInput;
      orderBy?: WorkspacePropertyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  users: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface WorkspaceSubscription
  extends Promise<AsyncIterator<Workspace>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  active: () => Promise<AsyncIterator<Boolean>>;
  description: () => Promise<AsyncIterator<String>>;
  inviteTokens: <T = Promise<AsyncIterator<InviteTokenSubscription>>>(
    args?: {
      where?: InviteTokenWhereInput;
      orderBy?: InviteTokenOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  label: () => Promise<AsyncIterator<String>>;
  properties: <T = Promise<AsyncIterator<WorkspacePropertySubscription>>>(
    args?: {
      where?: WorkspacePropertyWhereInput;
      orderBy?: WorkspacePropertyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  users: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface WorkspaceProperty {
  id: UUID;
  category?: String;
  key: String;
  value?: String;
}

export interface WorkspacePropertyPromise
  extends Promise<WorkspaceProperty>,
    Fragmentable {
  id: () => Promise<UUID>;
  category: () => Promise<String>;
  key: () => Promise<String>;
  value: () => Promise<String>;
  workspace: <T = WorkspacePromise>() => T;
}

export interface WorkspacePropertySubscription
  extends Promise<AsyncIterator<WorkspaceProperty>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  category: () => Promise<AsyncIterator<String>>;
  key: () => Promise<AsyncIterator<String>>;
  value: () => Promise<AsyncIterator<String>>;
  workspace: <T = WorkspaceSubscription>() => T;
}

export interface LocalCredential {
  id: UUID;
  password?: String;
  resetToken?: String;
}

export interface LocalCredentialPromise
  extends Promise<LocalCredential>,
    Fragmentable {
  id: () => Promise<UUID>;
  user: <T = UserPromise>() => T;
  password: () => Promise<String>;
  resetToken: () => Promise<String>;
}

export interface LocalCredentialSubscription
  extends Promise<AsyncIterator<LocalCredential>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  user: <T = UserSubscription>() => T;
  password: () => Promise<AsyncIterator<String>>;
  resetToken: () => Promise<AsyncIterator<String>>;
}

export interface RoleBinding {
  id: UUID;
  role?: Role;
}

export interface RoleBindingPromise extends Promise<RoleBinding>, Fragmentable {
  id: () => Promise<UUID>;
  subject: <T = UserPromise>() => T;
  role: () => Promise<Role>;
  workspace: <T = WorkspacePromise>() => T;
  deployment: <T = DeploymentPromise>() => T;
}

export interface RoleBindingSubscription
  extends Promise<AsyncIterator<RoleBinding>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  subject: <T = UserSubscription>() => T;
  role: () => Promise<AsyncIterator<Role>>;
  workspace: <T = WorkspaceSubscription>() => T;
  deployment: <T = DeploymentSubscription>() => T;
}

export interface EmailConnection {}

export interface EmailConnectionPromise
  extends Promise<EmailConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EmailEdge>>() => T;
  aggregate: <T = AggregateEmailPromise>() => T;
}

export interface EmailConnectionSubscription
  extends Promise<AsyncIterator<EmailConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EmailEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEmailSubscription>() => T;
}

export interface EmailEdge {
  cursor: String;
}

export interface EmailEdgePromise extends Promise<EmailEdge>, Fragmentable {
  node: <T = EmailPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EmailEdgeSubscription
  extends Promise<AsyncIterator<EmailEdge>>,
    Fragmentable {
  node: <T = EmailSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEmail {
  count: Int;
}

export interface AggregateEmailPromise
  extends Promise<AggregateEmail>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEmailSubscription
  extends Promise<AsyncIterator<AggregateEmail>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface InviteTokenConnection {}

export interface InviteTokenConnectionPromise
  extends Promise<InviteTokenConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<InviteTokenEdge>>() => T;
  aggregate: <T = AggregateInviteTokenPromise>() => T;
}

export interface InviteTokenConnectionSubscription
  extends Promise<AsyncIterator<InviteTokenConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<InviteTokenEdgeSubscription>>>() => T;
  aggregate: <T = AggregateInviteTokenSubscription>() => T;
}

export interface InviteTokenEdge {
  cursor: String;
}

export interface InviteTokenEdgePromise
  extends Promise<InviteTokenEdge>,
    Fragmentable {
  node: <T = InviteTokenPromise>() => T;
  cursor: () => Promise<String>;
}

export interface InviteTokenEdgeSubscription
  extends Promise<AsyncIterator<InviteTokenEdge>>,
    Fragmentable {
  node: <T = InviteTokenSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateInviteToken {
  count: Int;
}

export interface AggregateInviteTokenPromise
  extends Promise<AggregateInviteToken>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateInviteTokenSubscription
  extends Promise<AsyncIterator<AggregateInviteToken>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LocalCredentialConnection {}

export interface LocalCredentialConnectionPromise
  extends Promise<LocalCredentialConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LocalCredentialEdge>>() => T;
  aggregate: <T = AggregateLocalCredentialPromise>() => T;
}

export interface LocalCredentialConnectionSubscription
  extends Promise<AsyncIterator<LocalCredentialConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LocalCredentialEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLocalCredentialSubscription>() => T;
}

export interface LocalCredentialEdge {
  cursor: String;
}

export interface LocalCredentialEdgePromise
  extends Promise<LocalCredentialEdge>,
    Fragmentable {
  node: <T = LocalCredentialPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LocalCredentialEdgeSubscription
  extends Promise<AsyncIterator<LocalCredentialEdge>>,
    Fragmentable {
  node: <T = LocalCredentialSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLocalCredential {
  count: Int;
}

export interface AggregateLocalCredentialPromise
  extends Promise<AggregateLocalCredential>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLocalCredentialSubscription
  extends Promise<AsyncIterator<AggregateLocalCredential>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RoleBindingConnection {}

export interface RoleBindingConnectionPromise
  extends Promise<RoleBindingConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RoleBindingEdge>>() => T;
  aggregate: <T = AggregateRoleBindingPromise>() => T;
}

export interface RoleBindingConnectionSubscription
  extends Promise<AsyncIterator<RoleBindingConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RoleBindingEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRoleBindingSubscription>() => T;
}

export interface RoleBindingEdge {
  cursor: String;
}

export interface RoleBindingEdgePromise
  extends Promise<RoleBindingEdge>,
    Fragmentable {
  node: <T = RoleBindingPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RoleBindingEdgeSubscription
  extends Promise<AsyncIterator<RoleBindingEdge>>,
    Fragmentable {
  node: <T = RoleBindingSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRoleBinding {
  count: Int;
}

export interface AggregateRoleBindingPromise
  extends Promise<AggregateRoleBinding>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRoleBindingSubscription
  extends Promise<AsyncIterator<AggregateRoleBinding>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface WorkspaceConnection {}

export interface WorkspaceConnectionPromise
  extends Promise<WorkspaceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WorkspaceEdge>>() => T;
  aggregate: <T = AggregateWorkspacePromise>() => T;
}

export interface WorkspaceConnectionSubscription
  extends Promise<AsyncIterator<WorkspaceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WorkspaceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWorkspaceSubscription>() => T;
}

export interface WorkspaceEdge {
  cursor: String;
}

export interface WorkspaceEdgePromise
  extends Promise<WorkspaceEdge>,
    Fragmentable {
  node: <T = WorkspacePromise>() => T;
  cursor: () => Promise<String>;
}

export interface WorkspaceEdgeSubscription
  extends Promise<AsyncIterator<WorkspaceEdge>>,
    Fragmentable {
  node: <T = WorkspaceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateWorkspace {
  count: Int;
}

export interface AggregateWorkspacePromise
  extends Promise<AggregateWorkspace>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWorkspaceSubscription
  extends Promise<AsyncIterator<AggregateWorkspace>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface WorkspacePropertyConnection {}

export interface WorkspacePropertyConnectionPromise
  extends Promise<WorkspacePropertyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WorkspacePropertyEdge>>() => T;
  aggregate: <T = AggregateWorkspacePropertyPromise>() => T;
}

export interface WorkspacePropertyConnectionSubscription
  extends Promise<AsyncIterator<WorkspacePropertyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WorkspacePropertyEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWorkspacePropertySubscription>() => T;
}

export interface WorkspacePropertyEdge {
  cursor: String;
}

export interface WorkspacePropertyEdgePromise
  extends Promise<WorkspacePropertyEdge>,
    Fragmentable {
  node: <T = WorkspacePropertyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface WorkspacePropertyEdgeSubscription
  extends Promise<AsyncIterator<WorkspacePropertyEdge>>,
    Fragmentable {
  node: <T = WorkspacePropertySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateWorkspaceProperty {
  count: Int;
}

export interface AggregateWorkspacePropertyPromise
  extends Promise<AggregateWorkspaceProperty>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWorkspacePropertySubscription
  extends Promise<AsyncIterator<AggregateWorkspaceProperty>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface DeploymentSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface DeploymentSubscriptionPayloadPromise
  extends Promise<DeploymentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DeploymentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DeploymentPreviousValuesPromise>() => T;
}

export interface DeploymentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DeploymentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DeploymentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DeploymentPreviousValuesSubscription>() => T;
}

export interface DeploymentPreviousValues {
  id: UUID;
  config?: String;
}

export interface DeploymentPreviousValuesPromise
  extends Promise<DeploymentPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  config: () => Promise<String>;
}

export interface DeploymentPreviousValuesSubscription
  extends Promise<AsyncIterator<DeploymentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  config: () => Promise<AsyncIterator<String>>;
}

export interface EmailSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface EmailSubscriptionPayloadPromise
  extends Promise<EmailSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EmailPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EmailPreviousValuesPromise>() => T;
}

export interface EmailSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EmailSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EmailSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EmailPreviousValuesSubscription>() => T;
}

export interface EmailPreviousValues {
  id: UUID;
  address?: String;
  main?: Boolean;
  token?: String;
  verified?: Boolean;
}

export interface EmailPreviousValuesPromise
  extends Promise<EmailPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  address: () => Promise<String>;
  main: () => Promise<Boolean>;
  token: () => Promise<String>;
  verified: () => Promise<Boolean>;
}

export interface EmailPreviousValuesSubscription
  extends Promise<AsyncIterator<EmailPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  address: () => Promise<AsyncIterator<String>>;
  main: () => Promise<AsyncIterator<Boolean>>;
  token: () => Promise<AsyncIterator<String>>;
  verified: () => Promise<AsyncIterator<Boolean>>;
}

export interface InviteTokenSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface InviteTokenSubscriptionPayloadPromise
  extends Promise<InviteTokenSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = InviteTokenPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = InviteTokenPreviousValuesPromise>() => T;
}

export interface InviteTokenSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<InviteTokenSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = InviteTokenSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = InviteTokenPreviousValuesSubscription>() => T;
}

export interface InviteTokenPreviousValues {
  id: UUID;
  assignments?: String;
  email?: String;
  token?: String;
}

export interface InviteTokenPreviousValuesPromise
  extends Promise<InviteTokenPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  assignments: () => Promise<String>;
  email: () => Promise<String>;
  token: () => Promise<String>;
}

export interface InviteTokenPreviousValuesSubscription
  extends Promise<AsyncIterator<InviteTokenPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  assignments: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  token: () => Promise<AsyncIterator<String>>;
}

export interface LocalCredentialSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface LocalCredentialSubscriptionPayloadPromise
  extends Promise<LocalCredentialSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LocalCredentialPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LocalCredentialPreviousValuesPromise>() => T;
}

export interface LocalCredentialSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LocalCredentialSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LocalCredentialSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LocalCredentialPreviousValuesSubscription>() => T;
}

export interface LocalCredentialPreviousValues {
  id: UUID;
  password?: String;
  resetToken?: String;
}

export interface LocalCredentialPreviousValuesPromise
  extends Promise<LocalCredentialPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  password: () => Promise<String>;
  resetToken: () => Promise<String>;
}

export interface LocalCredentialPreviousValuesSubscription
  extends Promise<AsyncIterator<LocalCredentialPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  password: () => Promise<AsyncIterator<String>>;
  resetToken: () => Promise<AsyncIterator<String>>;
}

export interface RoleBindingSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface RoleBindingSubscriptionPayloadPromise
  extends Promise<RoleBindingSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RoleBindingPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RoleBindingPreviousValuesPromise>() => T;
}

export interface RoleBindingSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RoleBindingSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RoleBindingSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RoleBindingPreviousValuesSubscription>() => T;
}

export interface RoleBindingPreviousValues {
  id: UUID;
  role?: Role;
}

export interface RoleBindingPreviousValuesPromise
  extends Promise<RoleBindingPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  role: () => Promise<Role>;
}

export interface RoleBindingPreviousValuesSubscription
  extends Promise<AsyncIterator<RoleBindingPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  role: () => Promise<AsyncIterator<Role>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: UUID;
  username?: String;
  fullName?: String;
  status?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  username: () => Promise<String>;
  fullName: () => Promise<String>;
  status: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  username: () => Promise<AsyncIterator<String>>;
  fullName: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
}

export interface WorkspaceSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface WorkspaceSubscriptionPayloadPromise
  extends Promise<WorkspaceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WorkspacePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WorkspacePreviousValuesPromise>() => T;
}

export interface WorkspaceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WorkspaceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WorkspaceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WorkspacePreviousValuesSubscription>() => T;
}

export interface WorkspacePreviousValues {
  id: UUID;
  active?: Boolean;
  description?: String;
  label?: String;
}

export interface WorkspacePreviousValuesPromise
  extends Promise<WorkspacePreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  active: () => Promise<Boolean>;
  description: () => Promise<String>;
  label: () => Promise<String>;
}

export interface WorkspacePreviousValuesSubscription
  extends Promise<AsyncIterator<WorkspacePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  active: () => Promise<AsyncIterator<Boolean>>;
  description: () => Promise<AsyncIterator<String>>;
  label: () => Promise<AsyncIterator<String>>;
}

export interface WorkspacePropertySubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface WorkspacePropertySubscriptionPayloadPromise
  extends Promise<WorkspacePropertySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WorkspacePropertyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WorkspacePropertyPreviousValuesPromise>() => T;
}

export interface WorkspacePropertySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WorkspacePropertySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WorkspacePropertySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WorkspacePropertyPreviousValuesSubscription>() => T;
}

export interface WorkspacePropertyPreviousValues {
  id: UUID;
  category?: String;
  key: String;
  value?: String;
}

export interface WorkspacePropertyPreviousValuesPromise
  extends Promise<WorkspacePropertyPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  category: () => Promise<String>;
  key: () => Promise<String>;
  value: () => Promise<String>;
}

export interface WorkspacePropertyPreviousValuesSubscription
  extends Promise<AsyncIterator<WorkspacePropertyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  category: () => Promise<AsyncIterator<String>>;
  key: () => Promise<AsyncIterator<String>>;
  value: () => Promise<AsyncIterator<String>>;
}

export type UUID = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models = [
  {
    name: "Deployment",
    embedded: false
  },
  {
    name: "Email",
    embedded: false
  },
  {
    name: "InviteToken",
    embedded: false
  },
  {
    name: "LocalCredential",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  },
  {
    name: "RoleBinding",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Workspace",
    embedded: false
  },
  {
    name: "WorkspaceProperty",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
