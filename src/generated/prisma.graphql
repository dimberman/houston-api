# source: http://localhost:4466
# timestamp: Thu Dec 06 2018 15:38:14 GMT-0500 (Eastern Standard Time)

type AggregateEmail {
  count: Int!
}

type AggregateInviteToken {
  count: Int!
}

type AggregateLocalCredential {
  count: Int!
}

type AggregateSystemSetting {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateWorkspace {
  count: Int!
}

type AggregateWorkspaceProperty {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

type Email {
  id: UUID!
  address: String
  main: Boolean
  token: String
  user: User
  verified: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type EmailConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EmailEdge]!
  aggregate: AggregateEmail!
}

input EmailCreateInput {
  address: String
  main: Boolean
  token: String
  verified: Boolean
  user: UserCreateOneWithoutEmailsInput
}

input EmailCreateManyWithoutUserInput {
  create: [EmailCreateWithoutUserInput!]
  connect: [EmailWhereUniqueInput!]
}

input EmailCreateWithoutUserInput {
  address: String
  main: Boolean
  token: String
  verified: Boolean
}

"""An edge in a connection."""
type EmailEdge {
  """The item at the end of the edge."""
  node: Email!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EmailOrderByInput {
  id_ASC
  id_DESC
  address_ASC
  address_DESC
  main_ASC
  main_DESC
  token_ASC
  token_DESC
  verified_ASC
  verified_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type EmailPreviousValues {
  id: UUID!
  address: String
  main: Boolean
  token: String
  verified: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

type EmailSubscriptionPayload {
  mutation: MutationType!
  node: Email
  updatedFields: [String!]
  previousValues: EmailPreviousValues
}

input EmailSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EmailSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EmailSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EmailSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EmailWhereInput
}

input EmailUpdateInput {
  address: String
  main: Boolean
  token: String
  verified: Boolean
  user: UserUpdateOneWithoutEmailsInput
}

input EmailUpdateManyMutationInput {
  address: String
  main: Boolean
  token: String
  verified: Boolean
}

input EmailUpdateManyWithoutUserInput {
  create: [EmailCreateWithoutUserInput!]
  connect: [EmailWhereUniqueInput!]
  disconnect: [EmailWhereUniqueInput!]
  delete: [EmailWhereUniqueInput!]
  update: [EmailUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [EmailUpsertWithWhereUniqueWithoutUserInput!]
}

input EmailUpdateWithoutUserDataInput {
  address: String
  main: Boolean
  token: String
  verified: Boolean
}

input EmailUpdateWithWhereUniqueWithoutUserInput {
  where: EmailWhereUniqueInput!
  data: EmailUpdateWithoutUserDataInput!
}

input EmailUpsertWithWhereUniqueWithoutUserInput {
  where: EmailWhereUniqueInput!
  update: EmailUpdateWithoutUserDataInput!
  create: EmailCreateWithoutUserInput!
}

input EmailWhereInput {
  """Logical AND on all given filters."""
  AND: [EmailWhereInput!]

  """Logical OR on all given filters."""
  OR: [EmailWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EmailWhereInput!]
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  main: Boolean

  """All values that are not equal to given value."""
  main_not: Boolean
  token: String

  """All values that are not equal to given value."""
  token_not: String

  """All values that are contained in given list."""
  token_in: [String!]

  """All values that are not contained in given list."""
  token_not_in: [String!]

  """All values less than the given value."""
  token_lt: String

  """All values less than or equal the given value."""
  token_lte: String

  """All values greater than the given value."""
  token_gt: String

  """All values greater than or equal the given value."""
  token_gte: String

  """All values containing the given string."""
  token_contains: String

  """All values not containing the given string."""
  token_not_contains: String

  """All values starting with the given string."""
  token_starts_with: String

  """All values not starting with the given string."""
  token_not_starts_with: String

  """All values ending with the given string."""
  token_ends_with: String

  """All values not ending with the given string."""
  token_not_ends_with: String
  verified: Boolean

  """All values that are not equal to given value."""
  verified_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
}

input EmailWhereUniqueInput {
  id: UUID
  address: String
  token: String
}

type InviteToken {
  id: UUID!
  assignments: String
  email: String
  token: String
  user: User
  workspace: Workspace
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type InviteTokenConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InviteTokenEdge]!
  aggregate: AggregateInviteToken!
}

input InviteTokenCreateInput {
  assignments: String
  email: String
  token: String
  user: UserCreateOneWithoutInviteTokensInput
  workspace: WorkspaceCreateOneWithoutInviteTokensInput
}

input InviteTokenCreateManyWithoutUserInput {
  create: [InviteTokenCreateWithoutUserInput!]
  connect: [InviteTokenWhereUniqueInput!]
}

input InviteTokenCreateManyWithoutWorkspaceInput {
  create: [InviteTokenCreateWithoutWorkspaceInput!]
  connect: [InviteTokenWhereUniqueInput!]
}

input InviteTokenCreateWithoutUserInput {
  assignments: String
  email: String
  token: String
  workspace: WorkspaceCreateOneWithoutInviteTokensInput
}

input InviteTokenCreateWithoutWorkspaceInput {
  assignments: String
  email: String
  token: String
  user: UserCreateOneWithoutInviteTokensInput
}

"""An edge in a connection."""
type InviteTokenEdge {
  """The item at the end of the edge."""
  node: InviteToken!

  """A cursor for use in pagination."""
  cursor: String!
}

enum InviteTokenOrderByInput {
  id_ASC
  id_DESC
  assignments_ASC
  assignments_DESC
  email_ASC
  email_DESC
  token_ASC
  token_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type InviteTokenPreviousValues {
  id: UUID!
  assignments: String
  email: String
  token: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type InviteTokenSubscriptionPayload {
  mutation: MutationType!
  node: InviteToken
  updatedFields: [String!]
  previousValues: InviteTokenPreviousValues
}

input InviteTokenSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [InviteTokenSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [InviteTokenSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InviteTokenSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InviteTokenWhereInput
}

input InviteTokenUpdateInput {
  assignments: String
  email: String
  token: String
  user: UserUpdateOneWithoutInviteTokensInput
  workspace: WorkspaceUpdateOneWithoutInviteTokensInput
}

input InviteTokenUpdateManyMutationInput {
  assignments: String
  email: String
  token: String
}

input InviteTokenUpdateManyWithoutUserInput {
  create: [InviteTokenCreateWithoutUserInput!]
  connect: [InviteTokenWhereUniqueInput!]
  disconnect: [InviteTokenWhereUniqueInput!]
  delete: [InviteTokenWhereUniqueInput!]
  update: [InviteTokenUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [InviteTokenUpsertWithWhereUniqueWithoutUserInput!]
}

input InviteTokenUpdateManyWithoutWorkspaceInput {
  create: [InviteTokenCreateWithoutWorkspaceInput!]
  connect: [InviteTokenWhereUniqueInput!]
  disconnect: [InviteTokenWhereUniqueInput!]
  delete: [InviteTokenWhereUniqueInput!]
  update: [InviteTokenUpdateWithWhereUniqueWithoutWorkspaceInput!]
  upsert: [InviteTokenUpsertWithWhereUniqueWithoutWorkspaceInput!]
}

input InviteTokenUpdateWithoutUserDataInput {
  assignments: String
  email: String
  token: String
  workspace: WorkspaceUpdateOneWithoutInviteTokensInput
}

input InviteTokenUpdateWithoutWorkspaceDataInput {
  assignments: String
  email: String
  token: String
  user: UserUpdateOneWithoutInviteTokensInput
}

input InviteTokenUpdateWithWhereUniqueWithoutUserInput {
  where: InviteTokenWhereUniqueInput!
  data: InviteTokenUpdateWithoutUserDataInput!
}

input InviteTokenUpdateWithWhereUniqueWithoutWorkspaceInput {
  where: InviteTokenWhereUniqueInput!
  data: InviteTokenUpdateWithoutWorkspaceDataInput!
}

input InviteTokenUpsertWithWhereUniqueWithoutUserInput {
  where: InviteTokenWhereUniqueInput!
  update: InviteTokenUpdateWithoutUserDataInput!
  create: InviteTokenCreateWithoutUserInput!
}

input InviteTokenUpsertWithWhereUniqueWithoutWorkspaceInput {
  where: InviteTokenWhereUniqueInput!
  update: InviteTokenUpdateWithoutWorkspaceDataInput!
  create: InviteTokenCreateWithoutWorkspaceInput!
}

input InviteTokenWhereInput {
  """Logical AND on all given filters."""
  AND: [InviteTokenWhereInput!]

  """Logical OR on all given filters."""
  OR: [InviteTokenWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InviteTokenWhereInput!]
  assignments: String

  """All values that are not equal to given value."""
  assignments_not: String

  """All values that are contained in given list."""
  assignments_in: [String!]

  """All values that are not contained in given list."""
  assignments_not_in: [String!]

  """All values less than the given value."""
  assignments_lt: String

  """All values less than or equal the given value."""
  assignments_lte: String

  """All values greater than the given value."""
  assignments_gt: String

  """All values greater than or equal the given value."""
  assignments_gte: String

  """All values containing the given string."""
  assignments_contains: String

  """All values not containing the given string."""
  assignments_not_contains: String

  """All values starting with the given string."""
  assignments_starts_with: String

  """All values not starting with the given string."""
  assignments_not_starts_with: String

  """All values ending with the given string."""
  assignments_ends_with: String

  """All values not ending with the given string."""
  assignments_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  token: String

  """All values that are not equal to given value."""
  token_not: String

  """All values that are contained in given list."""
  token_in: [String!]

  """All values that are not contained in given list."""
  token_not_in: [String!]

  """All values less than the given value."""
  token_lt: String

  """All values less than or equal the given value."""
  token_lte: String

  """All values greater than the given value."""
  token_gt: String

  """All values greater than or equal the given value."""
  token_gte: String

  """All values containing the given string."""
  token_contains: String

  """All values not containing the given string."""
  token_not_contains: String

  """All values starting with the given string."""
  token_starts_with: String

  """All values not starting with the given string."""
  token_not_starts_with: String

  """All values ending with the given string."""
  token_ends_with: String

  """All values not ending with the given string."""
  token_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
  workspace: WorkspaceWhereInput
}

input InviteTokenWhereUniqueInput {
  id: UUID
  token: String
}

"""Raw JSON value"""
scalar Json

type LocalCredential {
  id: UUID!
  user: User
  password: String
  resetToken: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type LocalCredentialConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LocalCredentialEdge]!
  aggregate: AggregateLocalCredential!
}

input LocalCredentialCreateInput {
  password: String
  resetToken: String
  user: UserCreateOneWithoutLocalCredentialInput
}

input LocalCredentialCreateOneWithoutUserInput {
  create: LocalCredentialCreateWithoutUserInput
  connect: LocalCredentialWhereUniqueInput
}

input LocalCredentialCreateWithoutUserInput {
  password: String
  resetToken: String
}

"""An edge in a connection."""
type LocalCredentialEdge {
  """The item at the end of the edge."""
  node: LocalCredential!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LocalCredentialOrderByInput {
  id_ASC
  id_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LocalCredentialPreviousValues {
  id: UUID!
  password: String
  resetToken: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type LocalCredentialSubscriptionPayload {
  mutation: MutationType!
  node: LocalCredential
  updatedFields: [String!]
  previousValues: LocalCredentialPreviousValues
}

input LocalCredentialSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LocalCredentialSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LocalCredentialSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LocalCredentialSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LocalCredentialWhereInput
}

input LocalCredentialUpdateInput {
  password: String
  resetToken: String
  user: UserUpdateOneWithoutLocalCredentialInput
}

input LocalCredentialUpdateManyMutationInput {
  password: String
  resetToken: String
}

input LocalCredentialUpdateOneWithoutUserInput {
  create: LocalCredentialCreateWithoutUserInput
  connect: LocalCredentialWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: LocalCredentialUpdateWithoutUserDataInput
  upsert: LocalCredentialUpsertWithoutUserInput
}

input LocalCredentialUpdateWithoutUserDataInput {
  password: String
  resetToken: String
}

input LocalCredentialUpsertWithoutUserInput {
  update: LocalCredentialUpdateWithoutUserDataInput!
  create: LocalCredentialCreateWithoutUserInput!
}

input LocalCredentialWhereInput {
  """Logical AND on all given filters."""
  AND: [LocalCredentialWhereInput!]

  """Logical OR on all given filters."""
  OR: [LocalCredentialWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LocalCredentialWhereInput!]
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
}

input LocalCredentialWhereUniqueInput {
  id: UUID
  password: String
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createEmail(data: EmailCreateInput!): Email!
  createLocalCredential(data: LocalCredentialCreateInput!): LocalCredential!
  createInviteToken(data: InviteTokenCreateInput!): InviteToken!
  createWorkspace(data: WorkspaceCreateInput!): Workspace!
  createWorkspaceProperty(data: WorkspacePropertyCreateInput!): WorkspaceProperty!
  createSystemSetting(data: SystemSettingCreateInput!): SystemSetting!
  createUser(data: UserCreateInput!): User!
  updateEmail(data: EmailUpdateInput!, where: EmailWhereUniqueInput!): Email
  updateLocalCredential(data: LocalCredentialUpdateInput!, where: LocalCredentialWhereUniqueInput!): LocalCredential
  updateInviteToken(data: InviteTokenUpdateInput!, where: InviteTokenWhereUniqueInput!): InviteToken
  updateWorkspace(data: WorkspaceUpdateInput!, where: WorkspaceWhereUniqueInput!): Workspace
  updateWorkspaceProperty(data: WorkspacePropertyUpdateInput!, where: WorkspacePropertyWhereUniqueInput!): WorkspaceProperty
  updateSystemSetting(data: SystemSettingUpdateInput!, where: SystemSettingWhereUniqueInput!): SystemSetting
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteEmail(where: EmailWhereUniqueInput!): Email
  deleteLocalCredential(where: LocalCredentialWhereUniqueInput!): LocalCredential
  deleteInviteToken(where: InviteTokenWhereUniqueInput!): InviteToken
  deleteWorkspace(where: WorkspaceWhereUniqueInput!): Workspace
  deleteWorkspaceProperty(where: WorkspacePropertyWhereUniqueInput!): WorkspaceProperty
  deleteSystemSetting(where: SystemSettingWhereUniqueInput!): SystemSetting
  deleteUser(where: UserWhereUniqueInput!): User
  upsertEmail(where: EmailWhereUniqueInput!, create: EmailCreateInput!, update: EmailUpdateInput!): Email!
  upsertLocalCredential(where: LocalCredentialWhereUniqueInput!, create: LocalCredentialCreateInput!, update: LocalCredentialUpdateInput!): LocalCredential!
  upsertInviteToken(where: InviteTokenWhereUniqueInput!, create: InviteTokenCreateInput!, update: InviteTokenUpdateInput!): InviteToken!
  upsertWorkspace(where: WorkspaceWhereUniqueInput!, create: WorkspaceCreateInput!, update: WorkspaceUpdateInput!): Workspace!
  upsertWorkspaceProperty(where: WorkspacePropertyWhereUniqueInput!, create: WorkspacePropertyCreateInput!, update: WorkspacePropertyUpdateInput!): WorkspaceProperty!
  upsertSystemSetting(where: SystemSettingWhereUniqueInput!, create: SystemSettingCreateInput!, update: SystemSettingUpdateInput!): SystemSetting!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyEmails(data: EmailUpdateManyMutationInput!, where: EmailWhereInput): BatchPayload!
  updateManyLocalCredentials(data: LocalCredentialUpdateManyMutationInput!, where: LocalCredentialWhereInput): BatchPayload!
  updateManyInviteTokens(data: InviteTokenUpdateManyMutationInput!, where: InviteTokenWhereInput): BatchPayload!
  updateManyWorkspaces(data: WorkspaceUpdateManyMutationInput!, where: WorkspaceWhereInput): BatchPayload!
  updateManyWorkspaceProperties(data: WorkspacePropertyUpdateManyMutationInput!, where: WorkspacePropertyWhereInput): BatchPayload!
  updateManySystemSettings(data: SystemSettingUpdateManyMutationInput!, where: SystemSettingWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  deleteManyEmails(where: EmailWhereInput): BatchPayload!
  deleteManyLocalCredentials(where: LocalCredentialWhereInput): BatchPayload!
  deleteManyInviteTokens(where: InviteTokenWhereInput): BatchPayload!
  deleteManyWorkspaces(where: WorkspaceWhereInput): BatchPayload!
  deleteManyWorkspaceProperties(where: WorkspacePropertyWhereInput): BatchPayload!
  deleteManySystemSettings(where: SystemSettingWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum PrismaDatabase {
  default
}

type Query {
  emails(where: EmailWhereInput, orderBy: EmailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Email]!
  localCredentials(where: LocalCredentialWhereInput, orderBy: LocalCredentialOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LocalCredential]!
  inviteTokens(where: InviteTokenWhereInput, orderBy: InviteTokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InviteToken]!
  workspaces(where: WorkspaceWhereInput, orderBy: WorkspaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Workspace]!
  workspaceProperties(where: WorkspacePropertyWhereInput, orderBy: WorkspacePropertyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkspaceProperty]!
  systemSettings(where: SystemSettingWhereInput, orderBy: SystemSettingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SystemSetting]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  email(where: EmailWhereUniqueInput!): Email
  localCredential(where: LocalCredentialWhereUniqueInput!): LocalCredential
  inviteToken(where: InviteTokenWhereUniqueInput!): InviteToken
  workspace(where: WorkspaceWhereUniqueInput!): Workspace
  workspaceProperty(where: WorkspacePropertyWhereUniqueInput!): WorkspaceProperty
  systemSetting(where: SystemSettingWhereUniqueInput!): SystemSetting
  user(where: UserWhereUniqueInput!): User
  emailsConnection(where: EmailWhereInput, orderBy: EmailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EmailConnection!
  localCredentialsConnection(where: LocalCredentialWhereInput, orderBy: LocalCredentialOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LocalCredentialConnection!
  inviteTokensConnection(where: InviteTokenWhereInput, orderBy: InviteTokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InviteTokenConnection!
  workspacesConnection(where: WorkspaceWhereInput, orderBy: WorkspaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkspaceConnection!
  workspacePropertiesConnection(where: WorkspacePropertyWhereInput, orderBy: WorkspacePropertyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkspacePropertyConnection!
  systemSettingsConnection(where: SystemSettingWhereInput, orderBy: SystemSettingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SystemSettingConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
}

type Subscription {
  email(where: EmailSubscriptionWhereInput): EmailSubscriptionPayload
  localCredential(where: LocalCredentialSubscriptionWhereInput): LocalCredentialSubscriptionPayload
  inviteToken(where: InviteTokenSubscriptionWhereInput): InviteTokenSubscriptionPayload
  workspace(where: WorkspaceSubscriptionWhereInput): WorkspaceSubscriptionPayload
  workspaceProperty(where: WorkspacePropertySubscriptionWhereInput): WorkspacePropertySubscriptionPayload
  systemSetting(where: SystemSettingSubscriptionWhereInput): SystemSettingSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type SystemSetting implements Node {
  id: ID!
  key: String
  value: String
  category: String
  isEncrypted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type SystemSettingConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SystemSettingEdge]!
  aggregate: AggregateSystemSetting!
}

input SystemSettingCreateInput {
  key: String
  value: String
  category: String
  isEncrypted: Boolean
}

"""An edge in a connection."""
type SystemSettingEdge {
  """The item at the end of the edge."""
  node: SystemSetting!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SystemSettingOrderByInput {
  id_ASC
  id_DESC
  key_ASC
  key_DESC
  value_ASC
  value_DESC
  category_ASC
  category_DESC
  isEncrypted_ASC
  isEncrypted_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SystemSettingPreviousValues {
  id: ID!
  key: String
  value: String
  category: String
  isEncrypted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SystemSettingSubscriptionPayload {
  mutation: MutationType!
  node: SystemSetting
  updatedFields: [String!]
  previousValues: SystemSettingPreviousValues
}

input SystemSettingSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SystemSettingSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SystemSettingSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SystemSettingSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SystemSettingWhereInput
}

input SystemSettingUpdateInput {
  key: String
  value: String
  category: String
  isEncrypted: Boolean
}

input SystemSettingUpdateManyMutationInput {
  key: String
  value: String
  category: String
  isEncrypted: Boolean
}

input SystemSettingWhereInput {
  """Logical AND on all given filters."""
  AND: [SystemSettingWhereInput!]

  """Logical OR on all given filters."""
  OR: [SystemSettingWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SystemSettingWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  key: String

  """All values that are not equal to given value."""
  key_not: String

  """All values that are contained in given list."""
  key_in: [String!]

  """All values that are not contained in given list."""
  key_not_in: [String!]

  """All values less than the given value."""
  key_lt: String

  """All values less than or equal the given value."""
  key_lte: String

  """All values greater than the given value."""
  key_gt: String

  """All values greater than or equal the given value."""
  key_gte: String

  """All values containing the given string."""
  key_contains: String

  """All values not containing the given string."""
  key_not_contains: String

  """All values starting with the given string."""
  key_starts_with: String

  """All values not starting with the given string."""
  key_not_starts_with: String

  """All values ending with the given string."""
  key_ends_with: String

  """All values not ending with the given string."""
  key_not_ends_with: String
  value: String

  """All values that are not equal to given value."""
  value_not: String

  """All values that are contained in given list."""
  value_in: [String!]

  """All values that are not contained in given list."""
  value_not_in: [String!]

  """All values less than the given value."""
  value_lt: String

  """All values less than or equal the given value."""
  value_lte: String

  """All values greater than the given value."""
  value_gt: String

  """All values greater than or equal the given value."""
  value_gte: String

  """All values containing the given string."""
  value_contains: String

  """All values not containing the given string."""
  value_not_contains: String

  """All values starting with the given string."""
  value_starts_with: String

  """All values not starting with the given string."""
  value_not_starts_with: String

  """All values ending with the given string."""
  value_ends_with: String

  """All values not ending with the given string."""
  value_not_ends_with: String
  category: String

  """All values that are not equal to given value."""
  category_not: String

  """All values that are contained in given list."""
  category_in: [String!]

  """All values that are not contained in given list."""
  category_not_in: [String!]

  """All values less than the given value."""
  category_lt: String

  """All values less than or equal the given value."""
  category_lte: String

  """All values greater than the given value."""
  category_gt: String

  """All values greater than or equal the given value."""
  category_gte: String

  """All values containing the given string."""
  category_contains: String

  """All values not containing the given string."""
  category_not_contains: String

  """All values starting with the given string."""
  category_starts_with: String

  """All values not starting with the given string."""
  category_not_starts_with: String

  """All values ending with the given string."""
  category_ends_with: String

  """All values not ending with the given string."""
  category_not_ends_with: String
  isEncrypted: Boolean

  """All values that are not equal to given value."""
  isEncrypted_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input SystemSettingWhereUniqueInput {
  id: ID
}

type User {
  id: UUID!
  username: String
  emails(where: EmailWhereInput, orderBy: EmailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Email!]
  fullName: String
  inviteTokens(where: InviteTokenWhereInput, orderBy: InviteTokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InviteToken!]
  localCredential: LocalCredential
  status: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  username: String
  fullName: String
  status: String
  emails: EmailCreateManyWithoutUserInput
  inviteTokens: InviteTokenCreateManyWithoutUserInput
  localCredential: LocalCredentialCreateOneWithoutUserInput
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutEmailsInput {
  create: UserCreateWithoutEmailsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutInviteTokensInput {
  create: UserCreateWithoutInviteTokensInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLocalCredentialInput {
  create: UserCreateWithoutLocalCredentialInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutEmailsInput {
  username: String
  fullName: String
  status: String
  inviteTokens: InviteTokenCreateManyWithoutUserInput
  localCredential: LocalCredentialCreateOneWithoutUserInput
}

input UserCreateWithoutInviteTokensInput {
  username: String
  fullName: String
  status: String
  emails: EmailCreateManyWithoutUserInput
  localCredential: LocalCredentialCreateOneWithoutUserInput
}

input UserCreateWithoutLocalCredentialInput {
  username: String
  fullName: String
  status: String
  emails: EmailCreateManyWithoutUserInput
  inviteTokens: InviteTokenCreateManyWithoutUserInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  fullName_ASC
  fullName_DESC
  status_ASC
  status_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: UUID!
  username: String
  fullName: String
  status: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  username: String
  fullName: String
  status: String
  emails: EmailUpdateManyWithoutUserInput
  inviteTokens: InviteTokenUpdateManyWithoutUserInput
  localCredential: LocalCredentialUpdateOneWithoutUserInput
}

input UserUpdateInput {
  username: String
  fullName: String
  status: String
  emails: EmailUpdateManyWithoutUserInput
  inviteTokens: InviteTokenUpdateManyWithoutUserInput
  localCredential: LocalCredentialUpdateOneWithoutUserInput
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
}

input UserUpdateManyMutationInput {
  username: String
  fullName: String
  status: String
}

input UserUpdateOneWithoutEmailsInput {
  create: UserCreateWithoutEmailsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutEmailsDataInput
  upsert: UserUpsertWithoutEmailsInput
}

input UserUpdateOneWithoutInviteTokensInput {
  create: UserCreateWithoutInviteTokensInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutInviteTokensDataInput
  upsert: UserUpsertWithoutInviteTokensInput
}

input UserUpdateOneWithoutLocalCredentialInput {
  create: UserCreateWithoutLocalCredentialInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutLocalCredentialDataInput
  upsert: UserUpsertWithoutLocalCredentialInput
}

input UserUpdateWithoutEmailsDataInput {
  username: String
  fullName: String
  status: String
  inviteTokens: InviteTokenUpdateManyWithoutUserInput
  localCredential: LocalCredentialUpdateOneWithoutUserInput
}

input UserUpdateWithoutInviteTokensDataInput {
  username: String
  fullName: String
  status: String
  emails: EmailUpdateManyWithoutUserInput
  localCredential: LocalCredentialUpdateOneWithoutUserInput
}

input UserUpdateWithoutLocalCredentialDataInput {
  username: String
  fullName: String
  status: String
  emails: EmailUpdateManyWithoutUserInput
  inviteTokens: InviteTokenUpdateManyWithoutUserInput
}

input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpsertWithoutEmailsInput {
  update: UserUpdateWithoutEmailsDataInput!
  create: UserCreateWithoutEmailsInput!
}

input UserUpsertWithoutInviteTokensInput {
  update: UserUpdateWithoutInviteTokensDataInput!
  create: UserCreateWithoutInviteTokensInput!
}

input UserUpsertWithoutLocalCredentialInput {
  update: UserUpdateWithoutLocalCredentialDataInput!
  create: UserCreateWithoutLocalCredentialInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  fullName: String

  """All values that are not equal to given value."""
  fullName_not: String

  """All values that are contained in given list."""
  fullName_in: [String!]

  """All values that are not contained in given list."""
  fullName_not_in: [String!]

  """All values less than the given value."""
  fullName_lt: String

  """All values less than or equal the given value."""
  fullName_lte: String

  """All values greater than the given value."""
  fullName_gt: String

  """All values greater than or equal the given value."""
  fullName_gte: String

  """All values containing the given string."""
  fullName_contains: String

  """All values not containing the given string."""
  fullName_not_contains: String

  """All values starting with the given string."""
  fullName_starts_with: String

  """All values not starting with the given string."""
  fullName_not_starts_with: String

  """All values ending with the given string."""
  fullName_ends_with: String

  """All values not ending with the given string."""
  fullName_not_ends_with: String
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  emails_every: EmailWhereInput
  emails_some: EmailWhereInput
  emails_none: EmailWhereInput
  inviteTokens_every: InviteTokenWhereInput
  inviteTokens_some: InviteTokenWhereInput
  inviteTokens_none: InviteTokenWhereInput
  localCredential: LocalCredentialWhereInput
}

input UserWhereUniqueInput {
  id: UUID
}

"""A type 4 UUID according to IETF RFC 4122."""
scalar UUID

type Workspace {
  id: UUID!
  active: Boolean
  description: String
  inviteTokens(where: InviteTokenWhereInput, orderBy: InviteTokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InviteToken!]
  label: String
  properties(where: WorkspacePropertyWhereInput, orderBy: WorkspacePropertyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkspaceProperty!]
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type WorkspaceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WorkspaceEdge]!
  aggregate: AggregateWorkspace!
}

input WorkspaceCreateInput {
  active: Boolean
  description: String
  label: String
  inviteTokens: InviteTokenCreateManyWithoutWorkspaceInput
  properties: WorkspacePropertyCreateManyWithoutWorkspaceInput
  users: UserCreateManyInput
}

input WorkspaceCreateOneWithoutInviteTokensInput {
  create: WorkspaceCreateWithoutInviteTokensInput
  connect: WorkspaceWhereUniqueInput
}

input WorkspaceCreateOneWithoutPropertiesInput {
  create: WorkspaceCreateWithoutPropertiesInput
  connect: WorkspaceWhereUniqueInput
}

input WorkspaceCreateWithoutInviteTokensInput {
  active: Boolean
  description: String
  label: String
  properties: WorkspacePropertyCreateManyWithoutWorkspaceInput
  users: UserCreateManyInput
}

input WorkspaceCreateWithoutPropertiesInput {
  active: Boolean
  description: String
  label: String
  inviteTokens: InviteTokenCreateManyWithoutWorkspaceInput
  users: UserCreateManyInput
}

"""An edge in a connection."""
type WorkspaceEdge {
  """The item at the end of the edge."""
  node: Workspace!

  """A cursor for use in pagination."""
  cursor: String!
}

enum WorkspaceOrderByInput {
  id_ASC
  id_DESC
  active_ASC
  active_DESC
  description_ASC
  description_DESC
  label_ASC
  label_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type WorkspacePreviousValues {
  id: UUID!
  active: Boolean
  description: String
  label: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type WorkspaceProperty implements Node {
  id: ID!
  category: String
  key: String!
  value: String
  workspace: Workspace
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type WorkspacePropertyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WorkspacePropertyEdge]!
  aggregate: AggregateWorkspaceProperty!
}

input WorkspacePropertyCreateInput {
  category: String
  key: String!
  value: String
  workspace: WorkspaceCreateOneWithoutPropertiesInput
}

input WorkspacePropertyCreateManyWithoutWorkspaceInput {
  create: [WorkspacePropertyCreateWithoutWorkspaceInput!]
  connect: [WorkspacePropertyWhereUniqueInput!]
}

input WorkspacePropertyCreateWithoutWorkspaceInput {
  category: String
  key: String!
  value: String
}

"""An edge in a connection."""
type WorkspacePropertyEdge {
  """The item at the end of the edge."""
  node: WorkspaceProperty!

  """A cursor for use in pagination."""
  cursor: String!
}

enum WorkspacePropertyOrderByInput {
  id_ASC
  id_DESC
  category_ASC
  category_DESC
  key_ASC
  key_DESC
  value_ASC
  value_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type WorkspacePropertyPreviousValues {
  id: ID!
  category: String
  key: String!
  value: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type WorkspacePropertySubscriptionPayload {
  mutation: MutationType!
  node: WorkspaceProperty
  updatedFields: [String!]
  previousValues: WorkspacePropertyPreviousValues
}

input WorkspacePropertySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [WorkspacePropertySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [WorkspacePropertySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WorkspacePropertySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WorkspacePropertyWhereInput
}

input WorkspacePropertyUpdateInput {
  category: String
  key: String
  value: String
  workspace: WorkspaceUpdateOneWithoutPropertiesInput
}

input WorkspacePropertyUpdateManyMutationInput {
  category: String
  key: String
  value: String
}

input WorkspacePropertyUpdateManyWithoutWorkspaceInput {
  create: [WorkspacePropertyCreateWithoutWorkspaceInput!]
  connect: [WorkspacePropertyWhereUniqueInput!]
  disconnect: [WorkspacePropertyWhereUniqueInput!]
  delete: [WorkspacePropertyWhereUniqueInput!]
  update: [WorkspacePropertyUpdateWithWhereUniqueWithoutWorkspaceInput!]
  upsert: [WorkspacePropertyUpsertWithWhereUniqueWithoutWorkspaceInput!]
}

input WorkspacePropertyUpdateWithoutWorkspaceDataInput {
  category: String
  key: String
  value: String
}

input WorkspacePropertyUpdateWithWhereUniqueWithoutWorkspaceInput {
  where: WorkspacePropertyWhereUniqueInput!
  data: WorkspacePropertyUpdateWithoutWorkspaceDataInput!
}

input WorkspacePropertyUpsertWithWhereUniqueWithoutWorkspaceInput {
  where: WorkspacePropertyWhereUniqueInput!
  update: WorkspacePropertyUpdateWithoutWorkspaceDataInput!
  create: WorkspacePropertyCreateWithoutWorkspaceInput!
}

input WorkspacePropertyWhereInput {
  """Logical AND on all given filters."""
  AND: [WorkspacePropertyWhereInput!]

  """Logical OR on all given filters."""
  OR: [WorkspacePropertyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WorkspacePropertyWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  category: String

  """All values that are not equal to given value."""
  category_not: String

  """All values that are contained in given list."""
  category_in: [String!]

  """All values that are not contained in given list."""
  category_not_in: [String!]

  """All values less than the given value."""
  category_lt: String

  """All values less than or equal the given value."""
  category_lte: String

  """All values greater than the given value."""
  category_gt: String

  """All values greater than or equal the given value."""
  category_gte: String

  """All values containing the given string."""
  category_contains: String

  """All values not containing the given string."""
  category_not_contains: String

  """All values starting with the given string."""
  category_starts_with: String

  """All values not starting with the given string."""
  category_not_starts_with: String

  """All values ending with the given string."""
  category_ends_with: String

  """All values not ending with the given string."""
  category_not_ends_with: String
  key: String

  """All values that are not equal to given value."""
  key_not: String

  """All values that are contained in given list."""
  key_in: [String!]

  """All values that are not contained in given list."""
  key_not_in: [String!]

  """All values less than the given value."""
  key_lt: String

  """All values less than or equal the given value."""
  key_lte: String

  """All values greater than the given value."""
  key_gt: String

  """All values greater than or equal the given value."""
  key_gte: String

  """All values containing the given string."""
  key_contains: String

  """All values not containing the given string."""
  key_not_contains: String

  """All values starting with the given string."""
  key_starts_with: String

  """All values not starting with the given string."""
  key_not_starts_with: String

  """All values ending with the given string."""
  key_ends_with: String

  """All values not ending with the given string."""
  key_not_ends_with: String
  value: String

  """All values that are not equal to given value."""
  value_not: String

  """All values that are contained in given list."""
  value_in: [String!]

  """All values that are not contained in given list."""
  value_not_in: [String!]

  """All values less than the given value."""
  value_lt: String

  """All values less than or equal the given value."""
  value_lte: String

  """All values greater than the given value."""
  value_gt: String

  """All values greater than or equal the given value."""
  value_gte: String

  """All values containing the given string."""
  value_contains: String

  """All values not containing the given string."""
  value_not_contains: String

  """All values starting with the given string."""
  value_starts_with: String

  """All values not starting with the given string."""
  value_not_starts_with: String

  """All values ending with the given string."""
  value_ends_with: String

  """All values not ending with the given string."""
  value_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  workspace: WorkspaceWhereInput
}

input WorkspacePropertyWhereUniqueInput {
  id: ID
}

type WorkspaceSubscriptionPayload {
  mutation: MutationType!
  node: Workspace
  updatedFields: [String!]
  previousValues: WorkspacePreviousValues
}

input WorkspaceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [WorkspaceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [WorkspaceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WorkspaceSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WorkspaceWhereInput
}

input WorkspaceUpdateInput {
  active: Boolean
  description: String
  label: String
  inviteTokens: InviteTokenUpdateManyWithoutWorkspaceInput
  properties: WorkspacePropertyUpdateManyWithoutWorkspaceInput
  users: UserUpdateManyInput
}

input WorkspaceUpdateManyMutationInput {
  active: Boolean
  description: String
  label: String
}

input WorkspaceUpdateOneWithoutInviteTokensInput {
  create: WorkspaceCreateWithoutInviteTokensInput
  connect: WorkspaceWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: WorkspaceUpdateWithoutInviteTokensDataInput
  upsert: WorkspaceUpsertWithoutInviteTokensInput
}

input WorkspaceUpdateOneWithoutPropertiesInput {
  create: WorkspaceCreateWithoutPropertiesInput
  connect: WorkspaceWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: WorkspaceUpdateWithoutPropertiesDataInput
  upsert: WorkspaceUpsertWithoutPropertiesInput
}

input WorkspaceUpdateWithoutInviteTokensDataInput {
  active: Boolean
  description: String
  label: String
  properties: WorkspacePropertyUpdateManyWithoutWorkspaceInput
  users: UserUpdateManyInput
}

input WorkspaceUpdateWithoutPropertiesDataInput {
  active: Boolean
  description: String
  label: String
  inviteTokens: InviteTokenUpdateManyWithoutWorkspaceInput
  users: UserUpdateManyInput
}

input WorkspaceUpsertWithoutInviteTokensInput {
  update: WorkspaceUpdateWithoutInviteTokensDataInput!
  create: WorkspaceCreateWithoutInviteTokensInput!
}

input WorkspaceUpsertWithoutPropertiesInput {
  update: WorkspaceUpdateWithoutPropertiesDataInput!
  create: WorkspaceCreateWithoutPropertiesInput!
}

input WorkspaceWhereInput {
  """Logical AND on all given filters."""
  AND: [WorkspaceWhereInput!]

  """Logical OR on all given filters."""
  OR: [WorkspaceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WorkspaceWhereInput!]
  active: Boolean

  """All values that are not equal to given value."""
  active_not: Boolean
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  label: String

  """All values that are not equal to given value."""
  label_not: String

  """All values that are contained in given list."""
  label_in: [String!]

  """All values that are not contained in given list."""
  label_not_in: [String!]

  """All values less than the given value."""
  label_lt: String

  """All values less than or equal the given value."""
  label_lte: String

  """All values greater than the given value."""
  label_gt: String

  """All values greater than or equal the given value."""
  label_gte: String

  """All values containing the given string."""
  label_contains: String

  """All values not containing the given string."""
  label_not_contains: String

  """All values starting with the given string."""
  label_starts_with: String

  """All values not starting with the given string."""
  label_not_starts_with: String

  """All values ending with the given string."""
  label_ends_with: String

  """All values not ending with the given string."""
  label_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  inviteTokens_every: InviteTokenWhereInput
  inviteTokens_some: InviteTokenWhereInput
  inviteTokens_none: InviteTokenWhereInput
  properties_every: WorkspacePropertyWhereInput
  properties_some: WorkspacePropertyWhereInput
  properties_none: WorkspacePropertyWhereInput
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
}

input WorkspaceWhereUniqueInput {
  id: UUID
}
