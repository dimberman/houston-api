# source: http://localhost:4466
# timestamp: Wed Nov 21 2018 12:18:48 GMT-0500 (Eastern Standard Time)

type AggregateDeployment {
  count: Int!
}

type AggregateDeploymentProperty {
  count: Int!
}

type AggregateEmail {
  count: Int!
}

type AggregateGroup {
  count: Int!
}

type AggregateGroupProperty {
  count: Int!
}

type AggregateInviteToken {
  count: Int!
}

type AggregateLocalCredential {
  count: Int!
}

type AggregateOauthCredential {
  count: Int!
}

type AggregatePermission {
  count: Int!
}

type AggregateRole {
  count: Int!
}

type AggregateServiceAccount {
  count: Int!
}

type AggregateSessionRefreshToken {
  count: Int!
}

type AggregateSystemSetting {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserGroup {
  count: Int!
}

type AggregateUserProperty {
  count: Int!
}

type AggregateUserWorkspace {
  count: Int!
}

type AggregateWorkspace {
  count: Int!
}

type AggregateWorkspaceProperty {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

type Deployment {
  id: UUID!
  config: String
  deployment_properties(where: DeploymentPropertyWhereInput, orderBy: DeploymentPropertyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DeploymentProperty!]
  description: String
  label: String
  registry_password: String
  release_name: String
  status: String
  type: String
  version: String
  workspace: Workspace
}

"""A connection to a list of items."""
type DeploymentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DeploymentEdge]!
  aggregate: AggregateDeployment!
}

input DeploymentCreateInput {
  config: String
  description: String
  label: String
  registry_password: String
  release_name: String
  status: String
  type: String
  version: String
  deployment_properties: DeploymentPropertyCreateManyWithoutDeploymentInput
  workspace: WorkspaceCreateOneWithoutDeploymentsInput
}

input DeploymentCreateManyWithoutWorkspaceInput {
  create: [DeploymentCreateWithoutWorkspaceInput!]
  connect: [DeploymentWhereUniqueInput!]
}

input DeploymentCreateOneWithoutDeployment_propertiesInput {
  create: DeploymentCreateWithoutDeployment_propertiesInput
  connect: DeploymentWhereUniqueInput
}

input DeploymentCreateWithoutDeployment_propertiesInput {
  config: String
  description: String
  label: String
  registry_password: String
  release_name: String
  status: String
  type: String
  version: String
  workspace: WorkspaceCreateOneWithoutDeploymentsInput
}

input DeploymentCreateWithoutWorkspaceInput {
  config: String
  description: String
  label: String
  registry_password: String
  release_name: String
  status: String
  type: String
  version: String
  deployment_properties: DeploymentPropertyCreateManyWithoutDeploymentInput
}

"""An edge in a connection."""
type DeploymentEdge {
  """The item at the end of the edge."""
  node: Deployment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DeploymentOrderByInput {
  id_ASC
  id_DESC
  config_ASC
  config_DESC
  description_ASC
  description_DESC
  label_ASC
  label_DESC
  registry_password_ASC
  registry_password_DESC
  release_name_ASC
  release_name_DESC
  status_ASC
  status_DESC
  type_ASC
  type_DESC
  version_ASC
  version_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type DeploymentPreviousValues {
  id: UUID!
  config: String
  description: String
  label: String
  registry_password: String
  release_name: String
  status: String
  type: String
  version: String
}

type DeploymentProperty {
  id: UUID!
  category: String
  deployment: Deployment
  key: String!
  value: String
}

"""A connection to a list of items."""
type DeploymentPropertyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DeploymentPropertyEdge]!
  aggregate: AggregateDeploymentProperty!
}

input DeploymentPropertyCreateInput {
  category: String
  key: String!
  value: String
  deployment: DeploymentCreateOneWithoutDeployment_propertiesInput
}

input DeploymentPropertyCreateManyWithoutDeploymentInput {
  create: [DeploymentPropertyCreateWithoutDeploymentInput!]
  connect: [DeploymentPropertyWhereUniqueInput!]
}

input DeploymentPropertyCreateWithoutDeploymentInput {
  category: String
  key: String!
  value: String
}

"""An edge in a connection."""
type DeploymentPropertyEdge {
  """The item at the end of the edge."""
  node: DeploymentProperty!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DeploymentPropertyOrderByInput {
  id_ASC
  id_DESC
  category_ASC
  category_DESC
  key_ASC
  key_DESC
  value_ASC
  value_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type DeploymentPropertyPreviousValues {
  id: UUID!
  category: String
  key: String!
  value: String
}

type DeploymentPropertySubscriptionPayload {
  mutation: MutationType!
  node: DeploymentProperty
  updatedFields: [String!]
  previousValues: DeploymentPropertyPreviousValues
}

input DeploymentPropertySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DeploymentPropertySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DeploymentPropertySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DeploymentPropertySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DeploymentPropertyWhereInput
}

input DeploymentPropertyUpdateInput {
  category: String
  key: String
  value: String
  deployment: DeploymentUpdateOneWithoutDeployment_propertiesInput
}

input DeploymentPropertyUpdateManyMutationInput {
  category: String
  key: String
  value: String
}

input DeploymentPropertyUpdateManyWithoutDeploymentInput {
  create: [DeploymentPropertyCreateWithoutDeploymentInput!]
  connect: [DeploymentPropertyWhereUniqueInput!]
  disconnect: [DeploymentPropertyWhereUniqueInput!]
  delete: [DeploymentPropertyWhereUniqueInput!]
  update: [DeploymentPropertyUpdateWithWhereUniqueWithoutDeploymentInput!]
  upsert: [DeploymentPropertyUpsertWithWhereUniqueWithoutDeploymentInput!]
}

input DeploymentPropertyUpdateWithoutDeploymentDataInput {
  category: String
  key: String
  value: String
}

input DeploymentPropertyUpdateWithWhereUniqueWithoutDeploymentInput {
  where: DeploymentPropertyWhereUniqueInput!
  data: DeploymentPropertyUpdateWithoutDeploymentDataInput!
}

input DeploymentPropertyUpsertWithWhereUniqueWithoutDeploymentInput {
  where: DeploymentPropertyWhereUniqueInput!
  update: DeploymentPropertyUpdateWithoutDeploymentDataInput!
  create: DeploymentPropertyCreateWithoutDeploymentInput!
}

input DeploymentPropertyWhereInput {
  """Logical AND on all given filters."""
  AND: [DeploymentPropertyWhereInput!]

  """Logical OR on all given filters."""
  OR: [DeploymentPropertyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DeploymentPropertyWhereInput!]
  category: String

  """All values that are not equal to given value."""
  category_not: String

  """All values that are contained in given list."""
  category_in: [String!]

  """All values that are not contained in given list."""
  category_not_in: [String!]

  """All values less than the given value."""
  category_lt: String

  """All values less than or equal the given value."""
  category_lte: String

  """All values greater than the given value."""
  category_gt: String

  """All values greater than or equal the given value."""
  category_gte: String

  """All values containing the given string."""
  category_contains: String

  """All values not containing the given string."""
  category_not_contains: String

  """All values starting with the given string."""
  category_starts_with: String

  """All values not starting with the given string."""
  category_not_starts_with: String

  """All values ending with the given string."""
  category_ends_with: String

  """All values not ending with the given string."""
  category_not_ends_with: String
  key: String

  """All values that are not equal to given value."""
  key_not: String

  """All values that are contained in given list."""
  key_in: [String!]

  """All values that are not contained in given list."""
  key_not_in: [String!]

  """All values less than the given value."""
  key_lt: String

  """All values less than or equal the given value."""
  key_lte: String

  """All values greater than the given value."""
  key_gt: String

  """All values greater than or equal the given value."""
  key_gte: String

  """All values containing the given string."""
  key_contains: String

  """All values not containing the given string."""
  key_not_contains: String

  """All values starting with the given string."""
  key_starts_with: String

  """All values not starting with the given string."""
  key_not_starts_with: String

  """All values ending with the given string."""
  key_ends_with: String

  """All values not ending with the given string."""
  key_not_ends_with: String
  value: String

  """All values that are not equal to given value."""
  value_not: String

  """All values that are contained in given list."""
  value_in: [String!]

  """All values that are not contained in given list."""
  value_not_in: [String!]

  """All values less than the given value."""
  value_lt: String

  """All values less than or equal the given value."""
  value_lte: String

  """All values greater than the given value."""
  value_gt: String

  """All values greater than or equal the given value."""
  value_gte: String

  """All values containing the given string."""
  value_contains: String

  """All values not containing the given string."""
  value_not_contains: String

  """All values starting with the given string."""
  value_starts_with: String

  """All values not starting with the given string."""
  value_not_starts_with: String

  """All values ending with the given string."""
  value_ends_with: String

  """All values not ending with the given string."""
  value_not_ends_with: String
  deployment: DeploymentWhereInput
}

input DeploymentPropertyWhereUniqueInput {
  id: UUID
}

type DeploymentSubscriptionPayload {
  mutation: MutationType!
  node: Deployment
  updatedFields: [String!]
  previousValues: DeploymentPreviousValues
}

input DeploymentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DeploymentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DeploymentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DeploymentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DeploymentWhereInput
}

input DeploymentUpdateInput {
  config: String
  description: String
  label: String
  registry_password: String
  release_name: String
  status: String
  type: String
  version: String
  deployment_properties: DeploymentPropertyUpdateManyWithoutDeploymentInput
  workspace: WorkspaceUpdateOneWithoutDeploymentsInput
}

input DeploymentUpdateManyMutationInput {
  config: String
  description: String
  label: String
  registry_password: String
  release_name: String
  status: String
  type: String
  version: String
}

input DeploymentUpdateManyWithoutWorkspaceInput {
  create: [DeploymentCreateWithoutWorkspaceInput!]
  connect: [DeploymentWhereUniqueInput!]
  disconnect: [DeploymentWhereUniqueInput!]
  delete: [DeploymentWhereUniqueInput!]
  update: [DeploymentUpdateWithWhereUniqueWithoutWorkspaceInput!]
  upsert: [DeploymentUpsertWithWhereUniqueWithoutWorkspaceInput!]
}

input DeploymentUpdateOneWithoutDeployment_propertiesInput {
  create: DeploymentCreateWithoutDeployment_propertiesInput
  connect: DeploymentWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: DeploymentUpdateWithoutDeployment_propertiesDataInput
  upsert: DeploymentUpsertWithoutDeployment_propertiesInput
}

input DeploymentUpdateWithoutDeployment_propertiesDataInput {
  config: String
  description: String
  label: String
  registry_password: String
  release_name: String
  status: String
  type: String
  version: String
  workspace: WorkspaceUpdateOneWithoutDeploymentsInput
}

input DeploymentUpdateWithoutWorkspaceDataInput {
  config: String
  description: String
  label: String
  registry_password: String
  release_name: String
  status: String
  type: String
  version: String
  deployment_properties: DeploymentPropertyUpdateManyWithoutDeploymentInput
}

input DeploymentUpdateWithWhereUniqueWithoutWorkspaceInput {
  where: DeploymentWhereUniqueInput!
  data: DeploymentUpdateWithoutWorkspaceDataInput!
}

input DeploymentUpsertWithoutDeployment_propertiesInput {
  update: DeploymentUpdateWithoutDeployment_propertiesDataInput!
  create: DeploymentCreateWithoutDeployment_propertiesInput!
}

input DeploymentUpsertWithWhereUniqueWithoutWorkspaceInput {
  where: DeploymentWhereUniqueInput!
  update: DeploymentUpdateWithoutWorkspaceDataInput!
  create: DeploymentCreateWithoutWorkspaceInput!
}

input DeploymentWhereInput {
  """Logical AND on all given filters."""
  AND: [DeploymentWhereInput!]

  """Logical OR on all given filters."""
  OR: [DeploymentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DeploymentWhereInput!]
  config: String

  """All values that are not equal to given value."""
  config_not: String

  """All values that are contained in given list."""
  config_in: [String!]

  """All values that are not contained in given list."""
  config_not_in: [String!]

  """All values less than the given value."""
  config_lt: String

  """All values less than or equal the given value."""
  config_lte: String

  """All values greater than the given value."""
  config_gt: String

  """All values greater than or equal the given value."""
  config_gte: String

  """All values containing the given string."""
  config_contains: String

  """All values not containing the given string."""
  config_not_contains: String

  """All values starting with the given string."""
  config_starts_with: String

  """All values not starting with the given string."""
  config_not_starts_with: String

  """All values ending with the given string."""
  config_ends_with: String

  """All values not ending with the given string."""
  config_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  label: String

  """All values that are not equal to given value."""
  label_not: String

  """All values that are contained in given list."""
  label_in: [String!]

  """All values that are not contained in given list."""
  label_not_in: [String!]

  """All values less than the given value."""
  label_lt: String

  """All values less than or equal the given value."""
  label_lte: String

  """All values greater than the given value."""
  label_gt: String

  """All values greater than or equal the given value."""
  label_gte: String

  """All values containing the given string."""
  label_contains: String

  """All values not containing the given string."""
  label_not_contains: String

  """All values starting with the given string."""
  label_starts_with: String

  """All values not starting with the given string."""
  label_not_starts_with: String

  """All values ending with the given string."""
  label_ends_with: String

  """All values not ending with the given string."""
  label_not_ends_with: String
  registry_password: String

  """All values that are not equal to given value."""
  registry_password_not: String

  """All values that are contained in given list."""
  registry_password_in: [String!]

  """All values that are not contained in given list."""
  registry_password_not_in: [String!]

  """All values less than the given value."""
  registry_password_lt: String

  """All values less than or equal the given value."""
  registry_password_lte: String

  """All values greater than the given value."""
  registry_password_gt: String

  """All values greater than or equal the given value."""
  registry_password_gte: String

  """All values containing the given string."""
  registry_password_contains: String

  """All values not containing the given string."""
  registry_password_not_contains: String

  """All values starting with the given string."""
  registry_password_starts_with: String

  """All values not starting with the given string."""
  registry_password_not_starts_with: String

  """All values ending with the given string."""
  registry_password_ends_with: String

  """All values not ending with the given string."""
  registry_password_not_ends_with: String
  release_name: String

  """All values that are not equal to given value."""
  release_name_not: String

  """All values that are contained in given list."""
  release_name_in: [String!]

  """All values that are not contained in given list."""
  release_name_not_in: [String!]

  """All values less than the given value."""
  release_name_lt: String

  """All values less than or equal the given value."""
  release_name_lte: String

  """All values greater than the given value."""
  release_name_gt: String

  """All values greater than or equal the given value."""
  release_name_gte: String

  """All values containing the given string."""
  release_name_contains: String

  """All values not containing the given string."""
  release_name_not_contains: String

  """All values starting with the given string."""
  release_name_starts_with: String

  """All values not starting with the given string."""
  release_name_not_starts_with: String

  """All values ending with the given string."""
  release_name_ends_with: String

  """All values not ending with the given string."""
  release_name_not_ends_with: String
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  version: String

  """All values that are not equal to given value."""
  version_not: String

  """All values that are contained in given list."""
  version_in: [String!]

  """All values that are not contained in given list."""
  version_not_in: [String!]

  """All values less than the given value."""
  version_lt: String

  """All values less than or equal the given value."""
  version_lte: String

  """All values greater than the given value."""
  version_gt: String

  """All values greater than or equal the given value."""
  version_gte: String

  """All values containing the given string."""
  version_contains: String

  """All values not containing the given string."""
  version_not_contains: String

  """All values starting with the given string."""
  version_starts_with: String

  """All values not starting with the given string."""
  version_not_starts_with: String

  """All values ending with the given string."""
  version_ends_with: String

  """All values not ending with the given string."""
  version_not_ends_with: String
  deployment_properties_every: DeploymentPropertyWhereInput
  deployment_properties_some: DeploymentPropertyWhereInput
  deployment_properties_none: DeploymentPropertyWhereInput
  workspace: WorkspaceWhereInput
}

input DeploymentWhereUniqueInput {
  id: UUID
  label: String
  release_name: String
}

type Email {
  id: UUID!
  address: String
  main: Boolean
  token: String
  user: User
  verified: Boolean
}

"""A connection to a list of items."""
type EmailConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EmailEdge]!
  aggregate: AggregateEmail!
}

input EmailCreateInput {
  address: String
  main: Boolean
  token: String
  verified: Boolean
  user: UserCreateOneWithoutEmailsInput
}

input EmailCreateManyWithoutUserInput {
  create: [EmailCreateWithoutUserInput!]
  connect: [EmailWhereUniqueInput!]
}

input EmailCreateWithoutUserInput {
  address: String
  main: Boolean
  token: String
  verified: Boolean
}

"""An edge in a connection."""
type EmailEdge {
  """The item at the end of the edge."""
  node: Email!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EmailOrderByInput {
  id_ASC
  id_DESC
  address_ASC
  address_DESC
  main_ASC
  main_DESC
  token_ASC
  token_DESC
  verified_ASC
  verified_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EmailPreviousValues {
  id: UUID!
  address: String
  main: Boolean
  token: String
  verified: Boolean
}

type EmailSubscriptionPayload {
  mutation: MutationType!
  node: Email
  updatedFields: [String!]
  previousValues: EmailPreviousValues
}

input EmailSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EmailSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EmailSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EmailSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EmailWhereInput
}

input EmailUpdateInput {
  address: String
  main: Boolean
  token: String
  verified: Boolean
  user: UserUpdateOneWithoutEmailsInput
}

input EmailUpdateManyMutationInput {
  address: String
  main: Boolean
  token: String
  verified: Boolean
}

input EmailUpdateManyWithoutUserInput {
  create: [EmailCreateWithoutUserInput!]
  connect: [EmailWhereUniqueInput!]
  disconnect: [EmailWhereUniqueInput!]
  delete: [EmailWhereUniqueInput!]
  update: [EmailUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [EmailUpsertWithWhereUniqueWithoutUserInput!]
}

input EmailUpdateWithoutUserDataInput {
  address: String
  main: Boolean
  token: String
  verified: Boolean
}

input EmailUpdateWithWhereUniqueWithoutUserInput {
  where: EmailWhereUniqueInput!
  data: EmailUpdateWithoutUserDataInput!
}

input EmailUpsertWithWhereUniqueWithoutUserInput {
  where: EmailWhereUniqueInput!
  update: EmailUpdateWithoutUserDataInput!
  create: EmailCreateWithoutUserInput!
}

input EmailWhereInput {
  """Logical AND on all given filters."""
  AND: [EmailWhereInput!]

  """Logical OR on all given filters."""
  OR: [EmailWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EmailWhereInput!]
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  main: Boolean

  """All values that are not equal to given value."""
  main_not: Boolean
  token: String

  """All values that are not equal to given value."""
  token_not: String

  """All values that are contained in given list."""
  token_in: [String!]

  """All values that are not contained in given list."""
  token_not_in: [String!]

  """All values less than the given value."""
  token_lt: String

  """All values less than or equal the given value."""
  token_lte: String

  """All values greater than the given value."""
  token_gt: String

  """All values greater than or equal the given value."""
  token_gte: String

  """All values containing the given string."""
  token_contains: String

  """All values not containing the given string."""
  token_not_contains: String

  """All values starting with the given string."""
  token_starts_with: String

  """All values not starting with the given string."""
  token_not_starts_with: String

  """All values ending with the given string."""
  token_ends_with: String

  """All values not ending with the given string."""
  token_not_ends_with: String
  verified: Boolean

  """All values that are not equal to given value."""
  verified_not: Boolean
  user: UserWhereInput
}

input EmailWhereUniqueInput {
  id: UUID
  address: String
  token: String
}

type Group {
  id: UUID!
  active: Boolean
  custom: Boolean
  description: String
  entityType: String
  entityId: UUID
  properties(where: GroupPropertyWhereInput, orderBy: GroupPropertyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GroupProperty!]
  label: String
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role!]
}

"""A connection to a list of items."""
type GroupConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GroupEdge]!
  aggregate: AggregateGroup!
}

input GroupCreateInput {
  active: Boolean
  custom: Boolean
  description: String
  entityType: String
  entityId: UUID
  label: String
  properties: GroupPropertyCreateManyWithoutGroupInput
  users: UserCreateManyWithoutGroupsInput
  roles: RoleCreateManyWithoutGroupsInput
}

input GroupCreateManyWithoutRolesInput {
  create: [GroupCreateWithoutRolesInput!]
  connect: [GroupWhereUniqueInput!]
}

input GroupCreateManyWithoutUsersInput {
  create: [GroupCreateWithoutUsersInput!]
  connect: [GroupWhereUniqueInput!]
}

input GroupCreateOneInput {
  create: GroupCreateInput
  connect: GroupWhereUniqueInput
}

input GroupCreateOneWithoutPropertiesInput {
  create: GroupCreateWithoutPropertiesInput
  connect: GroupWhereUniqueInput
}

input GroupCreateWithoutPropertiesInput {
  active: Boolean
  custom: Boolean
  description: String
  entityType: String
  entityId: UUID
  label: String
  users: UserCreateManyWithoutGroupsInput
  roles: RoleCreateManyWithoutGroupsInput
}

input GroupCreateWithoutRolesInput {
  active: Boolean
  custom: Boolean
  description: String
  entityType: String
  entityId: UUID
  label: String
  properties: GroupPropertyCreateManyWithoutGroupInput
  users: UserCreateManyWithoutGroupsInput
}

input GroupCreateWithoutUsersInput {
  active: Boolean
  custom: Boolean
  description: String
  entityType: String
  entityId: UUID
  label: String
  properties: GroupPropertyCreateManyWithoutGroupInput
  roles: RoleCreateManyWithoutGroupsInput
}

"""An edge in a connection."""
type GroupEdge {
  """The item at the end of the edge."""
  node: Group!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GroupOrderByInput {
  id_ASC
  id_DESC
  active_ASC
  active_DESC
  custom_ASC
  custom_DESC
  description_ASC
  description_DESC
  entityType_ASC
  entityType_DESC
  entityId_ASC
  entityId_DESC
  label_ASC
  label_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type GroupPreviousValues {
  id: UUID!
  active: Boolean
  custom: Boolean
  description: String
  entityType: String
  entityId: UUID
  label: String
}

type GroupProperty {
  id: UUID!
  category: String
  group: Group
  key: String!
  value: String
}

"""A connection to a list of items."""
type GroupPropertyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GroupPropertyEdge]!
  aggregate: AggregateGroupProperty!
}

input GroupPropertyCreateInput {
  category: String
  key: String!
  value: String
  group: GroupCreateOneWithoutPropertiesInput
}

input GroupPropertyCreateManyWithoutGroupInput {
  create: [GroupPropertyCreateWithoutGroupInput!]
  connect: [GroupPropertyWhereUniqueInput!]
}

input GroupPropertyCreateWithoutGroupInput {
  category: String
  key: String!
  value: String
}

"""An edge in a connection."""
type GroupPropertyEdge {
  """The item at the end of the edge."""
  node: GroupProperty!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GroupPropertyOrderByInput {
  id_ASC
  id_DESC
  category_ASC
  category_DESC
  key_ASC
  key_DESC
  value_ASC
  value_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type GroupPropertyPreviousValues {
  id: UUID!
  category: String
  key: String!
  value: String
}

type GroupPropertySubscriptionPayload {
  mutation: MutationType!
  node: GroupProperty
  updatedFields: [String!]
  previousValues: GroupPropertyPreviousValues
}

input GroupPropertySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GroupPropertySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GroupPropertySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GroupPropertySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GroupPropertyWhereInput
}

input GroupPropertyUpdateInput {
  category: String
  key: String
  value: String
  group: GroupUpdateOneWithoutPropertiesInput
}

input GroupPropertyUpdateManyMutationInput {
  category: String
  key: String
  value: String
}

input GroupPropertyUpdateManyWithoutGroupInput {
  create: [GroupPropertyCreateWithoutGroupInput!]
  connect: [GroupPropertyWhereUniqueInput!]
  disconnect: [GroupPropertyWhereUniqueInput!]
  delete: [GroupPropertyWhereUniqueInput!]
  update: [GroupPropertyUpdateWithWhereUniqueWithoutGroupInput!]
  upsert: [GroupPropertyUpsertWithWhereUniqueWithoutGroupInput!]
}

input GroupPropertyUpdateWithoutGroupDataInput {
  category: String
  key: String
  value: String
}

input GroupPropertyUpdateWithWhereUniqueWithoutGroupInput {
  where: GroupPropertyWhereUniqueInput!
  data: GroupPropertyUpdateWithoutGroupDataInput!
}

input GroupPropertyUpsertWithWhereUniqueWithoutGroupInput {
  where: GroupPropertyWhereUniqueInput!
  update: GroupPropertyUpdateWithoutGroupDataInput!
  create: GroupPropertyCreateWithoutGroupInput!
}

input GroupPropertyWhereInput {
  """Logical AND on all given filters."""
  AND: [GroupPropertyWhereInput!]

  """Logical OR on all given filters."""
  OR: [GroupPropertyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GroupPropertyWhereInput!]
  category: String

  """All values that are not equal to given value."""
  category_not: String

  """All values that are contained in given list."""
  category_in: [String!]

  """All values that are not contained in given list."""
  category_not_in: [String!]

  """All values less than the given value."""
  category_lt: String

  """All values less than or equal the given value."""
  category_lte: String

  """All values greater than the given value."""
  category_gt: String

  """All values greater than or equal the given value."""
  category_gte: String

  """All values containing the given string."""
  category_contains: String

  """All values not containing the given string."""
  category_not_contains: String

  """All values starting with the given string."""
  category_starts_with: String

  """All values not starting with the given string."""
  category_not_starts_with: String

  """All values ending with the given string."""
  category_ends_with: String

  """All values not ending with the given string."""
  category_not_ends_with: String
  key: String

  """All values that are not equal to given value."""
  key_not: String

  """All values that are contained in given list."""
  key_in: [String!]

  """All values that are not contained in given list."""
  key_not_in: [String!]

  """All values less than the given value."""
  key_lt: String

  """All values less than or equal the given value."""
  key_lte: String

  """All values greater than the given value."""
  key_gt: String

  """All values greater than or equal the given value."""
  key_gte: String

  """All values containing the given string."""
  key_contains: String

  """All values not containing the given string."""
  key_not_contains: String

  """All values starting with the given string."""
  key_starts_with: String

  """All values not starting with the given string."""
  key_not_starts_with: String

  """All values ending with the given string."""
  key_ends_with: String

  """All values not ending with the given string."""
  key_not_ends_with: String
  value: String

  """All values that are not equal to given value."""
  value_not: String

  """All values that are contained in given list."""
  value_in: [String!]

  """All values that are not contained in given list."""
  value_not_in: [String!]

  """All values less than the given value."""
  value_lt: String

  """All values less than or equal the given value."""
  value_lte: String

  """All values greater than the given value."""
  value_gt: String

  """All values greater than or equal the given value."""
  value_gte: String

  """All values containing the given string."""
  value_contains: String

  """All values not containing the given string."""
  value_not_contains: String

  """All values starting with the given string."""
  value_starts_with: String

  """All values not starting with the given string."""
  value_not_starts_with: String

  """All values ending with the given string."""
  value_ends_with: String

  """All values not ending with the given string."""
  value_not_ends_with: String
  group: GroupWhereInput
}

input GroupPropertyWhereUniqueInput {
  id: UUID
}

type GroupSubscriptionPayload {
  mutation: MutationType!
  node: Group
  updatedFields: [String!]
  previousValues: GroupPreviousValues
}

input GroupSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GroupSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GroupSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GroupSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GroupWhereInput
}

input GroupUpdateDataInput {
  active: Boolean
  custom: Boolean
  description: String
  entityType: String
  entityId: UUID
  label: String
  properties: GroupPropertyUpdateManyWithoutGroupInput
  users: UserUpdateManyWithoutGroupsInput
  roles: RoleUpdateManyWithoutGroupsInput
}

input GroupUpdateInput {
  active: Boolean
  custom: Boolean
  description: String
  entityType: String
  entityId: UUID
  label: String
  properties: GroupPropertyUpdateManyWithoutGroupInput
  users: UserUpdateManyWithoutGroupsInput
  roles: RoleUpdateManyWithoutGroupsInput
}

input GroupUpdateManyMutationInput {
  active: Boolean
  custom: Boolean
  description: String
  entityType: String
  entityId: UUID
  label: String
}

input GroupUpdateManyWithoutRolesInput {
  create: [GroupCreateWithoutRolesInput!]
  connect: [GroupWhereUniqueInput!]
  disconnect: [GroupWhereUniqueInput!]
  delete: [GroupWhereUniqueInput!]
  update: [GroupUpdateWithWhereUniqueWithoutRolesInput!]
  upsert: [GroupUpsertWithWhereUniqueWithoutRolesInput!]
}

input GroupUpdateManyWithoutUsersInput {
  create: [GroupCreateWithoutUsersInput!]
  connect: [GroupWhereUniqueInput!]
  disconnect: [GroupWhereUniqueInput!]
  delete: [GroupWhereUniqueInput!]
  update: [GroupUpdateWithWhereUniqueWithoutUsersInput!]
  upsert: [GroupUpsertWithWhereUniqueWithoutUsersInput!]
}

input GroupUpdateOneInput {
  create: GroupCreateInput
  connect: GroupWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: GroupUpdateDataInput
  upsert: GroupUpsertNestedInput
}

input GroupUpdateOneWithoutPropertiesInput {
  create: GroupCreateWithoutPropertiesInput
  connect: GroupWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: GroupUpdateWithoutPropertiesDataInput
  upsert: GroupUpsertWithoutPropertiesInput
}

input GroupUpdateWithoutPropertiesDataInput {
  active: Boolean
  custom: Boolean
  description: String
  entityType: String
  entityId: UUID
  label: String
  users: UserUpdateManyWithoutGroupsInput
  roles: RoleUpdateManyWithoutGroupsInput
}

input GroupUpdateWithoutRolesDataInput {
  active: Boolean
  custom: Boolean
  description: String
  entityType: String
  entityId: UUID
  label: String
  properties: GroupPropertyUpdateManyWithoutGroupInput
  users: UserUpdateManyWithoutGroupsInput
}

input GroupUpdateWithoutUsersDataInput {
  active: Boolean
  custom: Boolean
  description: String
  entityType: String
  entityId: UUID
  label: String
  properties: GroupPropertyUpdateManyWithoutGroupInput
  roles: RoleUpdateManyWithoutGroupsInput
}

input GroupUpdateWithWhereUniqueWithoutRolesInput {
  where: GroupWhereUniqueInput!
  data: GroupUpdateWithoutRolesDataInput!
}

input GroupUpdateWithWhereUniqueWithoutUsersInput {
  where: GroupWhereUniqueInput!
  data: GroupUpdateWithoutUsersDataInput!
}

input GroupUpsertNestedInput {
  update: GroupUpdateDataInput!
  create: GroupCreateInput!
}

input GroupUpsertWithoutPropertiesInput {
  update: GroupUpdateWithoutPropertiesDataInput!
  create: GroupCreateWithoutPropertiesInput!
}

input GroupUpsertWithWhereUniqueWithoutRolesInput {
  where: GroupWhereUniqueInput!
  update: GroupUpdateWithoutRolesDataInput!
  create: GroupCreateWithoutRolesInput!
}

input GroupUpsertWithWhereUniqueWithoutUsersInput {
  where: GroupWhereUniqueInput!
  update: GroupUpdateWithoutUsersDataInput!
  create: GroupCreateWithoutUsersInput!
}

input GroupWhereInput {
  """Logical AND on all given filters."""
  AND: [GroupWhereInput!]

  """Logical OR on all given filters."""
  OR: [GroupWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GroupWhereInput!]
  active: Boolean

  """All values that are not equal to given value."""
  active_not: Boolean
  custom: Boolean

  """All values that are not equal to given value."""
  custom_not: Boolean
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  entityType: String

  """All values that are not equal to given value."""
  entityType_not: String

  """All values that are contained in given list."""
  entityType_in: [String!]

  """All values that are not contained in given list."""
  entityType_not_in: [String!]

  """All values less than the given value."""
  entityType_lt: String

  """All values less than or equal the given value."""
  entityType_lte: String

  """All values greater than the given value."""
  entityType_gt: String

  """All values greater than or equal the given value."""
  entityType_gte: String

  """All values containing the given string."""
  entityType_contains: String

  """All values not containing the given string."""
  entityType_not_contains: String

  """All values starting with the given string."""
  entityType_starts_with: String

  """All values not starting with the given string."""
  entityType_not_starts_with: String

  """All values ending with the given string."""
  entityType_ends_with: String

  """All values not ending with the given string."""
  entityType_not_ends_with: String
  label: String

  """All values that are not equal to given value."""
  label_not: String

  """All values that are contained in given list."""
  label_in: [String!]

  """All values that are not contained in given list."""
  label_not_in: [String!]

  """All values less than the given value."""
  label_lt: String

  """All values less than or equal the given value."""
  label_lte: String

  """All values greater than the given value."""
  label_gt: String

  """All values greater than or equal the given value."""
  label_gte: String

  """All values containing the given string."""
  label_contains: String

  """All values not containing the given string."""
  label_not_contains: String

  """All values starting with the given string."""
  label_starts_with: String

  """All values not starting with the given string."""
  label_not_starts_with: String

  """All values ending with the given string."""
  label_ends_with: String

  """All values not ending with the given string."""
  label_not_ends_with: String
  properties_every: GroupPropertyWhereInput
  properties_some: GroupPropertyWhereInput
  properties_none: GroupPropertyWhereInput
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  roles_every: RoleWhereInput
  roles_some: RoleWhereInput
  roles_none: RoleWhereInput
}

input GroupWhereUniqueInput {
  id: UUID
  entityType: String
  entityId: UUID
  label: String
}

type InviteToken {
  id: UUID!
  assignments: String
  email: String
  token: String
  user: User
  workspace: Workspace
}

"""A connection to a list of items."""
type InviteTokenConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InviteTokenEdge]!
  aggregate: AggregateInviteToken!
}

input InviteTokenCreateInput {
  assignments: String
  email: String
  token: String
  user: UserCreateOneWithoutInviteTokensInput
  workspace: WorkspaceCreateOneWithoutInviteTokensInput
}

input InviteTokenCreateManyWithoutUserInput {
  create: [InviteTokenCreateWithoutUserInput!]
  connect: [InviteTokenWhereUniqueInput!]
}

input InviteTokenCreateManyWithoutWorkspaceInput {
  create: [InviteTokenCreateWithoutWorkspaceInput!]
  connect: [InviteTokenWhereUniqueInput!]
}

input InviteTokenCreateWithoutUserInput {
  assignments: String
  email: String
  token: String
  workspace: WorkspaceCreateOneWithoutInviteTokensInput
}

input InviteTokenCreateWithoutWorkspaceInput {
  assignments: String
  email: String
  token: String
  user: UserCreateOneWithoutInviteTokensInput
}

"""An edge in a connection."""
type InviteTokenEdge {
  """The item at the end of the edge."""
  node: InviteToken!

  """A cursor for use in pagination."""
  cursor: String!
}

enum InviteTokenOrderByInput {
  id_ASC
  id_DESC
  assignments_ASC
  assignments_DESC
  email_ASC
  email_DESC
  token_ASC
  token_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type InviteTokenPreviousValues {
  id: UUID!
  assignments: String
  email: String
  token: String
}

type InviteTokenSubscriptionPayload {
  mutation: MutationType!
  node: InviteToken
  updatedFields: [String!]
  previousValues: InviteTokenPreviousValues
}

input InviteTokenSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [InviteTokenSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [InviteTokenSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InviteTokenSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InviteTokenWhereInput
}

input InviteTokenUpdateInput {
  assignments: String
  email: String
  token: String
  user: UserUpdateOneWithoutInviteTokensInput
  workspace: WorkspaceUpdateOneWithoutInviteTokensInput
}

input InviteTokenUpdateManyMutationInput {
  assignments: String
  email: String
  token: String
}

input InviteTokenUpdateManyWithoutUserInput {
  create: [InviteTokenCreateWithoutUserInput!]
  connect: [InviteTokenWhereUniqueInput!]
  disconnect: [InviteTokenWhereUniqueInput!]
  delete: [InviteTokenWhereUniqueInput!]
  update: [InviteTokenUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [InviteTokenUpsertWithWhereUniqueWithoutUserInput!]
}

input InviteTokenUpdateManyWithoutWorkspaceInput {
  create: [InviteTokenCreateWithoutWorkspaceInput!]
  connect: [InviteTokenWhereUniqueInput!]
  disconnect: [InviteTokenWhereUniqueInput!]
  delete: [InviteTokenWhereUniqueInput!]
  update: [InviteTokenUpdateWithWhereUniqueWithoutWorkspaceInput!]
  upsert: [InviteTokenUpsertWithWhereUniqueWithoutWorkspaceInput!]
}

input InviteTokenUpdateWithoutUserDataInput {
  assignments: String
  email: String
  token: String
  workspace: WorkspaceUpdateOneWithoutInviteTokensInput
}

input InviteTokenUpdateWithoutWorkspaceDataInput {
  assignments: String
  email: String
  token: String
  user: UserUpdateOneWithoutInviteTokensInput
}

input InviteTokenUpdateWithWhereUniqueWithoutUserInput {
  where: InviteTokenWhereUniqueInput!
  data: InviteTokenUpdateWithoutUserDataInput!
}

input InviteTokenUpdateWithWhereUniqueWithoutWorkspaceInput {
  where: InviteTokenWhereUniqueInput!
  data: InviteTokenUpdateWithoutWorkspaceDataInput!
}

input InviteTokenUpsertWithWhereUniqueWithoutUserInput {
  where: InviteTokenWhereUniqueInput!
  update: InviteTokenUpdateWithoutUserDataInput!
  create: InviteTokenCreateWithoutUserInput!
}

input InviteTokenUpsertWithWhereUniqueWithoutWorkspaceInput {
  where: InviteTokenWhereUniqueInput!
  update: InviteTokenUpdateWithoutWorkspaceDataInput!
  create: InviteTokenCreateWithoutWorkspaceInput!
}

input InviteTokenWhereInput {
  """Logical AND on all given filters."""
  AND: [InviteTokenWhereInput!]

  """Logical OR on all given filters."""
  OR: [InviteTokenWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InviteTokenWhereInput!]
  assignments: String

  """All values that are not equal to given value."""
  assignments_not: String

  """All values that are contained in given list."""
  assignments_in: [String!]

  """All values that are not contained in given list."""
  assignments_not_in: [String!]

  """All values less than the given value."""
  assignments_lt: String

  """All values less than or equal the given value."""
  assignments_lte: String

  """All values greater than the given value."""
  assignments_gt: String

  """All values greater than or equal the given value."""
  assignments_gte: String

  """All values containing the given string."""
  assignments_contains: String

  """All values not containing the given string."""
  assignments_not_contains: String

  """All values starting with the given string."""
  assignments_starts_with: String

  """All values not starting with the given string."""
  assignments_not_starts_with: String

  """All values ending with the given string."""
  assignments_ends_with: String

  """All values not ending with the given string."""
  assignments_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  token: String

  """All values that are not equal to given value."""
  token_not: String

  """All values that are contained in given list."""
  token_in: [String!]

  """All values that are not contained in given list."""
  token_not_in: [String!]

  """All values less than the given value."""
  token_lt: String

  """All values less than or equal the given value."""
  token_lte: String

  """All values greater than the given value."""
  token_gt: String

  """All values greater than or equal the given value."""
  token_gte: String

  """All values containing the given string."""
  token_contains: String

  """All values not containing the given string."""
  token_not_contains: String

  """All values starting with the given string."""
  token_starts_with: String

  """All values not starting with the given string."""
  token_not_starts_with: String

  """All values ending with the given string."""
  token_ends_with: String

  """All values not ending with the given string."""
  token_not_ends_with: String
  user: UserWhereInput
  workspace: WorkspaceWhereInput
}

input InviteTokenWhereUniqueInput {
  id: UUID
  token: String
}

"""Raw JSON value"""
scalar Json

type LocalCredential {
  id: UUID!
  password: String
  resetToken: String
  user: User
}

"""A connection to a list of items."""
type LocalCredentialConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LocalCredentialEdge]!
  aggregate: AggregateLocalCredential!
}

input LocalCredentialCreateInput {
  password: String
  resetToken: String
  user: UserCreateOneWithoutLocalCredentialsInput
}

input LocalCredentialCreateManyWithoutUserInput {
  create: [LocalCredentialCreateWithoutUserInput!]
  connect: [LocalCredentialWhereUniqueInput!]
}

input LocalCredentialCreateWithoutUserInput {
  password: String
  resetToken: String
}

"""An edge in a connection."""
type LocalCredentialEdge {
  """The item at the end of the edge."""
  node: LocalCredential!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LocalCredentialOrderByInput {
  id_ASC
  id_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LocalCredentialPreviousValues {
  id: UUID!
  password: String
  resetToken: String
}

type LocalCredentialSubscriptionPayload {
  mutation: MutationType!
  node: LocalCredential
  updatedFields: [String!]
  previousValues: LocalCredentialPreviousValues
}

input LocalCredentialSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LocalCredentialSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LocalCredentialSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LocalCredentialSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LocalCredentialWhereInput
}

input LocalCredentialUpdateInput {
  password: String
  resetToken: String
  user: UserUpdateOneWithoutLocalCredentialsInput
}

input LocalCredentialUpdateManyMutationInput {
  password: String
  resetToken: String
}

input LocalCredentialUpdateManyWithoutUserInput {
  create: [LocalCredentialCreateWithoutUserInput!]
  connect: [LocalCredentialWhereUniqueInput!]
  disconnect: [LocalCredentialWhereUniqueInput!]
  delete: [LocalCredentialWhereUniqueInput!]
  update: [LocalCredentialUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [LocalCredentialUpsertWithWhereUniqueWithoutUserInput!]
}

input LocalCredentialUpdateWithoutUserDataInput {
  password: String
  resetToken: String
}

input LocalCredentialUpdateWithWhereUniqueWithoutUserInput {
  where: LocalCredentialWhereUniqueInput!
  data: LocalCredentialUpdateWithoutUserDataInput!
}

input LocalCredentialUpsertWithWhereUniqueWithoutUserInput {
  where: LocalCredentialWhereUniqueInput!
  update: LocalCredentialUpdateWithoutUserDataInput!
  create: LocalCredentialCreateWithoutUserInput!
}

input LocalCredentialWhereInput {
  """Logical AND on all given filters."""
  AND: [LocalCredentialWhereInput!]

  """Logical OR on all given filters."""
  OR: [LocalCredentialWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LocalCredentialWhereInput!]
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  user: UserWhereInput
}

input LocalCredentialWhereUniqueInput {
  id: UUID
  password: String
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createEmail(data: EmailCreateInput!): Email!
  createInviteToken(data: InviteTokenCreateInput!): InviteToken!
  createLocalCredential(data: LocalCredentialCreateInput!): LocalCredential!
  createOauthCredential(data: OauthCredentialCreateInput!): OauthCredential!
  createSessionRefreshToken(data: SessionRefreshTokenCreateInput!): SessionRefreshToken!
  createUserGroup(data: UserGroupCreateInput!): UserGroup!
  createGroupProperty(data: GroupPropertyCreateInput!): GroupProperty!
  createUserProperty(data: UserPropertyCreateInput!): UserProperty!
  createRole(data: RoleCreateInput!): Role!
  createPermission(data: PermissionCreateInput!): Permission!
  createServiceAccount(data: ServiceAccountCreateInput!): ServiceAccount!
  createUserWorkspace(data: UserWorkspaceCreateInput!): UserWorkspace!
  createWorkspaceProperty(data: WorkspacePropertyCreateInput!): WorkspaceProperty!
  createDeployment(data: DeploymentCreateInput!): Deployment!
  createDeploymentProperty(data: DeploymentPropertyCreateInput!): DeploymentProperty!
  createSystemSetting(data: SystemSettingCreateInput!): SystemSetting!
  createWorkspace(data: WorkspaceCreateInput!): Workspace!
  createGroup(data: GroupCreateInput!): Group!
  createUser(data: UserCreateInput!): User!
  updateEmail(data: EmailUpdateInput!, where: EmailWhereUniqueInput!): Email
  updateInviteToken(data: InviteTokenUpdateInput!, where: InviteTokenWhereUniqueInput!): InviteToken
  updateLocalCredential(data: LocalCredentialUpdateInput!, where: LocalCredentialWhereUniqueInput!): LocalCredential
  updateOauthCredential(data: OauthCredentialUpdateInput!, where: OauthCredentialWhereUniqueInput!): OauthCredential
  updateSessionRefreshToken(data: SessionRefreshTokenUpdateInput!, where: SessionRefreshTokenWhereUniqueInput!): SessionRefreshToken
  updateUserGroup(data: UserGroupUpdateInput!, where: UserGroupWhereUniqueInput!): UserGroup
  updateGroupProperty(data: GroupPropertyUpdateInput!, where: GroupPropertyWhereUniqueInput!): GroupProperty
  updateUserProperty(data: UserPropertyUpdateInput!, where: UserPropertyWhereUniqueInput!): UserProperty
  updateRole(data: RoleUpdateInput!, where: RoleWhereUniqueInput!): Role
  updatePermission(data: PermissionUpdateInput!, where: PermissionWhereUniqueInput!): Permission
  updateServiceAccount(data: ServiceAccountUpdateInput!, where: ServiceAccountWhereUniqueInput!): ServiceAccount
  updateUserWorkspace(data: UserWorkspaceUpdateInput!, where: UserWorkspaceWhereUniqueInput!): UserWorkspace
  updateWorkspaceProperty(data: WorkspacePropertyUpdateInput!, where: WorkspacePropertyWhereUniqueInput!): WorkspaceProperty
  updateDeployment(data: DeploymentUpdateInput!, where: DeploymentWhereUniqueInput!): Deployment
  updateDeploymentProperty(data: DeploymentPropertyUpdateInput!, where: DeploymentPropertyWhereUniqueInput!): DeploymentProperty
  updateSystemSetting(data: SystemSettingUpdateInput!, where: SystemSettingWhereUniqueInput!): SystemSetting
  updateWorkspace(data: WorkspaceUpdateInput!, where: WorkspaceWhereUniqueInput!): Workspace
  updateGroup(data: GroupUpdateInput!, where: GroupWhereUniqueInput!): Group
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteEmail(where: EmailWhereUniqueInput!): Email
  deleteInviteToken(where: InviteTokenWhereUniqueInput!): InviteToken
  deleteLocalCredential(where: LocalCredentialWhereUniqueInput!): LocalCredential
  deleteOauthCredential(where: OauthCredentialWhereUniqueInput!): OauthCredential
  deleteSessionRefreshToken(where: SessionRefreshTokenWhereUniqueInput!): SessionRefreshToken
  deleteUserGroup(where: UserGroupWhereUniqueInput!): UserGroup
  deleteGroupProperty(where: GroupPropertyWhereUniqueInput!): GroupProperty
  deleteUserProperty(where: UserPropertyWhereUniqueInput!): UserProperty
  deleteRole(where: RoleWhereUniqueInput!): Role
  deletePermission(where: PermissionWhereUniqueInput!): Permission
  deleteServiceAccount(where: ServiceAccountWhereUniqueInput!): ServiceAccount
  deleteUserWorkspace(where: UserWorkspaceWhereUniqueInput!): UserWorkspace
  deleteWorkspaceProperty(where: WorkspacePropertyWhereUniqueInput!): WorkspaceProperty
  deleteDeployment(where: DeploymentWhereUniqueInput!): Deployment
  deleteDeploymentProperty(where: DeploymentPropertyWhereUniqueInput!): DeploymentProperty
  deleteSystemSetting(where: SystemSettingWhereUniqueInput!): SystemSetting
  deleteWorkspace(where: WorkspaceWhereUniqueInput!): Workspace
  deleteGroup(where: GroupWhereUniqueInput!): Group
  deleteUser(where: UserWhereUniqueInput!): User
  upsertEmail(where: EmailWhereUniqueInput!, create: EmailCreateInput!, update: EmailUpdateInput!): Email!
  upsertInviteToken(where: InviteTokenWhereUniqueInput!, create: InviteTokenCreateInput!, update: InviteTokenUpdateInput!): InviteToken!
  upsertLocalCredential(where: LocalCredentialWhereUniqueInput!, create: LocalCredentialCreateInput!, update: LocalCredentialUpdateInput!): LocalCredential!
  upsertOauthCredential(where: OauthCredentialWhereUniqueInput!, create: OauthCredentialCreateInput!, update: OauthCredentialUpdateInput!): OauthCredential!
  upsertSessionRefreshToken(where: SessionRefreshTokenWhereUniqueInput!, create: SessionRefreshTokenCreateInput!, update: SessionRefreshTokenUpdateInput!): SessionRefreshToken!
  upsertUserGroup(where: UserGroupWhereUniqueInput!, create: UserGroupCreateInput!, update: UserGroupUpdateInput!): UserGroup!
  upsertGroupProperty(where: GroupPropertyWhereUniqueInput!, create: GroupPropertyCreateInput!, update: GroupPropertyUpdateInput!): GroupProperty!
  upsertUserProperty(where: UserPropertyWhereUniqueInput!, create: UserPropertyCreateInput!, update: UserPropertyUpdateInput!): UserProperty!
  upsertRole(where: RoleWhereUniqueInput!, create: RoleCreateInput!, update: RoleUpdateInput!): Role!
  upsertPermission(where: PermissionWhereUniqueInput!, create: PermissionCreateInput!, update: PermissionUpdateInput!): Permission!
  upsertServiceAccount(where: ServiceAccountWhereUniqueInput!, create: ServiceAccountCreateInput!, update: ServiceAccountUpdateInput!): ServiceAccount!
  upsertUserWorkspace(where: UserWorkspaceWhereUniqueInput!, create: UserWorkspaceCreateInput!, update: UserWorkspaceUpdateInput!): UserWorkspace!
  upsertWorkspaceProperty(where: WorkspacePropertyWhereUniqueInput!, create: WorkspacePropertyCreateInput!, update: WorkspacePropertyUpdateInput!): WorkspaceProperty!
  upsertDeployment(where: DeploymentWhereUniqueInput!, create: DeploymentCreateInput!, update: DeploymentUpdateInput!): Deployment!
  upsertDeploymentProperty(where: DeploymentPropertyWhereUniqueInput!, create: DeploymentPropertyCreateInput!, update: DeploymentPropertyUpdateInput!): DeploymentProperty!
  upsertSystemSetting(where: SystemSettingWhereUniqueInput!, create: SystemSettingCreateInput!, update: SystemSettingUpdateInput!): SystemSetting!
  upsertWorkspace(where: WorkspaceWhereUniqueInput!, create: WorkspaceCreateInput!, update: WorkspaceUpdateInput!): Workspace!
  upsertGroup(where: GroupWhereUniqueInput!, create: GroupCreateInput!, update: GroupUpdateInput!): Group!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyEmails(data: EmailUpdateManyMutationInput!, where: EmailWhereInput): BatchPayload!
  updateManyInviteTokens(data: InviteTokenUpdateManyMutationInput!, where: InviteTokenWhereInput): BatchPayload!
  updateManyLocalCredentials(data: LocalCredentialUpdateManyMutationInput!, where: LocalCredentialWhereInput): BatchPayload!
  updateManyOauthCredentials(data: OauthCredentialUpdateManyMutationInput!, where: OauthCredentialWhereInput): BatchPayload!
  updateManySessionRefreshTokens(data: SessionRefreshTokenUpdateManyMutationInput!, where: SessionRefreshTokenWhereInput): BatchPayload!
  updateManyGroupProperties(data: GroupPropertyUpdateManyMutationInput!, where: GroupPropertyWhereInput): BatchPayload!
  updateManyUserProperties(data: UserPropertyUpdateManyMutationInput!, where: UserPropertyWhereInput): BatchPayload!
  updateManyRoles(data: RoleUpdateManyMutationInput!, where: RoleWhereInput): BatchPayload!
  updateManyPermissions(data: PermissionUpdateManyMutationInput!, where: PermissionWhereInput): BatchPayload!
  updateManyServiceAccounts(data: ServiceAccountUpdateManyMutationInput!, where: ServiceAccountWhereInput): BatchPayload!
  updateManyWorkspaceProperties(data: WorkspacePropertyUpdateManyMutationInput!, where: WorkspacePropertyWhereInput): BatchPayload!
  updateManyDeployments(data: DeploymentUpdateManyMutationInput!, where: DeploymentWhereInput): BatchPayload!
  updateManyDeploymentProperties(data: DeploymentPropertyUpdateManyMutationInput!, where: DeploymentPropertyWhereInput): BatchPayload!
  updateManySystemSettings(data: SystemSettingUpdateManyMutationInput!, where: SystemSettingWhereInput): BatchPayload!
  updateManyWorkspaces(data: WorkspaceUpdateManyMutationInput!, where: WorkspaceWhereInput): BatchPayload!
  updateManyGroups(data: GroupUpdateManyMutationInput!, where: GroupWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  deleteManyEmails(where: EmailWhereInput): BatchPayload!
  deleteManyInviteTokens(where: InviteTokenWhereInput): BatchPayload!
  deleteManyLocalCredentials(where: LocalCredentialWhereInput): BatchPayload!
  deleteManyOauthCredentials(where: OauthCredentialWhereInput): BatchPayload!
  deleteManySessionRefreshTokens(where: SessionRefreshTokenWhereInput): BatchPayload!
  deleteManyUserGroups(where: UserGroupWhereInput): BatchPayload!
  deleteManyGroupProperties(where: GroupPropertyWhereInput): BatchPayload!
  deleteManyUserProperties(where: UserPropertyWhereInput): BatchPayload!
  deleteManyRoles(where: RoleWhereInput): BatchPayload!
  deleteManyPermissions(where: PermissionWhereInput): BatchPayload!
  deleteManyServiceAccounts(where: ServiceAccountWhereInput): BatchPayload!
  deleteManyUserWorkspaces(where: UserWorkspaceWhereInput): BatchPayload!
  deleteManyWorkspaceProperties(where: WorkspacePropertyWhereInput): BatchPayload!
  deleteManyDeployments(where: DeploymentWhereInput): BatchPayload!
  deleteManyDeploymentProperties(where: DeploymentPropertyWhereInput): BatchPayload!
  deleteManySystemSettings(where: SystemSettingWhereInput): BatchPayload!
  deleteManyWorkspaces(where: WorkspaceWhereInput): BatchPayload!
  deleteManyGroups(where: GroupWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type OauthCredential {
  id: UUID!
  expiresAt: DateTime
  oauthProvider: String!
  oauthUserId: String!
  user: User
}

"""A connection to a list of items."""
type OauthCredentialConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OauthCredentialEdge]!
  aggregate: AggregateOauthCredential!
}

input OauthCredentialCreateInput {
  expiresAt: DateTime
  oauthProvider: String!
  oauthUserId: String!
  user: UserCreateOneWithoutOauthCredentialsInput
}

input OauthCredentialCreateManyWithoutUserInput {
  create: [OauthCredentialCreateWithoutUserInput!]
  connect: [OauthCredentialWhereUniqueInput!]
}

input OauthCredentialCreateWithoutUserInput {
  expiresAt: DateTime
  oauthProvider: String!
  oauthUserId: String!
}

"""An edge in a connection."""
type OauthCredentialEdge {
  """The item at the end of the edge."""
  node: OauthCredential!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OauthCredentialOrderByInput {
  id_ASC
  id_DESC
  expiresAt_ASC
  expiresAt_DESC
  oauthProvider_ASC
  oauthProvider_DESC
  oauthUserId_ASC
  oauthUserId_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type OauthCredentialPreviousValues {
  id: UUID!
  expiresAt: DateTime
  oauthProvider: String!
  oauthUserId: String!
}

type OauthCredentialSubscriptionPayload {
  mutation: MutationType!
  node: OauthCredential
  updatedFields: [String!]
  previousValues: OauthCredentialPreviousValues
}

input OauthCredentialSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OauthCredentialSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OauthCredentialSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OauthCredentialSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OauthCredentialWhereInput
}

input OauthCredentialUpdateInput {
  expiresAt: DateTime
  oauthProvider: String
  oauthUserId: String
  user: UserUpdateOneWithoutOauthCredentialsInput
}

input OauthCredentialUpdateManyMutationInput {
  expiresAt: DateTime
  oauthProvider: String
  oauthUserId: String
}

input OauthCredentialUpdateManyWithoutUserInput {
  create: [OauthCredentialCreateWithoutUserInput!]
  connect: [OauthCredentialWhereUniqueInput!]
  disconnect: [OauthCredentialWhereUniqueInput!]
  delete: [OauthCredentialWhereUniqueInput!]
  update: [OauthCredentialUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [OauthCredentialUpsertWithWhereUniqueWithoutUserInput!]
}

input OauthCredentialUpdateWithoutUserDataInput {
  expiresAt: DateTime
  oauthProvider: String
  oauthUserId: String
}

input OauthCredentialUpdateWithWhereUniqueWithoutUserInput {
  where: OauthCredentialWhereUniqueInput!
  data: OauthCredentialUpdateWithoutUserDataInput!
}

input OauthCredentialUpsertWithWhereUniqueWithoutUserInput {
  where: OauthCredentialWhereUniqueInput!
  update: OauthCredentialUpdateWithoutUserDataInput!
  create: OauthCredentialCreateWithoutUserInput!
}

input OauthCredentialWhereInput {
  """Logical AND on all given filters."""
  AND: [OauthCredentialWhereInput!]

  """Logical OR on all given filters."""
  OR: [OauthCredentialWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OauthCredentialWhereInput!]
  expiresAt: DateTime

  """All values that are not equal to given value."""
  expiresAt_not: DateTime

  """All values that are contained in given list."""
  expiresAt_in: [DateTime!]

  """All values that are not contained in given list."""
  expiresAt_not_in: [DateTime!]

  """All values less than the given value."""
  expiresAt_lt: DateTime

  """All values less than or equal the given value."""
  expiresAt_lte: DateTime

  """All values greater than the given value."""
  expiresAt_gt: DateTime

  """All values greater than or equal the given value."""
  expiresAt_gte: DateTime
  oauthProvider: String

  """All values that are not equal to given value."""
  oauthProvider_not: String

  """All values that are contained in given list."""
  oauthProvider_in: [String!]

  """All values that are not contained in given list."""
  oauthProvider_not_in: [String!]

  """All values less than the given value."""
  oauthProvider_lt: String

  """All values less than or equal the given value."""
  oauthProvider_lte: String

  """All values greater than the given value."""
  oauthProvider_gt: String

  """All values greater than or equal the given value."""
  oauthProvider_gte: String

  """All values containing the given string."""
  oauthProvider_contains: String

  """All values not containing the given string."""
  oauthProvider_not_contains: String

  """All values starting with the given string."""
  oauthProvider_starts_with: String

  """All values not starting with the given string."""
  oauthProvider_not_starts_with: String

  """All values ending with the given string."""
  oauthProvider_ends_with: String

  """All values not ending with the given string."""
  oauthProvider_not_ends_with: String
  oauthUserId: String

  """All values that are not equal to given value."""
  oauthUserId_not: String

  """All values that are contained in given list."""
  oauthUserId_in: [String!]

  """All values that are not contained in given list."""
  oauthUserId_not_in: [String!]

  """All values less than the given value."""
  oauthUserId_lt: String

  """All values less than or equal the given value."""
  oauthUserId_lte: String

  """All values greater than the given value."""
  oauthUserId_gt: String

  """All values greater than or equal the given value."""
  oauthUserId_gte: String

  """All values containing the given string."""
  oauthUserId_contains: String

  """All values not containing the given string."""
  oauthUserId_not_contains: String

  """All values starting with the given string."""
  oauthUserId_starts_with: String

  """All values not starting with the given string."""
  oauthUserId_not_starts_with: String

  """All values ending with the given string."""
  oauthUserId_ends_with: String

  """All values not ending with the given string."""
  oauthUserId_not_ends_with: String
  user: UserWhereInput
}

input OauthCredentialWhereUniqueInput {
  id: UUID
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Permission {
  id: UUID!
  category: String
  label: String
  scope: String!
  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role!]
}

"""A connection to a list of items."""
type PermissionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PermissionEdge]!
  aggregate: AggregatePermission!
}

input PermissionCreateInput {
  category: String
  label: String
  scope: String!
  roles: RoleCreateManyWithoutPermissionsInput
}

input PermissionCreateManyWithoutRolesInput {
  create: [PermissionCreateWithoutRolesInput!]
  connect: [PermissionWhereUniqueInput!]
}

input PermissionCreateWithoutRolesInput {
  category: String
  label: String
  scope: String!
}

"""An edge in a connection."""
type PermissionEdge {
  """The item at the end of the edge."""
  node: Permission!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PermissionOrderByInput {
  id_ASC
  id_DESC
  category_ASC
  category_DESC
  label_ASC
  label_DESC
  scope_ASC
  scope_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PermissionPreviousValues {
  id: UUID!
  category: String
  label: String
  scope: String!
}

type PermissionSubscriptionPayload {
  mutation: MutationType!
  node: Permission
  updatedFields: [String!]
  previousValues: PermissionPreviousValues
}

input PermissionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PermissionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PermissionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PermissionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PermissionWhereInput
}

input PermissionUpdateInput {
  category: String
  label: String
  scope: String
  roles: RoleUpdateManyWithoutPermissionsInput
}

input PermissionUpdateManyMutationInput {
  category: String
  label: String
  scope: String
}

input PermissionUpdateManyWithoutRolesInput {
  create: [PermissionCreateWithoutRolesInput!]
  connect: [PermissionWhereUniqueInput!]
  disconnect: [PermissionWhereUniqueInput!]
  delete: [PermissionWhereUniqueInput!]
  update: [PermissionUpdateWithWhereUniqueWithoutRolesInput!]
  upsert: [PermissionUpsertWithWhereUniqueWithoutRolesInput!]
}

input PermissionUpdateWithoutRolesDataInput {
  category: String
  label: String
  scope: String
}

input PermissionUpdateWithWhereUniqueWithoutRolesInput {
  where: PermissionWhereUniqueInput!
  data: PermissionUpdateWithoutRolesDataInput!
}

input PermissionUpsertWithWhereUniqueWithoutRolesInput {
  where: PermissionWhereUniqueInput!
  update: PermissionUpdateWithoutRolesDataInput!
  create: PermissionCreateWithoutRolesInput!
}

input PermissionWhereInput {
  """Logical AND on all given filters."""
  AND: [PermissionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PermissionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PermissionWhereInput!]
  category: String

  """All values that are not equal to given value."""
  category_not: String

  """All values that are contained in given list."""
  category_in: [String!]

  """All values that are not contained in given list."""
  category_not_in: [String!]

  """All values less than the given value."""
  category_lt: String

  """All values less than or equal the given value."""
  category_lte: String

  """All values greater than the given value."""
  category_gt: String

  """All values greater than or equal the given value."""
  category_gte: String

  """All values containing the given string."""
  category_contains: String

  """All values not containing the given string."""
  category_not_contains: String

  """All values starting with the given string."""
  category_starts_with: String

  """All values not starting with the given string."""
  category_not_starts_with: String

  """All values ending with the given string."""
  category_ends_with: String

  """All values not ending with the given string."""
  category_not_ends_with: String
  label: String

  """All values that are not equal to given value."""
  label_not: String

  """All values that are contained in given list."""
  label_in: [String!]

  """All values that are not contained in given list."""
  label_not_in: [String!]

  """All values less than the given value."""
  label_lt: String

  """All values less than or equal the given value."""
  label_lte: String

  """All values greater than the given value."""
  label_gt: String

  """All values greater than or equal the given value."""
  label_gte: String

  """All values containing the given string."""
  label_contains: String

  """All values not containing the given string."""
  label_not_contains: String

  """All values starting with the given string."""
  label_starts_with: String

  """All values not starting with the given string."""
  label_not_starts_with: String

  """All values ending with the given string."""
  label_ends_with: String

  """All values not ending with the given string."""
  label_not_ends_with: String
  scope: String

  """All values that are not equal to given value."""
  scope_not: String

  """All values that are contained in given list."""
  scope_in: [String!]

  """All values that are not contained in given list."""
  scope_not_in: [String!]

  """All values less than the given value."""
  scope_lt: String

  """All values less than or equal the given value."""
  scope_lte: String

  """All values greater than the given value."""
  scope_gt: String

  """All values greater than or equal the given value."""
  scope_gte: String

  """All values containing the given string."""
  scope_contains: String

  """All values not containing the given string."""
  scope_not_contains: String

  """All values starting with the given string."""
  scope_starts_with: String

  """All values not starting with the given string."""
  scope_not_starts_with: String

  """All values ending with the given string."""
  scope_ends_with: String

  """All values not ending with the given string."""
  scope_not_ends_with: String
  roles_every: RoleWhereInput
  roles_some: RoleWhereInput
  roles_none: RoleWhereInput
}

input PermissionWhereUniqueInput {
  id: UUID
}

enum PrismaDatabase {
  default
}

type Query {
  emails(where: EmailWhereInput, orderBy: EmailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Email]!
  inviteTokens(where: InviteTokenWhereInput, orderBy: InviteTokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InviteToken]!
  localCredentials(where: LocalCredentialWhereInput, orderBy: LocalCredentialOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LocalCredential]!
  oauthCredentials(where: OauthCredentialWhereInput, orderBy: OauthCredentialOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OauthCredential]!
  sessionRefreshTokens(where: SessionRefreshTokenWhereInput, orderBy: SessionRefreshTokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SessionRefreshToken]!
  userGroups(where: UserGroupWhereInput, orderBy: UserGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserGroup]!
  groupProperties(where: GroupPropertyWhereInput, orderBy: GroupPropertyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GroupProperty]!
  userProperties(where: UserPropertyWhereInput, orderBy: UserPropertyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserProperty]!
  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role]!
  permissions(where: PermissionWhereInput, orderBy: PermissionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Permission]!
  serviceAccounts(where: ServiceAccountWhereInput, orderBy: ServiceAccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ServiceAccount]!
  userWorkspaces(where: UserWorkspaceWhereInput, orderBy: UserWorkspaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserWorkspace]!
  workspaceProperties(where: WorkspacePropertyWhereInput, orderBy: WorkspacePropertyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkspaceProperty]!
  deployments(where: DeploymentWhereInput, orderBy: DeploymentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Deployment]!
  deploymentProperties(where: DeploymentPropertyWhereInput, orderBy: DeploymentPropertyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DeploymentProperty]!
  systemSettings(where: SystemSettingWhereInput, orderBy: SystemSettingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SystemSetting]!
  workspaces(where: WorkspaceWhereInput, orderBy: WorkspaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Workspace]!
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  email(where: EmailWhereUniqueInput!): Email
  inviteToken(where: InviteTokenWhereUniqueInput!): InviteToken
  localCredential(where: LocalCredentialWhereUniqueInput!): LocalCredential
  oauthCredential(where: OauthCredentialWhereUniqueInput!): OauthCredential
  sessionRefreshToken(where: SessionRefreshTokenWhereUniqueInput!): SessionRefreshToken
  userGroup(where: UserGroupWhereUniqueInput!): UserGroup
  groupProperty(where: GroupPropertyWhereUniqueInput!): GroupProperty
  userProperty(where: UserPropertyWhereUniqueInput!): UserProperty
  role(where: RoleWhereUniqueInput!): Role
  permission(where: PermissionWhereUniqueInput!): Permission
  serviceAccount(where: ServiceAccountWhereUniqueInput!): ServiceAccount
  userWorkspace(where: UserWorkspaceWhereUniqueInput!): UserWorkspace
  workspaceProperty(where: WorkspacePropertyWhereUniqueInput!): WorkspaceProperty
  deployment(where: DeploymentWhereUniqueInput!): Deployment
  deploymentProperty(where: DeploymentPropertyWhereUniqueInput!): DeploymentProperty
  systemSetting(where: SystemSettingWhereUniqueInput!): SystemSetting
  workspace(where: WorkspaceWhereUniqueInput!): Workspace
  group(where: GroupWhereUniqueInput!): Group
  user(where: UserWhereUniqueInput!): User
  emailsConnection(where: EmailWhereInput, orderBy: EmailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EmailConnection!
  inviteTokensConnection(where: InviteTokenWhereInput, orderBy: InviteTokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InviteTokenConnection!
  localCredentialsConnection(where: LocalCredentialWhereInput, orderBy: LocalCredentialOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LocalCredentialConnection!
  oauthCredentialsConnection(where: OauthCredentialWhereInput, orderBy: OauthCredentialOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OauthCredentialConnection!
  sessionRefreshTokensConnection(where: SessionRefreshTokenWhereInput, orderBy: SessionRefreshTokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SessionRefreshTokenConnection!
  userGroupsConnection(where: UserGroupWhereInput, orderBy: UserGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserGroupConnection!
  groupPropertiesConnection(where: GroupPropertyWhereInput, orderBy: GroupPropertyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GroupPropertyConnection!
  userPropertiesConnection(where: UserPropertyWhereInput, orderBy: UserPropertyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserPropertyConnection!
  rolesConnection(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoleConnection!
  permissionsConnection(where: PermissionWhereInput, orderBy: PermissionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PermissionConnection!
  serviceAccountsConnection(where: ServiceAccountWhereInput, orderBy: ServiceAccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ServiceAccountConnection!
  userWorkspacesConnection(where: UserWorkspaceWhereInput, orderBy: UserWorkspaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserWorkspaceConnection!
  workspacePropertiesConnection(where: WorkspacePropertyWhereInput, orderBy: WorkspacePropertyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkspacePropertyConnection!
  deploymentsConnection(where: DeploymentWhereInput, orderBy: DeploymentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DeploymentConnection!
  deploymentPropertiesConnection(where: DeploymentPropertyWhereInput, orderBy: DeploymentPropertyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DeploymentPropertyConnection!
  systemSettingsConnection(where: SystemSettingWhereInput, orderBy: SystemSettingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SystemSettingConnection!
  workspacesConnection(where: WorkspaceWhereInput, orderBy: WorkspaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkspaceConnection!
  groupsConnection(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GroupConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Role {
  id: UUID!
  category: String
  entityType: String
  entityId: UUID
  label: String
  scope: String
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group!]
  permissions(where: PermissionWhereInput, orderBy: PermissionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Permission!]
  serviceAccounts(where: ServiceAccountWhereInput, orderBy: ServiceAccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ServiceAccount!]
}

"""A connection to a list of items."""
type RoleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RoleEdge]!
  aggregate: AggregateRole!
}

input RoleCreateInput {
  category: String
  entityType: String
  entityId: UUID
  label: String
  scope: String
  groups: GroupCreateManyWithoutRolesInput
  permissions: PermissionCreateManyWithoutRolesInput
  serviceAccounts: ServiceAccountCreateManyWithoutRolesInput
}

input RoleCreateManyWithoutGroupsInput {
  create: [RoleCreateWithoutGroupsInput!]
  connect: [RoleWhereUniqueInput!]
}

input RoleCreateManyWithoutPermissionsInput {
  create: [RoleCreateWithoutPermissionsInput!]
  connect: [RoleWhereUniqueInput!]
}

input RoleCreateManyWithoutServiceAccountsInput {
  create: [RoleCreateWithoutServiceAccountsInput!]
  connect: [RoleWhereUniqueInput!]
}

input RoleCreateWithoutGroupsInput {
  category: String
  entityType: String
  entityId: UUID
  label: String
  scope: String
  permissions: PermissionCreateManyWithoutRolesInput
  serviceAccounts: ServiceAccountCreateManyWithoutRolesInput
}

input RoleCreateWithoutPermissionsInput {
  category: String
  entityType: String
  entityId: UUID
  label: String
  scope: String
  groups: GroupCreateManyWithoutRolesInput
  serviceAccounts: ServiceAccountCreateManyWithoutRolesInput
}

input RoleCreateWithoutServiceAccountsInput {
  category: String
  entityType: String
  entityId: UUID
  label: String
  scope: String
  groups: GroupCreateManyWithoutRolesInput
  permissions: PermissionCreateManyWithoutRolesInput
}

"""An edge in a connection."""
type RoleEdge {
  """The item at the end of the edge."""
  node: Role!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RoleOrderByInput {
  id_ASC
  id_DESC
  category_ASC
  category_DESC
  entityType_ASC
  entityType_DESC
  entityId_ASC
  entityId_DESC
  label_ASC
  label_DESC
  scope_ASC
  scope_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RolePreviousValues {
  id: UUID!
  category: String
  entityType: String
  entityId: UUID
  label: String
  scope: String
}

type RoleSubscriptionPayload {
  mutation: MutationType!
  node: Role
  updatedFields: [String!]
  previousValues: RolePreviousValues
}

input RoleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RoleWhereInput
}

input RoleUpdateInput {
  category: String
  entityType: String
  entityId: UUID
  label: String
  scope: String
  groups: GroupUpdateManyWithoutRolesInput
  permissions: PermissionUpdateManyWithoutRolesInput
  serviceAccounts: ServiceAccountUpdateManyWithoutRolesInput
}

input RoleUpdateManyMutationInput {
  category: String
  entityType: String
  entityId: UUID
  label: String
  scope: String
}

input RoleUpdateManyWithoutGroupsInput {
  create: [RoleCreateWithoutGroupsInput!]
  connect: [RoleWhereUniqueInput!]
  disconnect: [RoleWhereUniqueInput!]
  delete: [RoleWhereUniqueInput!]
  update: [RoleUpdateWithWhereUniqueWithoutGroupsInput!]
  upsert: [RoleUpsertWithWhereUniqueWithoutGroupsInput!]
}

input RoleUpdateManyWithoutPermissionsInput {
  create: [RoleCreateWithoutPermissionsInput!]
  connect: [RoleWhereUniqueInput!]
  disconnect: [RoleWhereUniqueInput!]
  delete: [RoleWhereUniqueInput!]
  update: [RoleUpdateWithWhereUniqueWithoutPermissionsInput!]
  upsert: [RoleUpsertWithWhereUniqueWithoutPermissionsInput!]
}

input RoleUpdateManyWithoutServiceAccountsInput {
  create: [RoleCreateWithoutServiceAccountsInput!]
  connect: [RoleWhereUniqueInput!]
  disconnect: [RoleWhereUniqueInput!]
  delete: [RoleWhereUniqueInput!]
  update: [RoleUpdateWithWhereUniqueWithoutServiceAccountsInput!]
  upsert: [RoleUpsertWithWhereUniqueWithoutServiceAccountsInput!]
}

input RoleUpdateWithoutGroupsDataInput {
  category: String
  entityType: String
  entityId: UUID
  label: String
  scope: String
  permissions: PermissionUpdateManyWithoutRolesInput
  serviceAccounts: ServiceAccountUpdateManyWithoutRolesInput
}

input RoleUpdateWithoutPermissionsDataInput {
  category: String
  entityType: String
  entityId: UUID
  label: String
  scope: String
  groups: GroupUpdateManyWithoutRolesInput
  serviceAccounts: ServiceAccountUpdateManyWithoutRolesInput
}

input RoleUpdateWithoutServiceAccountsDataInput {
  category: String
  entityType: String
  entityId: UUID
  label: String
  scope: String
  groups: GroupUpdateManyWithoutRolesInput
  permissions: PermissionUpdateManyWithoutRolesInput
}

input RoleUpdateWithWhereUniqueWithoutGroupsInput {
  where: RoleWhereUniqueInput!
  data: RoleUpdateWithoutGroupsDataInput!
}

input RoleUpdateWithWhereUniqueWithoutPermissionsInput {
  where: RoleWhereUniqueInput!
  data: RoleUpdateWithoutPermissionsDataInput!
}

input RoleUpdateWithWhereUniqueWithoutServiceAccountsInput {
  where: RoleWhereUniqueInput!
  data: RoleUpdateWithoutServiceAccountsDataInput!
}

input RoleUpsertWithWhereUniqueWithoutGroupsInput {
  where: RoleWhereUniqueInput!
  update: RoleUpdateWithoutGroupsDataInput!
  create: RoleCreateWithoutGroupsInput!
}

input RoleUpsertWithWhereUniqueWithoutPermissionsInput {
  where: RoleWhereUniqueInput!
  update: RoleUpdateWithoutPermissionsDataInput!
  create: RoleCreateWithoutPermissionsInput!
}

input RoleUpsertWithWhereUniqueWithoutServiceAccountsInput {
  where: RoleWhereUniqueInput!
  update: RoleUpdateWithoutServiceAccountsDataInput!
  create: RoleCreateWithoutServiceAccountsInput!
}

input RoleWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleWhereInput!]
  category: String

  """All values that are not equal to given value."""
  category_not: String

  """All values that are contained in given list."""
  category_in: [String!]

  """All values that are not contained in given list."""
  category_not_in: [String!]

  """All values less than the given value."""
  category_lt: String

  """All values less than or equal the given value."""
  category_lte: String

  """All values greater than the given value."""
  category_gt: String

  """All values greater than or equal the given value."""
  category_gte: String

  """All values containing the given string."""
  category_contains: String

  """All values not containing the given string."""
  category_not_contains: String

  """All values starting with the given string."""
  category_starts_with: String

  """All values not starting with the given string."""
  category_not_starts_with: String

  """All values ending with the given string."""
  category_ends_with: String

  """All values not ending with the given string."""
  category_not_ends_with: String
  entityType: String

  """All values that are not equal to given value."""
  entityType_not: String

  """All values that are contained in given list."""
  entityType_in: [String!]

  """All values that are not contained in given list."""
  entityType_not_in: [String!]

  """All values less than the given value."""
  entityType_lt: String

  """All values less than or equal the given value."""
  entityType_lte: String

  """All values greater than the given value."""
  entityType_gt: String

  """All values greater than or equal the given value."""
  entityType_gte: String

  """All values containing the given string."""
  entityType_contains: String

  """All values not containing the given string."""
  entityType_not_contains: String

  """All values starting with the given string."""
  entityType_starts_with: String

  """All values not starting with the given string."""
  entityType_not_starts_with: String

  """All values ending with the given string."""
  entityType_ends_with: String

  """All values not ending with the given string."""
  entityType_not_ends_with: String
  label: String

  """All values that are not equal to given value."""
  label_not: String

  """All values that are contained in given list."""
  label_in: [String!]

  """All values that are not contained in given list."""
  label_not_in: [String!]

  """All values less than the given value."""
  label_lt: String

  """All values less than or equal the given value."""
  label_lte: String

  """All values greater than the given value."""
  label_gt: String

  """All values greater than or equal the given value."""
  label_gte: String

  """All values containing the given string."""
  label_contains: String

  """All values not containing the given string."""
  label_not_contains: String

  """All values starting with the given string."""
  label_starts_with: String

  """All values not starting with the given string."""
  label_not_starts_with: String

  """All values ending with the given string."""
  label_ends_with: String

  """All values not ending with the given string."""
  label_not_ends_with: String
  scope: String

  """All values that are not equal to given value."""
  scope_not: String

  """All values that are contained in given list."""
  scope_in: [String!]

  """All values that are not contained in given list."""
  scope_not_in: [String!]

  """All values less than the given value."""
  scope_lt: String

  """All values less than or equal the given value."""
  scope_lte: String

  """All values greater than the given value."""
  scope_gt: String

  """All values greater than or equal the given value."""
  scope_gte: String

  """All values containing the given string."""
  scope_contains: String

  """All values not containing the given string."""
  scope_not_contains: String

  """All values starting with the given string."""
  scope_starts_with: String

  """All values not starting with the given string."""
  scope_not_starts_with: String

  """All values ending with the given string."""
  scope_ends_with: String

  """All values not ending with the given string."""
  scope_not_ends_with: String
  groups_every: GroupWhereInput
  groups_some: GroupWhereInput
  groups_none: GroupWhereInput
  permissions_every: PermissionWhereInput
  permissions_some: PermissionWhereInput
  permissions_none: PermissionWhereInput
  serviceAccounts_every: ServiceAccountWhereInput
  serviceAccounts_some: ServiceAccountWhereInput
  serviceAccounts_none: ServiceAccountWhereInput
}

input RoleWhereUniqueInput {
  id: UUID
  entityType: String
  entityId: UUID
  label: String
}

type ServiceAccount {
  id: UUID!
  active: Boolean
  api_key: String
  category: String
  entity_type: String
  entity_uuid: UUID
  label: String
  lastUsedAt: DateTime
  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role!]
}

"""A connection to a list of items."""
type ServiceAccountConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ServiceAccountEdge]!
  aggregate: AggregateServiceAccount!
}

input ServiceAccountCreateInput {
  active: Boolean
  api_key: String
  category: String
  entity_type: String
  entity_uuid: UUID
  label: String
  lastUsedAt: DateTime
  roles: RoleCreateManyWithoutServiceAccountsInput
}

input ServiceAccountCreateManyWithoutRolesInput {
  create: [ServiceAccountCreateWithoutRolesInput!]
  connect: [ServiceAccountWhereUniqueInput!]
}

input ServiceAccountCreateWithoutRolesInput {
  active: Boolean
  api_key: String
  category: String
  entity_type: String
  entity_uuid: UUID
  label: String
  lastUsedAt: DateTime
}

"""An edge in a connection."""
type ServiceAccountEdge {
  """The item at the end of the edge."""
  node: ServiceAccount!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ServiceAccountOrderByInput {
  id_ASC
  id_DESC
  active_ASC
  active_DESC
  api_key_ASC
  api_key_DESC
  category_ASC
  category_DESC
  entity_type_ASC
  entity_type_DESC
  entity_uuid_ASC
  entity_uuid_DESC
  label_ASC
  label_DESC
  lastUsedAt_ASC
  lastUsedAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ServiceAccountPreviousValues {
  id: UUID!
  active: Boolean
  api_key: String
  category: String
  entity_type: String
  entity_uuid: UUID
  label: String
  lastUsedAt: DateTime
}

type ServiceAccountSubscriptionPayload {
  mutation: MutationType!
  node: ServiceAccount
  updatedFields: [String!]
  previousValues: ServiceAccountPreviousValues
}

input ServiceAccountSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ServiceAccountSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ServiceAccountSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ServiceAccountSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ServiceAccountWhereInput
}

input ServiceAccountUpdateInput {
  active: Boolean
  api_key: String
  category: String
  entity_type: String
  entity_uuid: UUID
  label: String
  lastUsedAt: DateTime
  roles: RoleUpdateManyWithoutServiceAccountsInput
}

input ServiceAccountUpdateManyMutationInput {
  active: Boolean
  api_key: String
  category: String
  entity_type: String
  entity_uuid: UUID
  label: String
  lastUsedAt: DateTime
}

input ServiceAccountUpdateManyWithoutRolesInput {
  create: [ServiceAccountCreateWithoutRolesInput!]
  connect: [ServiceAccountWhereUniqueInput!]
  disconnect: [ServiceAccountWhereUniqueInput!]
  delete: [ServiceAccountWhereUniqueInput!]
  update: [ServiceAccountUpdateWithWhereUniqueWithoutRolesInput!]
  upsert: [ServiceAccountUpsertWithWhereUniqueWithoutRolesInput!]
}

input ServiceAccountUpdateWithoutRolesDataInput {
  active: Boolean
  api_key: String
  category: String
  entity_type: String
  entity_uuid: UUID
  label: String
  lastUsedAt: DateTime
}

input ServiceAccountUpdateWithWhereUniqueWithoutRolesInput {
  where: ServiceAccountWhereUniqueInput!
  data: ServiceAccountUpdateWithoutRolesDataInput!
}

input ServiceAccountUpsertWithWhereUniqueWithoutRolesInput {
  where: ServiceAccountWhereUniqueInput!
  update: ServiceAccountUpdateWithoutRolesDataInput!
  create: ServiceAccountCreateWithoutRolesInput!
}

input ServiceAccountWhereInput {
  """Logical AND on all given filters."""
  AND: [ServiceAccountWhereInput!]

  """Logical OR on all given filters."""
  OR: [ServiceAccountWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ServiceAccountWhereInput!]
  active: Boolean

  """All values that are not equal to given value."""
  active_not: Boolean
  api_key: String

  """All values that are not equal to given value."""
  api_key_not: String

  """All values that are contained in given list."""
  api_key_in: [String!]

  """All values that are not contained in given list."""
  api_key_not_in: [String!]

  """All values less than the given value."""
  api_key_lt: String

  """All values less than or equal the given value."""
  api_key_lte: String

  """All values greater than the given value."""
  api_key_gt: String

  """All values greater than or equal the given value."""
  api_key_gte: String

  """All values containing the given string."""
  api_key_contains: String

  """All values not containing the given string."""
  api_key_not_contains: String

  """All values starting with the given string."""
  api_key_starts_with: String

  """All values not starting with the given string."""
  api_key_not_starts_with: String

  """All values ending with the given string."""
  api_key_ends_with: String

  """All values not ending with the given string."""
  api_key_not_ends_with: String
  category: String

  """All values that are not equal to given value."""
  category_not: String

  """All values that are contained in given list."""
  category_in: [String!]

  """All values that are not contained in given list."""
  category_not_in: [String!]

  """All values less than the given value."""
  category_lt: String

  """All values less than or equal the given value."""
  category_lte: String

  """All values greater than the given value."""
  category_gt: String

  """All values greater than or equal the given value."""
  category_gte: String

  """All values containing the given string."""
  category_contains: String

  """All values not containing the given string."""
  category_not_contains: String

  """All values starting with the given string."""
  category_starts_with: String

  """All values not starting with the given string."""
  category_not_starts_with: String

  """All values ending with the given string."""
  category_ends_with: String

  """All values not ending with the given string."""
  category_not_ends_with: String
  entity_type: String

  """All values that are not equal to given value."""
  entity_type_not: String

  """All values that are contained in given list."""
  entity_type_in: [String!]

  """All values that are not contained in given list."""
  entity_type_not_in: [String!]

  """All values less than the given value."""
  entity_type_lt: String

  """All values less than or equal the given value."""
  entity_type_lte: String

  """All values greater than the given value."""
  entity_type_gt: String

  """All values greater than or equal the given value."""
  entity_type_gte: String

  """All values containing the given string."""
  entity_type_contains: String

  """All values not containing the given string."""
  entity_type_not_contains: String

  """All values starting with the given string."""
  entity_type_starts_with: String

  """All values not starting with the given string."""
  entity_type_not_starts_with: String

  """All values ending with the given string."""
  entity_type_ends_with: String

  """All values not ending with the given string."""
  entity_type_not_ends_with: String
  label: String

  """All values that are not equal to given value."""
  label_not: String

  """All values that are contained in given list."""
  label_in: [String!]

  """All values that are not contained in given list."""
  label_not_in: [String!]

  """All values less than the given value."""
  label_lt: String

  """All values less than or equal the given value."""
  label_lte: String

  """All values greater than the given value."""
  label_gt: String

  """All values greater than or equal the given value."""
  label_gte: String

  """All values containing the given string."""
  label_contains: String

  """All values not containing the given string."""
  label_not_contains: String

  """All values starting with the given string."""
  label_starts_with: String

  """All values not starting with the given string."""
  label_not_starts_with: String

  """All values ending with the given string."""
  label_ends_with: String

  """All values not ending with the given string."""
  label_not_ends_with: String
  lastUsedAt: DateTime

  """All values that are not equal to given value."""
  lastUsedAt_not: DateTime

  """All values that are contained in given list."""
  lastUsedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  lastUsedAt_not_in: [DateTime!]

  """All values less than the given value."""
  lastUsedAt_lt: DateTime

  """All values less than or equal the given value."""
  lastUsedAt_lte: DateTime

  """All values greater than the given value."""
  lastUsedAt_gt: DateTime

  """All values greater than or equal the given value."""
  lastUsedAt_gte: DateTime
  roles_every: RoleWhereInput
  roles_some: RoleWhereInput
  roles_none: RoleWhereInput
}

input ServiceAccountWhereUniqueInput {
  id: UUID
}

type SessionRefreshToken {
  id: UUID!
  expiresAt: DateTime
  active: Boolean
  metadata: String
  refreshToken: String
  refreshedAt: DateTime
  source: String
  user: User
}

"""A connection to a list of items."""
type SessionRefreshTokenConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SessionRefreshTokenEdge]!
  aggregate: AggregateSessionRefreshToken!
}

input SessionRefreshTokenCreateInput {
  expiresAt: DateTime
  active: Boolean
  metadata: String
  refreshToken: String
  refreshedAt: DateTime
  source: String
  user: UserCreateOneWithoutSessionRefreshTokensInput
}

input SessionRefreshTokenCreateManyWithoutUserInput {
  create: [SessionRefreshTokenCreateWithoutUserInput!]
  connect: [SessionRefreshTokenWhereUniqueInput!]
}

input SessionRefreshTokenCreateWithoutUserInput {
  expiresAt: DateTime
  active: Boolean
  metadata: String
  refreshToken: String
  refreshedAt: DateTime
  source: String
}

"""An edge in a connection."""
type SessionRefreshTokenEdge {
  """The item at the end of the edge."""
  node: SessionRefreshToken!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SessionRefreshTokenOrderByInput {
  id_ASC
  id_DESC
  expiresAt_ASC
  expiresAt_DESC
  active_ASC
  active_DESC
  metadata_ASC
  metadata_DESC
  refreshToken_ASC
  refreshToken_DESC
  refreshedAt_ASC
  refreshedAt_DESC
  source_ASC
  source_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SessionRefreshTokenPreviousValues {
  id: UUID!
  expiresAt: DateTime
  active: Boolean
  metadata: String
  refreshToken: String
  refreshedAt: DateTime
  source: String
}

type SessionRefreshTokenSubscriptionPayload {
  mutation: MutationType!
  node: SessionRefreshToken
  updatedFields: [String!]
  previousValues: SessionRefreshTokenPreviousValues
}

input SessionRefreshTokenSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SessionRefreshTokenSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SessionRefreshTokenSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SessionRefreshTokenSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SessionRefreshTokenWhereInput
}

input SessionRefreshTokenUpdateInput {
  expiresAt: DateTime
  active: Boolean
  metadata: String
  refreshToken: String
  refreshedAt: DateTime
  source: String
  user: UserUpdateOneWithoutSessionRefreshTokensInput
}

input SessionRefreshTokenUpdateManyMutationInput {
  expiresAt: DateTime
  active: Boolean
  metadata: String
  refreshToken: String
  refreshedAt: DateTime
  source: String
}

input SessionRefreshTokenUpdateManyWithoutUserInput {
  create: [SessionRefreshTokenCreateWithoutUserInput!]
  connect: [SessionRefreshTokenWhereUniqueInput!]
  disconnect: [SessionRefreshTokenWhereUniqueInput!]
  delete: [SessionRefreshTokenWhereUniqueInput!]
  update: [SessionRefreshTokenUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [SessionRefreshTokenUpsertWithWhereUniqueWithoutUserInput!]
}

input SessionRefreshTokenUpdateWithoutUserDataInput {
  expiresAt: DateTime
  active: Boolean
  metadata: String
  refreshToken: String
  refreshedAt: DateTime
  source: String
}

input SessionRefreshTokenUpdateWithWhereUniqueWithoutUserInput {
  where: SessionRefreshTokenWhereUniqueInput!
  data: SessionRefreshTokenUpdateWithoutUserDataInput!
}

input SessionRefreshTokenUpsertWithWhereUniqueWithoutUserInput {
  where: SessionRefreshTokenWhereUniqueInput!
  update: SessionRefreshTokenUpdateWithoutUserDataInput!
  create: SessionRefreshTokenCreateWithoutUserInput!
}

input SessionRefreshTokenWhereInput {
  """Logical AND on all given filters."""
  AND: [SessionRefreshTokenWhereInput!]

  """Logical OR on all given filters."""
  OR: [SessionRefreshTokenWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SessionRefreshTokenWhereInput!]
  expiresAt: DateTime

  """All values that are not equal to given value."""
  expiresAt_not: DateTime

  """All values that are contained in given list."""
  expiresAt_in: [DateTime!]

  """All values that are not contained in given list."""
  expiresAt_not_in: [DateTime!]

  """All values less than the given value."""
  expiresAt_lt: DateTime

  """All values less than or equal the given value."""
  expiresAt_lte: DateTime

  """All values greater than the given value."""
  expiresAt_gt: DateTime

  """All values greater than or equal the given value."""
  expiresAt_gte: DateTime
  active: Boolean

  """All values that are not equal to given value."""
  active_not: Boolean
  metadata: String

  """All values that are not equal to given value."""
  metadata_not: String

  """All values that are contained in given list."""
  metadata_in: [String!]

  """All values that are not contained in given list."""
  metadata_not_in: [String!]

  """All values less than the given value."""
  metadata_lt: String

  """All values less than or equal the given value."""
  metadata_lte: String

  """All values greater than the given value."""
  metadata_gt: String

  """All values greater than or equal the given value."""
  metadata_gte: String

  """All values containing the given string."""
  metadata_contains: String

  """All values not containing the given string."""
  metadata_not_contains: String

  """All values starting with the given string."""
  metadata_starts_with: String

  """All values not starting with the given string."""
  metadata_not_starts_with: String

  """All values ending with the given string."""
  metadata_ends_with: String

  """All values not ending with the given string."""
  metadata_not_ends_with: String
  refreshToken: String

  """All values that are not equal to given value."""
  refreshToken_not: String

  """All values that are contained in given list."""
  refreshToken_in: [String!]

  """All values that are not contained in given list."""
  refreshToken_not_in: [String!]

  """All values less than the given value."""
  refreshToken_lt: String

  """All values less than or equal the given value."""
  refreshToken_lte: String

  """All values greater than the given value."""
  refreshToken_gt: String

  """All values greater than or equal the given value."""
  refreshToken_gte: String

  """All values containing the given string."""
  refreshToken_contains: String

  """All values not containing the given string."""
  refreshToken_not_contains: String

  """All values starting with the given string."""
  refreshToken_starts_with: String

  """All values not starting with the given string."""
  refreshToken_not_starts_with: String

  """All values ending with the given string."""
  refreshToken_ends_with: String

  """All values not ending with the given string."""
  refreshToken_not_ends_with: String
  refreshedAt: DateTime

  """All values that are not equal to given value."""
  refreshedAt_not: DateTime

  """All values that are contained in given list."""
  refreshedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  refreshedAt_not_in: [DateTime!]

  """All values less than the given value."""
  refreshedAt_lt: DateTime

  """All values less than or equal the given value."""
  refreshedAt_lte: DateTime

  """All values greater than the given value."""
  refreshedAt_gt: DateTime

  """All values greater than or equal the given value."""
  refreshedAt_gte: DateTime
  source: String

  """All values that are not equal to given value."""
  source_not: String

  """All values that are contained in given list."""
  source_in: [String!]

  """All values that are not contained in given list."""
  source_not_in: [String!]

  """All values less than the given value."""
  source_lt: String

  """All values less than or equal the given value."""
  source_lte: String

  """All values greater than the given value."""
  source_gt: String

  """All values greater than or equal the given value."""
  source_gte: String

  """All values containing the given string."""
  source_contains: String

  """All values not containing the given string."""
  source_not_contains: String

  """All values starting with the given string."""
  source_starts_with: String

  """All values not starting with the given string."""
  source_not_starts_with: String

  """All values ending with the given string."""
  source_ends_with: String

  """All values not ending with the given string."""
  source_not_ends_with: String
  user: UserWhereInput
}

input SessionRefreshTokenWhereUniqueInput {
  id: UUID
  refreshToken: String
}

type Subscription {
  email(where: EmailSubscriptionWhereInput): EmailSubscriptionPayload
  inviteToken(where: InviteTokenSubscriptionWhereInput): InviteTokenSubscriptionPayload
  localCredential(where: LocalCredentialSubscriptionWhereInput): LocalCredentialSubscriptionPayload
  oauthCredential(where: OauthCredentialSubscriptionWhereInput): OauthCredentialSubscriptionPayload
  sessionRefreshToken(where: SessionRefreshTokenSubscriptionWhereInput): SessionRefreshTokenSubscriptionPayload
  userGroup(where: UserGroupSubscriptionWhereInput): UserGroupSubscriptionPayload
  groupProperty(where: GroupPropertySubscriptionWhereInput): GroupPropertySubscriptionPayload
  userProperty(where: UserPropertySubscriptionWhereInput): UserPropertySubscriptionPayload
  role(where: RoleSubscriptionWhereInput): RoleSubscriptionPayload
  permission(where: PermissionSubscriptionWhereInput): PermissionSubscriptionPayload
  serviceAccount(where: ServiceAccountSubscriptionWhereInput): ServiceAccountSubscriptionPayload
  userWorkspace(where: UserWorkspaceSubscriptionWhereInput): UserWorkspaceSubscriptionPayload
  workspaceProperty(where: WorkspacePropertySubscriptionWhereInput): WorkspacePropertySubscriptionPayload
  deployment(where: DeploymentSubscriptionWhereInput): DeploymentSubscriptionPayload
  deploymentProperty(where: DeploymentPropertySubscriptionWhereInput): DeploymentPropertySubscriptionPayload
  systemSetting(where: SystemSettingSubscriptionWhereInput): SystemSettingSubscriptionPayload
  workspace(where: WorkspaceSubscriptionWhereInput): WorkspaceSubscriptionPayload
  group(where: GroupSubscriptionWhereInput): GroupSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type SystemSetting {
  id: UUID!
  category: String
  is_encrypted: Boolean
  value: String
}

"""A connection to a list of items."""
type SystemSettingConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SystemSettingEdge]!
  aggregate: AggregateSystemSetting!
}

input SystemSettingCreateInput {
  category: String
  is_encrypted: Boolean
  value: String
}

"""An edge in a connection."""
type SystemSettingEdge {
  """The item at the end of the edge."""
  node: SystemSetting!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SystemSettingOrderByInput {
  id_ASC
  id_DESC
  category_ASC
  category_DESC
  is_encrypted_ASC
  is_encrypted_DESC
  value_ASC
  value_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SystemSettingPreviousValues {
  id: UUID!
  category: String
  is_encrypted: Boolean
  value: String
}

type SystemSettingSubscriptionPayload {
  mutation: MutationType!
  node: SystemSetting
  updatedFields: [String!]
  previousValues: SystemSettingPreviousValues
}

input SystemSettingSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SystemSettingSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SystemSettingSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SystemSettingSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SystemSettingWhereInput
}

input SystemSettingUpdateInput {
  category: String
  is_encrypted: Boolean
  value: String
}

input SystemSettingUpdateManyMutationInput {
  category: String
  is_encrypted: Boolean
  value: String
}

input SystemSettingWhereInput {
  """Logical AND on all given filters."""
  AND: [SystemSettingWhereInput!]

  """Logical OR on all given filters."""
  OR: [SystemSettingWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SystemSettingWhereInput!]
  category: String

  """All values that are not equal to given value."""
  category_not: String

  """All values that are contained in given list."""
  category_in: [String!]

  """All values that are not contained in given list."""
  category_not_in: [String!]

  """All values less than the given value."""
  category_lt: String

  """All values less than or equal the given value."""
  category_lte: String

  """All values greater than the given value."""
  category_gt: String

  """All values greater than or equal the given value."""
  category_gte: String

  """All values containing the given string."""
  category_contains: String

  """All values not containing the given string."""
  category_not_contains: String

  """All values starting with the given string."""
  category_starts_with: String

  """All values not starting with the given string."""
  category_not_starts_with: String

  """All values ending with the given string."""
  category_ends_with: String

  """All values not ending with the given string."""
  category_not_ends_with: String
  is_encrypted: Boolean

  """All values that are not equal to given value."""
  is_encrypted_not: Boolean
  value: String

  """All values that are not equal to given value."""
  value_not: String

  """All values that are contained in given list."""
  value_in: [String!]

  """All values that are not contained in given list."""
  value_not_in: [String!]

  """All values less than the given value."""
  value_lt: String

  """All values less than or equal the given value."""
  value_lte: String

  """All values greater than the given value."""
  value_gt: String

  """All values greater than or equal the given value."""
  value_gte: String

  """All values containing the given string."""
  value_contains: String

  """All values not containing the given string."""
  value_not_contains: String

  """All values starting with the given string."""
  value_starts_with: String

  """All values not starting with the given string."""
  value_not_starts_with: String

  """All values ending with the given string."""
  value_ends_with: String

  """All values not ending with the given string."""
  value_not_ends_with: String
}

input SystemSettingWhereUniqueInput {
  id: UUID
}

type User {
  id: UUID!
  username: String
  emails(where: EmailWhereInput, orderBy: EmailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Email!]
  fullName: String
  inviteTokens(where: InviteTokenWhereInput, orderBy: InviteTokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InviteToken!]
  localCredentials(where: LocalCredentialWhereInput, orderBy: LocalCredentialOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LocalCredential!]
  oauthCredentials(where: OauthCredentialWhereInput, orderBy: OauthCredentialOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OauthCredential!]
  sessionRefreshTokens(where: SessionRefreshTokenWhereInput, orderBy: SessionRefreshTokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SessionRefreshToken!]
  status: String
  properties(where: UserPropertyWhereInput, orderBy: UserPropertyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserProperty!]
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group!]
  workspaces(where: WorkspaceWhereInput, orderBy: WorkspaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Workspace!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  username: String
  fullName: String
  status: String
  emails: EmailCreateManyWithoutUserInput
  inviteTokens: InviteTokenCreateManyWithoutUserInput
  localCredentials: LocalCredentialCreateManyWithoutUserInput
  oauthCredentials: OauthCredentialCreateManyWithoutUserInput
  sessionRefreshTokens: SessionRefreshTokenCreateManyWithoutUserInput
  properties: UserPropertyCreateManyWithoutUserInput
  groups: GroupCreateManyWithoutUsersInput
  workspaces: WorkspaceCreateManyWithoutUsersInput
}

input UserCreateManyWithoutGroupsInput {
  create: [UserCreateWithoutGroupsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutWorkspacesInput {
  create: [UserCreateWithoutWorkspacesInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutEmailsInput {
  create: UserCreateWithoutEmailsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutInviteTokensInput {
  create: UserCreateWithoutInviteTokensInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLocalCredentialsInput {
  create: UserCreateWithoutLocalCredentialsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutOauthCredentialsInput {
  create: UserCreateWithoutOauthCredentialsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPropertiesInput {
  create: UserCreateWithoutPropertiesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSessionRefreshTokensInput {
  create: UserCreateWithoutSessionRefreshTokensInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutEmailsInput {
  username: String
  fullName: String
  status: String
  inviteTokens: InviteTokenCreateManyWithoutUserInput
  localCredentials: LocalCredentialCreateManyWithoutUserInput
  oauthCredentials: OauthCredentialCreateManyWithoutUserInput
  sessionRefreshTokens: SessionRefreshTokenCreateManyWithoutUserInput
  properties: UserPropertyCreateManyWithoutUserInput
  groups: GroupCreateManyWithoutUsersInput
  workspaces: WorkspaceCreateManyWithoutUsersInput
}

input UserCreateWithoutGroupsInput {
  username: String
  fullName: String
  status: String
  emails: EmailCreateManyWithoutUserInput
  inviteTokens: InviteTokenCreateManyWithoutUserInput
  localCredentials: LocalCredentialCreateManyWithoutUserInput
  oauthCredentials: OauthCredentialCreateManyWithoutUserInput
  sessionRefreshTokens: SessionRefreshTokenCreateManyWithoutUserInput
  properties: UserPropertyCreateManyWithoutUserInput
  workspaces: WorkspaceCreateManyWithoutUsersInput
}

input UserCreateWithoutInviteTokensInput {
  username: String
  fullName: String
  status: String
  emails: EmailCreateManyWithoutUserInput
  localCredentials: LocalCredentialCreateManyWithoutUserInput
  oauthCredentials: OauthCredentialCreateManyWithoutUserInput
  sessionRefreshTokens: SessionRefreshTokenCreateManyWithoutUserInput
  properties: UserPropertyCreateManyWithoutUserInput
  groups: GroupCreateManyWithoutUsersInput
  workspaces: WorkspaceCreateManyWithoutUsersInput
}

input UserCreateWithoutLocalCredentialsInput {
  username: String
  fullName: String
  status: String
  emails: EmailCreateManyWithoutUserInput
  inviteTokens: InviteTokenCreateManyWithoutUserInput
  oauthCredentials: OauthCredentialCreateManyWithoutUserInput
  sessionRefreshTokens: SessionRefreshTokenCreateManyWithoutUserInput
  properties: UserPropertyCreateManyWithoutUserInput
  groups: GroupCreateManyWithoutUsersInput
  workspaces: WorkspaceCreateManyWithoutUsersInput
}

input UserCreateWithoutOauthCredentialsInput {
  username: String
  fullName: String
  status: String
  emails: EmailCreateManyWithoutUserInput
  inviteTokens: InviteTokenCreateManyWithoutUserInput
  localCredentials: LocalCredentialCreateManyWithoutUserInput
  sessionRefreshTokens: SessionRefreshTokenCreateManyWithoutUserInput
  properties: UserPropertyCreateManyWithoutUserInput
  groups: GroupCreateManyWithoutUsersInput
  workspaces: WorkspaceCreateManyWithoutUsersInput
}

input UserCreateWithoutPropertiesInput {
  username: String
  fullName: String
  status: String
  emails: EmailCreateManyWithoutUserInput
  inviteTokens: InviteTokenCreateManyWithoutUserInput
  localCredentials: LocalCredentialCreateManyWithoutUserInput
  oauthCredentials: OauthCredentialCreateManyWithoutUserInput
  sessionRefreshTokens: SessionRefreshTokenCreateManyWithoutUserInput
  groups: GroupCreateManyWithoutUsersInput
  workspaces: WorkspaceCreateManyWithoutUsersInput
}

input UserCreateWithoutSessionRefreshTokensInput {
  username: String
  fullName: String
  status: String
  emails: EmailCreateManyWithoutUserInput
  inviteTokens: InviteTokenCreateManyWithoutUserInput
  localCredentials: LocalCredentialCreateManyWithoutUserInput
  oauthCredentials: OauthCredentialCreateManyWithoutUserInput
  properties: UserPropertyCreateManyWithoutUserInput
  groups: GroupCreateManyWithoutUsersInput
  workspaces: WorkspaceCreateManyWithoutUsersInput
}

input UserCreateWithoutWorkspacesInput {
  username: String
  fullName: String
  status: String
  emails: EmailCreateManyWithoutUserInput
  inviteTokens: InviteTokenCreateManyWithoutUserInput
  localCredentials: LocalCredentialCreateManyWithoutUserInput
  oauthCredentials: OauthCredentialCreateManyWithoutUserInput
  sessionRefreshTokens: SessionRefreshTokenCreateManyWithoutUserInput
  properties: UserPropertyCreateManyWithoutUserInput
  groups: GroupCreateManyWithoutUsersInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

type UserGroup {
  id: UUID!
  group: Group
  user: User
}

"""A connection to a list of items."""
type UserGroupConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserGroupEdge]!
  aggregate: AggregateUserGroup!
}

input UserGroupCreateInput {
  group: GroupCreateOneInput
  user: UserCreateOneInput
}

"""An edge in a connection."""
type UserGroupEdge {
  """The item at the end of the edge."""
  node: UserGroup!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserGroupOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserGroupPreviousValues {
  id: UUID!
}

type UserGroupSubscriptionPayload {
  mutation: MutationType!
  node: UserGroup
  updatedFields: [String!]
  previousValues: UserGroupPreviousValues
}

input UserGroupSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserGroupSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserGroupSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserGroupSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserGroupWhereInput
}

input UserGroupUpdateInput {
  group: GroupUpdateOneInput
  user: UserUpdateOneInput
}

input UserGroupWhereInput {
  """Logical AND on all given filters."""
  AND: [UserGroupWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserGroupWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserGroupWhereInput!]
  group: GroupWhereInput
  user: UserWhereInput
}

input UserGroupWhereUniqueInput {
  id: UUID
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  fullName_ASC
  fullName_DESC
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: UUID!
  username: String
  fullName: String
  status: String
}

type UserProperty {
  id: UUID!
  category: String
  key: String!
  value: String
  user: User
}

"""A connection to a list of items."""
type UserPropertyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserPropertyEdge]!
  aggregate: AggregateUserProperty!
}

input UserPropertyCreateInput {
  category: String
  key: String!
  value: String
  user: UserCreateOneWithoutPropertiesInput
}

input UserPropertyCreateManyWithoutUserInput {
  create: [UserPropertyCreateWithoutUserInput!]
  connect: [UserPropertyWhereUniqueInput!]
}

input UserPropertyCreateWithoutUserInput {
  category: String
  key: String!
  value: String
}

"""An edge in a connection."""
type UserPropertyEdge {
  """The item at the end of the edge."""
  node: UserProperty!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserPropertyOrderByInput {
  id_ASC
  id_DESC
  category_ASC
  category_DESC
  key_ASC
  key_DESC
  value_ASC
  value_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPropertyPreviousValues {
  id: UUID!
  category: String
  key: String!
  value: String
}

type UserPropertySubscriptionPayload {
  mutation: MutationType!
  node: UserProperty
  updatedFields: [String!]
  previousValues: UserPropertyPreviousValues
}

input UserPropertySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserPropertySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserPropertySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserPropertySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserPropertyWhereInput
}

input UserPropertyUpdateInput {
  category: String
  key: String
  value: String
  user: UserUpdateOneWithoutPropertiesInput
}

input UserPropertyUpdateManyMutationInput {
  category: String
  key: String
  value: String
}

input UserPropertyUpdateManyWithoutUserInput {
  create: [UserPropertyCreateWithoutUserInput!]
  connect: [UserPropertyWhereUniqueInput!]
  disconnect: [UserPropertyWhereUniqueInput!]
  delete: [UserPropertyWhereUniqueInput!]
  update: [UserPropertyUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [UserPropertyUpsertWithWhereUniqueWithoutUserInput!]
}

input UserPropertyUpdateWithoutUserDataInput {
  category: String
  key: String
  value: String
}

input UserPropertyUpdateWithWhereUniqueWithoutUserInput {
  where: UserPropertyWhereUniqueInput!
  data: UserPropertyUpdateWithoutUserDataInput!
}

input UserPropertyUpsertWithWhereUniqueWithoutUserInput {
  where: UserPropertyWhereUniqueInput!
  update: UserPropertyUpdateWithoutUserDataInput!
  create: UserPropertyCreateWithoutUserInput!
}

input UserPropertyWhereInput {
  """Logical AND on all given filters."""
  AND: [UserPropertyWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserPropertyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserPropertyWhereInput!]
  category: String

  """All values that are not equal to given value."""
  category_not: String

  """All values that are contained in given list."""
  category_in: [String!]

  """All values that are not contained in given list."""
  category_not_in: [String!]

  """All values less than the given value."""
  category_lt: String

  """All values less than or equal the given value."""
  category_lte: String

  """All values greater than the given value."""
  category_gt: String

  """All values greater than or equal the given value."""
  category_gte: String

  """All values containing the given string."""
  category_contains: String

  """All values not containing the given string."""
  category_not_contains: String

  """All values starting with the given string."""
  category_starts_with: String

  """All values not starting with the given string."""
  category_not_starts_with: String

  """All values ending with the given string."""
  category_ends_with: String

  """All values not ending with the given string."""
  category_not_ends_with: String
  key: String

  """All values that are not equal to given value."""
  key_not: String

  """All values that are contained in given list."""
  key_in: [String!]

  """All values that are not contained in given list."""
  key_not_in: [String!]

  """All values less than the given value."""
  key_lt: String

  """All values less than or equal the given value."""
  key_lte: String

  """All values greater than the given value."""
  key_gt: String

  """All values greater than or equal the given value."""
  key_gte: String

  """All values containing the given string."""
  key_contains: String

  """All values not containing the given string."""
  key_not_contains: String

  """All values starting with the given string."""
  key_starts_with: String

  """All values not starting with the given string."""
  key_not_starts_with: String

  """All values ending with the given string."""
  key_ends_with: String

  """All values not ending with the given string."""
  key_not_ends_with: String
  value: String

  """All values that are not equal to given value."""
  value_not: String

  """All values that are contained in given list."""
  value_in: [String!]

  """All values that are not contained in given list."""
  value_not_in: [String!]

  """All values less than the given value."""
  value_lt: String

  """All values less than or equal the given value."""
  value_lte: String

  """All values greater than the given value."""
  value_gt: String

  """All values greater than or equal the given value."""
  value_gte: String

  """All values containing the given string."""
  value_contains: String

  """All values not containing the given string."""
  value_not_contains: String

  """All values starting with the given string."""
  value_starts_with: String

  """All values not starting with the given string."""
  value_not_starts_with: String

  """All values ending with the given string."""
  value_ends_with: String

  """All values not ending with the given string."""
  value_not_ends_with: String
  user: UserWhereInput
}

input UserPropertyWhereUniqueInput {
  id: UUID
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  username: String
  fullName: String
  status: String
  emails: EmailUpdateManyWithoutUserInput
  inviteTokens: InviteTokenUpdateManyWithoutUserInput
  localCredentials: LocalCredentialUpdateManyWithoutUserInput
  oauthCredentials: OauthCredentialUpdateManyWithoutUserInput
  sessionRefreshTokens: SessionRefreshTokenUpdateManyWithoutUserInput
  properties: UserPropertyUpdateManyWithoutUserInput
  groups: GroupUpdateManyWithoutUsersInput
  workspaces: WorkspaceUpdateManyWithoutUsersInput
}

input UserUpdateInput {
  username: String
  fullName: String
  status: String
  emails: EmailUpdateManyWithoutUserInput
  inviteTokens: InviteTokenUpdateManyWithoutUserInput
  localCredentials: LocalCredentialUpdateManyWithoutUserInput
  oauthCredentials: OauthCredentialUpdateManyWithoutUserInput
  sessionRefreshTokens: SessionRefreshTokenUpdateManyWithoutUserInput
  properties: UserPropertyUpdateManyWithoutUserInput
  groups: GroupUpdateManyWithoutUsersInput
  workspaces: WorkspaceUpdateManyWithoutUsersInput
}

input UserUpdateManyMutationInput {
  username: String
  fullName: String
  status: String
}

input UserUpdateManyWithoutGroupsInput {
  create: [UserCreateWithoutGroupsInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutGroupsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutGroupsInput!]
}

input UserUpdateManyWithoutWorkspacesInput {
  create: [UserCreateWithoutWorkspacesInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutWorkspacesInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutWorkspacesInput!]
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneWithoutEmailsInput {
  create: UserCreateWithoutEmailsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutEmailsDataInput
  upsert: UserUpsertWithoutEmailsInput
}

input UserUpdateOneWithoutInviteTokensInput {
  create: UserCreateWithoutInviteTokensInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutInviteTokensDataInput
  upsert: UserUpsertWithoutInviteTokensInput
}

input UserUpdateOneWithoutLocalCredentialsInput {
  create: UserCreateWithoutLocalCredentialsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutLocalCredentialsDataInput
  upsert: UserUpsertWithoutLocalCredentialsInput
}

input UserUpdateOneWithoutOauthCredentialsInput {
  create: UserCreateWithoutOauthCredentialsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutOauthCredentialsDataInput
  upsert: UserUpsertWithoutOauthCredentialsInput
}

input UserUpdateOneWithoutPropertiesInput {
  create: UserCreateWithoutPropertiesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutPropertiesDataInput
  upsert: UserUpsertWithoutPropertiesInput
}

input UserUpdateOneWithoutSessionRefreshTokensInput {
  create: UserCreateWithoutSessionRefreshTokensInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutSessionRefreshTokensDataInput
  upsert: UserUpsertWithoutSessionRefreshTokensInput
}

input UserUpdateWithoutEmailsDataInput {
  username: String
  fullName: String
  status: String
  inviteTokens: InviteTokenUpdateManyWithoutUserInput
  localCredentials: LocalCredentialUpdateManyWithoutUserInput
  oauthCredentials: OauthCredentialUpdateManyWithoutUserInput
  sessionRefreshTokens: SessionRefreshTokenUpdateManyWithoutUserInput
  properties: UserPropertyUpdateManyWithoutUserInput
  groups: GroupUpdateManyWithoutUsersInput
  workspaces: WorkspaceUpdateManyWithoutUsersInput
}

input UserUpdateWithoutGroupsDataInput {
  username: String
  fullName: String
  status: String
  emails: EmailUpdateManyWithoutUserInput
  inviteTokens: InviteTokenUpdateManyWithoutUserInput
  localCredentials: LocalCredentialUpdateManyWithoutUserInput
  oauthCredentials: OauthCredentialUpdateManyWithoutUserInput
  sessionRefreshTokens: SessionRefreshTokenUpdateManyWithoutUserInput
  properties: UserPropertyUpdateManyWithoutUserInput
  workspaces: WorkspaceUpdateManyWithoutUsersInput
}

input UserUpdateWithoutInviteTokensDataInput {
  username: String
  fullName: String
  status: String
  emails: EmailUpdateManyWithoutUserInput
  localCredentials: LocalCredentialUpdateManyWithoutUserInput
  oauthCredentials: OauthCredentialUpdateManyWithoutUserInput
  sessionRefreshTokens: SessionRefreshTokenUpdateManyWithoutUserInput
  properties: UserPropertyUpdateManyWithoutUserInput
  groups: GroupUpdateManyWithoutUsersInput
  workspaces: WorkspaceUpdateManyWithoutUsersInput
}

input UserUpdateWithoutLocalCredentialsDataInput {
  username: String
  fullName: String
  status: String
  emails: EmailUpdateManyWithoutUserInput
  inviteTokens: InviteTokenUpdateManyWithoutUserInput
  oauthCredentials: OauthCredentialUpdateManyWithoutUserInput
  sessionRefreshTokens: SessionRefreshTokenUpdateManyWithoutUserInput
  properties: UserPropertyUpdateManyWithoutUserInput
  groups: GroupUpdateManyWithoutUsersInput
  workspaces: WorkspaceUpdateManyWithoutUsersInput
}

input UserUpdateWithoutOauthCredentialsDataInput {
  username: String
  fullName: String
  status: String
  emails: EmailUpdateManyWithoutUserInput
  inviteTokens: InviteTokenUpdateManyWithoutUserInput
  localCredentials: LocalCredentialUpdateManyWithoutUserInput
  sessionRefreshTokens: SessionRefreshTokenUpdateManyWithoutUserInput
  properties: UserPropertyUpdateManyWithoutUserInput
  groups: GroupUpdateManyWithoutUsersInput
  workspaces: WorkspaceUpdateManyWithoutUsersInput
}

input UserUpdateWithoutPropertiesDataInput {
  username: String
  fullName: String
  status: String
  emails: EmailUpdateManyWithoutUserInput
  inviteTokens: InviteTokenUpdateManyWithoutUserInput
  localCredentials: LocalCredentialUpdateManyWithoutUserInput
  oauthCredentials: OauthCredentialUpdateManyWithoutUserInput
  sessionRefreshTokens: SessionRefreshTokenUpdateManyWithoutUserInput
  groups: GroupUpdateManyWithoutUsersInput
  workspaces: WorkspaceUpdateManyWithoutUsersInput
}

input UserUpdateWithoutSessionRefreshTokensDataInput {
  username: String
  fullName: String
  status: String
  emails: EmailUpdateManyWithoutUserInput
  inviteTokens: InviteTokenUpdateManyWithoutUserInput
  localCredentials: LocalCredentialUpdateManyWithoutUserInput
  oauthCredentials: OauthCredentialUpdateManyWithoutUserInput
  properties: UserPropertyUpdateManyWithoutUserInput
  groups: GroupUpdateManyWithoutUsersInput
  workspaces: WorkspaceUpdateManyWithoutUsersInput
}

input UserUpdateWithoutWorkspacesDataInput {
  username: String
  fullName: String
  status: String
  emails: EmailUpdateManyWithoutUserInput
  inviteTokens: InviteTokenUpdateManyWithoutUserInput
  localCredentials: LocalCredentialUpdateManyWithoutUserInput
  oauthCredentials: OauthCredentialUpdateManyWithoutUserInput
  sessionRefreshTokens: SessionRefreshTokenUpdateManyWithoutUserInput
  properties: UserPropertyUpdateManyWithoutUserInput
  groups: GroupUpdateManyWithoutUsersInput
}

input UserUpdateWithWhereUniqueWithoutGroupsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutGroupsDataInput!
}

input UserUpdateWithWhereUniqueWithoutWorkspacesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutWorkspacesDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutEmailsInput {
  update: UserUpdateWithoutEmailsDataInput!
  create: UserCreateWithoutEmailsInput!
}

input UserUpsertWithoutInviteTokensInput {
  update: UserUpdateWithoutInviteTokensDataInput!
  create: UserCreateWithoutInviteTokensInput!
}

input UserUpsertWithoutLocalCredentialsInput {
  update: UserUpdateWithoutLocalCredentialsDataInput!
  create: UserCreateWithoutLocalCredentialsInput!
}

input UserUpsertWithoutOauthCredentialsInput {
  update: UserUpdateWithoutOauthCredentialsDataInput!
  create: UserCreateWithoutOauthCredentialsInput!
}

input UserUpsertWithoutPropertiesInput {
  update: UserUpdateWithoutPropertiesDataInput!
  create: UserCreateWithoutPropertiesInput!
}

input UserUpsertWithoutSessionRefreshTokensInput {
  update: UserUpdateWithoutSessionRefreshTokensDataInput!
  create: UserCreateWithoutSessionRefreshTokensInput!
}

input UserUpsertWithWhereUniqueWithoutGroupsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutGroupsDataInput!
  create: UserCreateWithoutGroupsInput!
}

input UserUpsertWithWhereUniqueWithoutWorkspacesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutWorkspacesDataInput!
  create: UserCreateWithoutWorkspacesInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  fullName: String

  """All values that are not equal to given value."""
  fullName_not: String

  """All values that are contained in given list."""
  fullName_in: [String!]

  """All values that are not contained in given list."""
  fullName_not_in: [String!]

  """All values less than the given value."""
  fullName_lt: String

  """All values less than or equal the given value."""
  fullName_lte: String

  """All values greater than the given value."""
  fullName_gt: String

  """All values greater than or equal the given value."""
  fullName_gte: String

  """All values containing the given string."""
  fullName_contains: String

  """All values not containing the given string."""
  fullName_not_contains: String

  """All values starting with the given string."""
  fullName_starts_with: String

  """All values not starting with the given string."""
  fullName_not_starts_with: String

  """All values ending with the given string."""
  fullName_ends_with: String

  """All values not ending with the given string."""
  fullName_not_ends_with: String
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  emails_every: EmailWhereInput
  emails_some: EmailWhereInput
  emails_none: EmailWhereInput
  inviteTokens_every: InviteTokenWhereInput
  inviteTokens_some: InviteTokenWhereInput
  inviteTokens_none: InviteTokenWhereInput
  localCredentials_every: LocalCredentialWhereInput
  localCredentials_some: LocalCredentialWhereInput
  localCredentials_none: LocalCredentialWhereInput
  oauthCredentials_every: OauthCredentialWhereInput
  oauthCredentials_some: OauthCredentialWhereInput
  oauthCredentials_none: OauthCredentialWhereInput
  sessionRefreshTokens_every: SessionRefreshTokenWhereInput
  sessionRefreshTokens_some: SessionRefreshTokenWhereInput
  sessionRefreshTokens_none: SessionRefreshTokenWhereInput
  properties_every: UserPropertyWhereInput
  properties_some: UserPropertyWhereInput
  properties_none: UserPropertyWhereInput
  groups_every: GroupWhereInput
  groups_some: GroupWhereInput
  groups_none: GroupWhereInput
  workspaces_every: WorkspaceWhereInput
  workspaces_some: WorkspaceWhereInput
  workspaces_none: WorkspaceWhereInput
}

input UserWhereUniqueInput {
  id: UUID
}

type UserWorkspace {
  id: UUID!
  user: User
  workspace: Workspace
}

"""A connection to a list of items."""
type UserWorkspaceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserWorkspaceEdge]!
  aggregate: AggregateUserWorkspace!
}

input UserWorkspaceCreateInput {
  user: UserCreateOneInput
  workspace: WorkspaceCreateOneInput
}

"""An edge in a connection."""
type UserWorkspaceEdge {
  """The item at the end of the edge."""
  node: UserWorkspace!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserWorkspaceOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserWorkspacePreviousValues {
  id: UUID!
}

type UserWorkspaceSubscriptionPayload {
  mutation: MutationType!
  node: UserWorkspace
  updatedFields: [String!]
  previousValues: UserWorkspacePreviousValues
}

input UserWorkspaceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWorkspaceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWorkspaceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWorkspaceSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWorkspaceWhereInput
}

input UserWorkspaceUpdateInput {
  user: UserUpdateOneInput
  workspace: WorkspaceUpdateOneInput
}

input UserWorkspaceWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWorkspaceWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWorkspaceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWorkspaceWhereInput!]
  user: UserWhereInput
  workspace: WorkspaceWhereInput
}

input UserWorkspaceWhereUniqueInput {
  id: UUID
}

"""A type 4 UUID according to IETF RFC 4122."""
scalar UUID

type Workspace {
  id: UUID!
  active: Boolean
  deployments(where: DeploymentWhereInput, orderBy: DeploymentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Deployment!]
  description: String
  inviteTokens(where: InviteTokenWhereInput, orderBy: InviteTokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InviteToken!]
  label: String
  properties(where: WorkspacePropertyWhereInput, orderBy: WorkspacePropertyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkspaceProperty!]
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

"""A connection to a list of items."""
type WorkspaceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WorkspaceEdge]!
  aggregate: AggregateWorkspace!
}

input WorkspaceCreateInput {
  active: Boolean
  description: String
  label: String
  deployments: DeploymentCreateManyWithoutWorkspaceInput
  inviteTokens: InviteTokenCreateManyWithoutWorkspaceInput
  properties: WorkspacePropertyCreateManyWithoutWorkspaceInput
  users: UserCreateManyWithoutWorkspacesInput
}

input WorkspaceCreateManyWithoutUsersInput {
  create: [WorkspaceCreateWithoutUsersInput!]
  connect: [WorkspaceWhereUniqueInput!]
}

input WorkspaceCreateOneInput {
  create: WorkspaceCreateInput
  connect: WorkspaceWhereUniqueInput
}

input WorkspaceCreateOneWithoutDeploymentsInput {
  create: WorkspaceCreateWithoutDeploymentsInput
  connect: WorkspaceWhereUniqueInput
}

input WorkspaceCreateOneWithoutInviteTokensInput {
  create: WorkspaceCreateWithoutInviteTokensInput
  connect: WorkspaceWhereUniqueInput
}

input WorkspaceCreateOneWithoutPropertiesInput {
  create: WorkspaceCreateWithoutPropertiesInput
  connect: WorkspaceWhereUniqueInput
}

input WorkspaceCreateWithoutDeploymentsInput {
  active: Boolean
  description: String
  label: String
  inviteTokens: InviteTokenCreateManyWithoutWorkspaceInput
  properties: WorkspacePropertyCreateManyWithoutWorkspaceInput
  users: UserCreateManyWithoutWorkspacesInput
}

input WorkspaceCreateWithoutInviteTokensInput {
  active: Boolean
  description: String
  label: String
  deployments: DeploymentCreateManyWithoutWorkspaceInput
  properties: WorkspacePropertyCreateManyWithoutWorkspaceInput
  users: UserCreateManyWithoutWorkspacesInput
}

input WorkspaceCreateWithoutPropertiesInput {
  active: Boolean
  description: String
  label: String
  deployments: DeploymentCreateManyWithoutWorkspaceInput
  inviteTokens: InviteTokenCreateManyWithoutWorkspaceInput
  users: UserCreateManyWithoutWorkspacesInput
}

input WorkspaceCreateWithoutUsersInput {
  active: Boolean
  description: String
  label: String
  deployments: DeploymentCreateManyWithoutWorkspaceInput
  inviteTokens: InviteTokenCreateManyWithoutWorkspaceInput
  properties: WorkspacePropertyCreateManyWithoutWorkspaceInput
}

"""An edge in a connection."""
type WorkspaceEdge {
  """The item at the end of the edge."""
  node: Workspace!

  """A cursor for use in pagination."""
  cursor: String!
}

enum WorkspaceOrderByInput {
  id_ASC
  id_DESC
  active_ASC
  active_DESC
  description_ASC
  description_DESC
  label_ASC
  label_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WorkspacePreviousValues {
  id: UUID!
  active: Boolean
  description: String
  label: String
}

type WorkspaceProperty {
  id: UUID!
  category: String
  key: String!
  value: String
  workspace: Workspace
}

"""A connection to a list of items."""
type WorkspacePropertyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WorkspacePropertyEdge]!
  aggregate: AggregateWorkspaceProperty!
}

input WorkspacePropertyCreateInput {
  category: String
  key: String!
  value: String
  workspace: WorkspaceCreateOneWithoutPropertiesInput
}

input WorkspacePropertyCreateManyWithoutWorkspaceInput {
  create: [WorkspacePropertyCreateWithoutWorkspaceInput!]
  connect: [WorkspacePropertyWhereUniqueInput!]
}

input WorkspacePropertyCreateWithoutWorkspaceInput {
  category: String
  key: String!
  value: String
}

"""An edge in a connection."""
type WorkspacePropertyEdge {
  """The item at the end of the edge."""
  node: WorkspaceProperty!

  """A cursor for use in pagination."""
  cursor: String!
}

enum WorkspacePropertyOrderByInput {
  id_ASC
  id_DESC
  category_ASC
  category_DESC
  key_ASC
  key_DESC
  value_ASC
  value_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WorkspacePropertyPreviousValues {
  id: UUID!
  category: String
  key: String!
  value: String
}

type WorkspacePropertySubscriptionPayload {
  mutation: MutationType!
  node: WorkspaceProperty
  updatedFields: [String!]
  previousValues: WorkspacePropertyPreviousValues
}

input WorkspacePropertySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [WorkspacePropertySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [WorkspacePropertySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WorkspacePropertySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WorkspacePropertyWhereInput
}

input WorkspacePropertyUpdateInput {
  category: String
  key: String
  value: String
  workspace: WorkspaceUpdateOneWithoutPropertiesInput
}

input WorkspacePropertyUpdateManyMutationInput {
  category: String
  key: String
  value: String
}

input WorkspacePropertyUpdateManyWithoutWorkspaceInput {
  create: [WorkspacePropertyCreateWithoutWorkspaceInput!]
  connect: [WorkspacePropertyWhereUniqueInput!]
  disconnect: [WorkspacePropertyWhereUniqueInput!]
  delete: [WorkspacePropertyWhereUniqueInput!]
  update: [WorkspacePropertyUpdateWithWhereUniqueWithoutWorkspaceInput!]
  upsert: [WorkspacePropertyUpsertWithWhereUniqueWithoutWorkspaceInput!]
}

input WorkspacePropertyUpdateWithoutWorkspaceDataInput {
  category: String
  key: String
  value: String
}

input WorkspacePropertyUpdateWithWhereUniqueWithoutWorkspaceInput {
  where: WorkspacePropertyWhereUniqueInput!
  data: WorkspacePropertyUpdateWithoutWorkspaceDataInput!
}

input WorkspacePropertyUpsertWithWhereUniqueWithoutWorkspaceInput {
  where: WorkspacePropertyWhereUniqueInput!
  update: WorkspacePropertyUpdateWithoutWorkspaceDataInput!
  create: WorkspacePropertyCreateWithoutWorkspaceInput!
}

input WorkspacePropertyWhereInput {
  """Logical AND on all given filters."""
  AND: [WorkspacePropertyWhereInput!]

  """Logical OR on all given filters."""
  OR: [WorkspacePropertyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WorkspacePropertyWhereInput!]
  category: String

  """All values that are not equal to given value."""
  category_not: String

  """All values that are contained in given list."""
  category_in: [String!]

  """All values that are not contained in given list."""
  category_not_in: [String!]

  """All values less than the given value."""
  category_lt: String

  """All values less than or equal the given value."""
  category_lte: String

  """All values greater than the given value."""
  category_gt: String

  """All values greater than or equal the given value."""
  category_gte: String

  """All values containing the given string."""
  category_contains: String

  """All values not containing the given string."""
  category_not_contains: String

  """All values starting with the given string."""
  category_starts_with: String

  """All values not starting with the given string."""
  category_not_starts_with: String

  """All values ending with the given string."""
  category_ends_with: String

  """All values not ending with the given string."""
  category_not_ends_with: String
  key: String

  """All values that are not equal to given value."""
  key_not: String

  """All values that are contained in given list."""
  key_in: [String!]

  """All values that are not contained in given list."""
  key_not_in: [String!]

  """All values less than the given value."""
  key_lt: String

  """All values less than or equal the given value."""
  key_lte: String

  """All values greater than the given value."""
  key_gt: String

  """All values greater than or equal the given value."""
  key_gte: String

  """All values containing the given string."""
  key_contains: String

  """All values not containing the given string."""
  key_not_contains: String

  """All values starting with the given string."""
  key_starts_with: String

  """All values not starting with the given string."""
  key_not_starts_with: String

  """All values ending with the given string."""
  key_ends_with: String

  """All values not ending with the given string."""
  key_not_ends_with: String
  value: String

  """All values that are not equal to given value."""
  value_not: String

  """All values that are contained in given list."""
  value_in: [String!]

  """All values that are not contained in given list."""
  value_not_in: [String!]

  """All values less than the given value."""
  value_lt: String

  """All values less than or equal the given value."""
  value_lte: String

  """All values greater than the given value."""
  value_gt: String

  """All values greater than or equal the given value."""
  value_gte: String

  """All values containing the given string."""
  value_contains: String

  """All values not containing the given string."""
  value_not_contains: String

  """All values starting with the given string."""
  value_starts_with: String

  """All values not starting with the given string."""
  value_not_starts_with: String

  """All values ending with the given string."""
  value_ends_with: String

  """All values not ending with the given string."""
  value_not_ends_with: String
  workspace: WorkspaceWhereInput
}

input WorkspacePropertyWhereUniqueInput {
  id: UUID
}

type WorkspaceSubscriptionPayload {
  mutation: MutationType!
  node: Workspace
  updatedFields: [String!]
  previousValues: WorkspacePreviousValues
}

input WorkspaceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [WorkspaceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [WorkspaceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WorkspaceSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WorkspaceWhereInput
}

input WorkspaceUpdateDataInput {
  active: Boolean
  description: String
  label: String
  deployments: DeploymentUpdateManyWithoutWorkspaceInput
  inviteTokens: InviteTokenUpdateManyWithoutWorkspaceInput
  properties: WorkspacePropertyUpdateManyWithoutWorkspaceInput
  users: UserUpdateManyWithoutWorkspacesInput
}

input WorkspaceUpdateInput {
  active: Boolean
  description: String
  label: String
  deployments: DeploymentUpdateManyWithoutWorkspaceInput
  inviteTokens: InviteTokenUpdateManyWithoutWorkspaceInput
  properties: WorkspacePropertyUpdateManyWithoutWorkspaceInput
  users: UserUpdateManyWithoutWorkspacesInput
}

input WorkspaceUpdateManyMutationInput {
  active: Boolean
  description: String
  label: String
}

input WorkspaceUpdateManyWithoutUsersInput {
  create: [WorkspaceCreateWithoutUsersInput!]
  connect: [WorkspaceWhereUniqueInput!]
  disconnect: [WorkspaceWhereUniqueInput!]
  delete: [WorkspaceWhereUniqueInput!]
  update: [WorkspaceUpdateWithWhereUniqueWithoutUsersInput!]
  upsert: [WorkspaceUpsertWithWhereUniqueWithoutUsersInput!]
}

input WorkspaceUpdateOneInput {
  create: WorkspaceCreateInput
  connect: WorkspaceWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: WorkspaceUpdateDataInput
  upsert: WorkspaceUpsertNestedInput
}

input WorkspaceUpdateOneWithoutDeploymentsInput {
  create: WorkspaceCreateWithoutDeploymentsInput
  connect: WorkspaceWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: WorkspaceUpdateWithoutDeploymentsDataInput
  upsert: WorkspaceUpsertWithoutDeploymentsInput
}

input WorkspaceUpdateOneWithoutInviteTokensInput {
  create: WorkspaceCreateWithoutInviteTokensInput
  connect: WorkspaceWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: WorkspaceUpdateWithoutInviteTokensDataInput
  upsert: WorkspaceUpsertWithoutInviteTokensInput
}

input WorkspaceUpdateOneWithoutPropertiesInput {
  create: WorkspaceCreateWithoutPropertiesInput
  connect: WorkspaceWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: WorkspaceUpdateWithoutPropertiesDataInput
  upsert: WorkspaceUpsertWithoutPropertiesInput
}

input WorkspaceUpdateWithoutDeploymentsDataInput {
  active: Boolean
  description: String
  label: String
  inviteTokens: InviteTokenUpdateManyWithoutWorkspaceInput
  properties: WorkspacePropertyUpdateManyWithoutWorkspaceInput
  users: UserUpdateManyWithoutWorkspacesInput
}

input WorkspaceUpdateWithoutInviteTokensDataInput {
  active: Boolean
  description: String
  label: String
  deployments: DeploymentUpdateManyWithoutWorkspaceInput
  properties: WorkspacePropertyUpdateManyWithoutWorkspaceInput
  users: UserUpdateManyWithoutWorkspacesInput
}

input WorkspaceUpdateWithoutPropertiesDataInput {
  active: Boolean
  description: String
  label: String
  deployments: DeploymentUpdateManyWithoutWorkspaceInput
  inviteTokens: InviteTokenUpdateManyWithoutWorkspaceInput
  users: UserUpdateManyWithoutWorkspacesInput
}

input WorkspaceUpdateWithoutUsersDataInput {
  active: Boolean
  description: String
  label: String
  deployments: DeploymentUpdateManyWithoutWorkspaceInput
  inviteTokens: InviteTokenUpdateManyWithoutWorkspaceInput
  properties: WorkspacePropertyUpdateManyWithoutWorkspaceInput
}

input WorkspaceUpdateWithWhereUniqueWithoutUsersInput {
  where: WorkspaceWhereUniqueInput!
  data: WorkspaceUpdateWithoutUsersDataInput!
}

input WorkspaceUpsertNestedInput {
  update: WorkspaceUpdateDataInput!
  create: WorkspaceCreateInput!
}

input WorkspaceUpsertWithoutDeploymentsInput {
  update: WorkspaceUpdateWithoutDeploymentsDataInput!
  create: WorkspaceCreateWithoutDeploymentsInput!
}

input WorkspaceUpsertWithoutInviteTokensInput {
  update: WorkspaceUpdateWithoutInviteTokensDataInput!
  create: WorkspaceCreateWithoutInviteTokensInput!
}

input WorkspaceUpsertWithoutPropertiesInput {
  update: WorkspaceUpdateWithoutPropertiesDataInput!
  create: WorkspaceCreateWithoutPropertiesInput!
}

input WorkspaceUpsertWithWhereUniqueWithoutUsersInput {
  where: WorkspaceWhereUniqueInput!
  update: WorkspaceUpdateWithoutUsersDataInput!
  create: WorkspaceCreateWithoutUsersInput!
}

input WorkspaceWhereInput {
  """Logical AND on all given filters."""
  AND: [WorkspaceWhereInput!]

  """Logical OR on all given filters."""
  OR: [WorkspaceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WorkspaceWhereInput!]
  active: Boolean

  """All values that are not equal to given value."""
  active_not: Boolean
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  label: String

  """All values that are not equal to given value."""
  label_not: String

  """All values that are contained in given list."""
  label_in: [String!]

  """All values that are not contained in given list."""
  label_not_in: [String!]

  """All values less than the given value."""
  label_lt: String

  """All values less than or equal the given value."""
  label_lte: String

  """All values greater than the given value."""
  label_gt: String

  """All values greater than or equal the given value."""
  label_gte: String

  """All values containing the given string."""
  label_contains: String

  """All values not containing the given string."""
  label_not_contains: String

  """All values starting with the given string."""
  label_starts_with: String

  """All values not starting with the given string."""
  label_not_starts_with: String

  """All values ending with the given string."""
  label_ends_with: String

  """All values not ending with the given string."""
  label_not_ends_with: String
  deployments_every: DeploymentWhereInput
  deployments_some: DeploymentWhereInput
  deployments_none: DeploymentWhereInput
  inviteTokens_every: InviteTokenWhereInput
  inviteTokens_some: InviteTokenWhereInput
  inviteTokens_none: InviteTokenWhereInput
  properties_every: WorkspacePropertyWhereInput
  properties_some: WorkspacePropertyWhereInput
  properties_none: WorkspacePropertyWhereInput
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
}

input WorkspaceWhereUniqueInput {
  id: UUID
}
