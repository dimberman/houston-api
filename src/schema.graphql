# import InviteToken, LocalCredential, RoleBinding, UserProperty, WorkspaceProperty, DeploymentProperty from "./generated/schema/prisma.graphql"

#
# Directives
#
# Implements authorization rules.
directive @auth(
  permissions: [String!],
) on OBJECT | FIELD_DEFINITION

# Wraps fields to alias a synthetic field to an underlying actual field
directive @alias(
  field: String!
) on FIELD_DEFINITION

#
# Scalars
#
scalar JSON
scalar Uuid

#
# Types
#
type AuthUser {
  user: User
  token: Token
  permissions: JSON
  isAdmin: Boolean
}

type Token {
  value: String
  payload: TokenPayload
}

type TokenPayload {
  uuid: Uuid
  iat: Int
  exp: Int
}

type AuthConfig {
  publicSignup: Boolean
  initialSignup: Boolean
  localEnabled: Boolean
  googleEnabled: Boolean
  githubEnabled: Boolean
  auth0Enabled: Boolean
  googleOAuthUrl: String
  githubOAuthUrl: String
  auth0OAuthUrl: String
}

type Invite {
  id: ID!
  uuid: Uuid @alias(field: "id")
  assignments: String
  email: String
  # token: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Group {
  id: ID!
  uuid: Uuid @alias(field: "id")
  label: String
  active: Boolean
  custom: Boolean
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type User {
  id: ID!
  uuid: Uuid @alias(field: "id")
  username: String
  emails: [Email!]!
  fullName: String
  status: String
  profile: [UserProperty!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Workspace {
  id: ID!
  uuid: Uuid @alias(field: "id")
  active: Boolean
  description: String
  invites: [Invite!]!
  properties: JSON
  label: String
  users: [User]
  groups: [Group]
  deploymentCount: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DeploymentConfig {
  defaults: JSON
  limits: JSON
  astroUnit: AstroUnit
  maxExtraAu: Int
  executors: JSON
  latestVersion: String
}

type AstroUnit {
  cpu: Int
  memory: Int
  pods: Float
  airflowConns: Float
  actualConns: Float
  price: Float
}

type DeploymentUrl {
  type: String
  url: String
}

type Deployment {
  id: ID!
  uuid: Uuid @alias(field: "id")
  config: JSON
  env: JSON
  properties: JSON
  urls: [DeploymentUrl]
  description: String
  label: String
  releaseName: String
  status: String
  type: String
  version: String
  workspace: Workspace
  createdAt: DateTime!
  updatedAt: DateTime!
}

#
# Queries
#
type Query {
  users(
    userUuid: Uuid
    username: String
    email: String
  ): [User]

  authConfig(
    redirect: String
    duration: Int
    extras: JSON
    inviteToken: String
  ): AuthConfig

  self: AuthUser @auth

  workspaces(
    userUuid: Uuid
    workspaceUuid: Uuid
    label: String
  ): [Workspace] @auth

  deploymentConfig(
    workspaceUuid: Uuid
    deploymentUuid: Uuid
    type: String
    version: String
  ): DeploymentConfig @auth

  deployments(
    workspaceUuid:  Uuid
    deploymentUuid: Uuid
    releaseName: String
  ): [Deployment] @auth
}

#
# Mutations
#
type Mutation {
  createUser(
    email: String!
    password: String!
    username: String
    profile: JSON
    inviteToken: String
    duration: Int
  ): AuthUser

  createToken(
    password: String!
    identity: String
    duration: Int
  ): AuthUser

  resetPassword(
    token: String!
    password: String!
    duration: Int
  ): AuthUser

  createDeployment(
    workspaceUuid: Uuid!
    type: String!
    label: String!
    description: String
    version: String
    config: JSON
    env: JSON
    properties: JSON
  ): Deployment @auth

  updateDeployment(
    deploymentUuid: Uuid!
    payload: JSON
    config: JSON
    env: JSON
    sync: Boolean
  ): Deployment @auth
}
