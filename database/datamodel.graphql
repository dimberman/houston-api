type User @pgTable(name: "users") {
  id: UUID! @unique @pgColumn(name: "uuid")
  username: String
  emails: [Email!]!
  fullName: String @pgColumn(name: "full_name")
  inviteTokens: [InviteToken!]!
  localCredential: LocalCredential
  # oauthCredentials: [OauthCredential!]!
  # sessionRefreshTokens: [SessionRefreshToken!]!
  status: String
  # properties: [UserProperty!]!
  # groups: [Group!]!
  # workspaces: [Workspace!]!
  createdAt: DateTime! @pgColumn(name: "created_at")
  updatedAt: DateTime! @pgColumn(name: "updated_at")
}

type Email @pgTable(name: "emails") {
  id: UUID! @unique @pgColumn(name: "uuid")
  address: String @unique
  main: Boolean
  token: String @unique
  user: User @pgRelation(column: "user_uuid")
  verified: Boolean
  createdAt: DateTime! @pgColumn(name: "created_at")
  updatedAt: DateTime! @pgColumn(name: "updated_at")
}

type LocalCredential @pgTable(name: "local_credentials") {
  id: UUID! @unique @pgColumn(name: "uuid")
  user: User @pgRelation(column: "user_uuid")
  password: String @unique
  resetToken: String @pgColumn(name: "reset_token")
  createdAt: DateTime! @pgColumn(name: "created_at")
  updatedAt: DateTime! @pgColumn(name: "updated_at")
}

type InviteToken @pgTable(name: "invite_tokens") {
  id: UUID! @unique @pgColumn(name: "uuid")
  assignments: String
  email: String
  token: String @unique
  user: User @pgRelation(column: "user_uuid")
  workspace: Workspace @pgRelation(column: "workspace_uuid")
  createdAt: DateTime! @pgColumn(name: "created_at")
  updatedAt: DateTime! @pgColumn(name: "updated_at")
}

# type OauthCredential {
#   id: UUID! @unique
#   expiresAt: DateTime
#   oauthProvider: String!
#   oauthUserId: String!
#   user: User
# }

# type SessionRefreshToken {
#   id: UUID! @unique
#   expiresAt: DateTime
#   active: Boolean
#   metadata: String
#   refreshToken: String @unique
#   refreshedAt: DateTime
#   source: String
#   user: User
# }

# type UserGroup {
#   id: UUID! @unique
#   group: Group
#   user: User
# }

# type Group {
#   id: UUID! @unique
#   active: Boolean
#   custom: Boolean
#   description: String
#   entityType: String @unique
#   entityId: UUID @unique
#   properties: [GroupProperty!]!
#   label: String @unique
#   users: [User!]!
#   roles: [Role!]!
# }

# type GroupProperty {
#   id: UUID! @unique
#   category: String
#   group: Group
#   key: String!
#   value: String
# }

# # type GroupRole {
# #   group: Group
# #   role: Role
# # }

# type UserProperty {
#   id: UUID! @unique
#   category: String
#   key: String!
#   value: String
#   user: User
# }

# type Role {
#   id: UUID! @unique
#   category: String
#   entityType: String @unique
#   entityId: UUID @unique
#   label: String @unique
#   scope: String
#   groups: [Group!]!
#   permissions: [Permission!]!
#   serviceAccounts: [ServiceAccount!]!
#   # serviceAccountRoles: [ServiceAccountRole!]!
#   # groupRoles: [GroupRole!]!
#   # rolePermissions: [RolePermission!]!
# }

# # type RolePermission {
# #   permission: Permission
# #   role: Role
# # }

# type Permission {
#   id: UUID! @unique
#   category: String
#   label: String
#   scope: String!
#   roles: [Role!]!
#   # rolePermissions: [RolePermission!]!
# }

# # type ServiceAccountRole {
# #   role: Role
# #   serviceAccount: ServiceAccount
# # }

# type ServiceAccount {
#   id: UUID! @unique
#   active: Boolean
#   api_key: String
#   category: String
#   entity_type: String
#   entity_uuid: UUID
#   label: String
#   lastUsedAt: DateTime
#   roles: [Role!]!
#   # serviceAccountRoles: [ServiceAccountRole!]!
# }

# # type UserWorkspace @pgTable(name: "user_workspace_map") {
# #   id: UUID! @unique
# #   user: User @pgRelation(column: "user_uuid")
# #   workspace: Workspace @pgRelation(column: "workspace_uuid")
# # }

type Workspace @pgTable(name: "workspaces") {
  id: UUID! @unique @pgColumn(name: "uuid")
  active: Boolean
  # deployments: [Deployment!]!
  description: String
  inviteTokens: [InviteToken!]!
  label: String
  properties: [WorkspaceProperty!]!
  users: [User!]!
  createdAt: DateTime! @pgColumn(name: "created_at")
  updatedAt: DateTime! @pgColumn(name: "updated_at")
}

type WorkspaceProperty @pgTable(name: "workspace_properties") {
  id: ID! @unique
  category: String
  key: String!
  value: String
  workspace: Workspace @pgRelation(column: "workspace_uuid")
  createdAt: DateTime! @pgColumn(name: "created_at")
  updatedAt: DateTime! @pgColumn(name: "updated_at")
}

# type Deployment {
#   id: UUID! @unique
#   config: String
#   deployment_properties: [DeploymentProperty!]!
#   description: String
#   label: String @unique
#   registry_password: String
#   release_name: String @unique
#   status: String
#   type: String
#   version: String
#   workspace: Workspace
# }

# type DeploymentProperty {
#   id: UUID! @unique
#   category: String
#   deployment: Deployment
#   key: String!
#   value: String
# }

type SystemSetting @pgTable(name: "system_settings") {
  id: ID! @unique @pgColumn(name: "key")
  key: String
  value: String
  category: String
  isEncrypted: Boolean @pgColumn(name: "is_encrypted")
  createdAt: DateTime! @pgColumn(name: "created_at")
  updatedAt: DateTime! @pgColumn(name: "updated_at")
}
