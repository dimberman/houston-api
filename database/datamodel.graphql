type User @pgTable(name: "users") {
  id: UUID! @unique @pgColumn(name: "uuid")
  username: String
  # emails: [Email!]!
  fullName: String @pgColumn(name: "full_name")
  # inviteTokens: [InviteToken!]!
  # localCredentials: [LocalCredential!]!
  # oauthCredentials: [OauthCredential!]!
  # sessionRefreshTokens: [SessionRefreshToken!]!
  status: String
  # properties: [UserProperty!]!
  # groups: [Group!]!
  # workspaces: [Workspace!]!
}

# type Email {
#   id: UUID! @unique
#   address: String @unique
#   main: Boolean
#   token: String @unique
#   user: User
#   verified: Boolean
# }

# type InviteToken {
#   id: UUID! @unique
#   assignments: String
#   email: String
#   token: String @unique
#   user: User
#   workspace: Workspace
# }

# type LocalCredential {
#   id: UUID! @unique
#   password: String @unique
#   resetToken: String
#   user: User
# }

# type OauthCredential {
#   id: UUID! @unique
#   expiresAt: DateTime
#   oauthProvider: String!
#   oauthUserId: String!
#   user: User
# }

# type SessionRefreshToken {
#   id: UUID! @unique
#   expiresAt: DateTime
#   active: Boolean
#   metadata: String
#   refreshToken: String @unique
#   refreshedAt: DateTime
#   source: String
#   user: User
# }

# type UserGroup {
#   id: UUID! @unique
#   group: Group
#   user: User
# }

# type Group {
#   id: UUID! @unique
#   active: Boolean
#   custom: Boolean
#   description: String
#   entityType: String @unique
#   entityId: UUID @unique
#   properties: [GroupProperty!]!
#   label: String @unique
#   users: [User!]!
#   roles: [Role!]!
# }

# type GroupProperty {
#   id: UUID! @unique
#   category: String
#   group: Group
#   key: String!
#   value: String
# }

# # type GroupRole {
# #   group: Group
# #   role: Role
# # }

# type UserProperty {
#   id: UUID! @unique
#   category: String
#   key: String!
#   value: String
#   user: User
# }

# type Role {
#   id: UUID! @unique
#   category: String
#   entityType: String @unique
#   entityId: UUID @unique
#   label: String @unique
#   scope: String
#   groups: [Group!]!
#   permissions: [Permission!]!
#   serviceAccounts: [ServiceAccount!]!
#   # serviceAccountRoles: [ServiceAccountRole!]!
#   # groupRoles: [GroupRole!]!
#   # rolePermissions: [RolePermission!]!
# }

# # type RolePermission {
# #   permission: Permission
# #   role: Role
# # }

# type Permission {
#   id: UUID! @unique
#   category: String
#   label: String
#   scope: String!
#   roles: [Role!]!
#   # rolePermissions: [RolePermission!]!
# }

# # type ServiceAccountRole {
# #   role: Role
# #   serviceAccount: ServiceAccount
# # }

# type ServiceAccount {
#   id: UUID! @unique
#   active: Boolean
#   api_key: String
#   category: String
#   entity_type: String
#   entity_uuid: UUID
#   label: String
#   lastUsedAt: DateTime
#   roles: [Role!]!
#   # serviceAccountRoles: [ServiceAccountRole!]!
# }

# # type UserWorkspace @pgTable(name: "user_workspace_map") {
# #   id: UUID! @unique
# #   user: User @pgRelation(column: "user_uuid")
# #   workspace: Workspace @pgRelation(column: "workspace_uuid")
# # }

# type Workspace @pgTable("workspaces") {
#   id: UUID! @unique
#   active: Boolean
#   deployments: [Deployment!]!
#   description: String
#   inviteTokens: [InviteToken!]!
#   label: String
#   properties: [WorkspaceProperty!]!
#   users: [User!]!
# }

# type WorkspaceProperty @pgTable("workspace_properties") {
#   id: UUID! @unique
#   category: String
#   key: String!
#   value: String
#   workspace: Workspace @pgRelation(column: "workspace_uuid")
# }

# type Deployment {
#   id: UUID! @unique
#   config: String
#   deployment_properties: [DeploymentProperty!]!
#   description: String
#   label: String @unique
#   registry_password: String
#   release_name: String @unique
#   status: String
#   type: String
#   version: String
#   workspace: Workspace
# }

# type DeploymentProperty {
#   id: UUID! @unique
#   category: String
#   deployment: Deployment
#   key: String!
#   value: String
# }

# type SystemSetting {
#   id: UUID! @unique
#   category: String
#   is_encrypted: Boolean
#   value: String
# }
