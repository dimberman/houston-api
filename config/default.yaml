# This file contains non-secret configurations.

# API webserver configuration.
webserver:
  port: 8871
  endpoint: "/v1"
  subscriptions: "/ws"

# Prisma configuration.
prisma:
  endpoint: "http://localhost:4466/houston"
  secret: ~
  debug: false

# Logging configuration.
logging:
  level: "debug"

# Database connection.
# This is mostly for knexfile now.
# Also defined for Prisma service separately.
database:
  # Knex migrations
  migrations:
    tableName: migrations
    schemaName: houston$default

  # Knex connection
  connection:
    user: postgres
    password: postgres
    host: localhost
    port: 5432
    database: postgres

# Commander configuration.
commander:
  enabled: false
  host: localhost
  port: 50051

# Email configuration.
email:
  # Enable sending emails.
  enabled: false

  # Open HTML emails in browser when sent.
  preview: false

  # The "from" address to use.
  reply: "noreply@astronomer.io"

  # The SMTP server URL.
  smtpUrl: ~

# Orbit configuration.
orbit:
  subdomain: app
  port: 5000

# Docker registry configuration.
registry:
  auth: ~
  certPath: ~
  issuer: ~
  service: ~

# Elasticsearch configuration for Houston to pull logs.
# This is passed striaght to the es client.
elasticsearch:
  enabled: false
  client:
    host: ~
    log: ~

# Charts live here.
# This is where the airflow chart is installed from.
repository: "https://helm.astronomer.io/"

# Helm configuration.
# These values are set at runtime and used for airflow deployments.
helm:
  baseDomain: ~
  registryAuthSecret: ~
  releaseName: ~
  releaseNamespace: ~
  releaseVersion: ~
  singleNamespace: false

# Auth configuration.
auth:
  # Local database (user/pass) configuration.
  local:
    enabled: true

  # Auth0 integration configuration.
  auth0:
    # This "enabled" flag is currently a little misleading.
    # The enabled flag refers only to showing the native
    # Auth0 button in the UI. The rest of the settings here
    # could potentially be used as to auth with Google/Github/etc
    # if those integrations are enabled, but do not have connection
    # information.
    enabled: false
    clientId: ~
    baseDomain: ~

  # Google oauth configuration.
  google:
    enabled: false
    clientId: ~

  # Github oauth configuration.
  github:
    enabled: false

# Passphrase to sign JWTs with.
jwtPassphrase: ~

# JWT / Cookie duration in milliseconds.
authDuration: 86400000

# Allow public signups.
publicSignups: false

# Require email confirmation.
emailConfirmation: true

# Subdomain under base domain.
subdomain: houston

# Format: ${SCOPE}.${RESOURCE}.${VERB}
roles:
  #
  # System
  #
  - id: SYSTEM_ADMIN
    name: System Admin
    permissions:
      - global.systemSettings.get
      - global.systemSettings.list
      - global.systemSettings.update
      - global.monitoring.view
      - global.workspace.get
      - global.workspace.update
      - global.workspace.delete
      - global.deployment.get
      - global.deployment.update
      - global.deployment.delete

  - id: SYSTEM_EDITOR
    name: System Editor
    permissions:
      - global.systemSettings.get
      - global.systemSettings.list
      - global.systemSettings.update

  - id: SYSTEM_VIEWER
    name: System Viewer
    permissions:
      - global.systemSettings.get

  #
  # Workspace
  #
  - id: WORKSPACE_ADMIN
    name: Workspace Admin
    permissions:
      - user.workspace.get
      - user.workspace.update
      - user.workspace.delete
      - user.deployment.create
      - user.deployment.get

  - id: WORKSPACE_EDITOR
    name: Workspace Editor
    permissions:
      - user.workspace.get
      - user.workspace.update
      - user.deployment.create
      - user.deployment.get

  - id: WORKSPACE_VIEWER
    name: Workspace Viewer
    permissions:
      - user.workspace.get
      - user.deployment.get

  #
  # Deployment
  #
  - id: DEPLOYMENT_ADMIN
    name: Deployment Admin
    permissions:
      - user.deployment.get
      - user.deployment.update
      - user.deployment.delete

  - id: DEPLOYMENT_EDITOR
    name: Deployment Editor
    permissions:
      - user.deployment.get
      - user.deployment.update

  - id: DEPLOYMENT_VIEWER
    name: Deployment Viewer
    permissions:
      - user.deployment.get

#
# Airflow Deployment Configurations
#
deployments:
  # Log out final helm values whenever they are generated, before deployment.
  logHelmValues: false

  # This is the database connection that we use to connect
  # and create other databases/schemas/users for each
  # individual airflow deployment.
  database:
    # If disabled, skip db creation.
    enabled: true

    # Keep the airflow databases around after a
    # deployment is deleted.
    retainOnDelete: false

    # If true, leave GRANTs in place for root user.
    # This lets users log in with the root creds and query
    # deployment databases.
    allowRootAccess: false

    # Connection details for root user.
    # This can also be overridden with a connection string.
    connection:
      user: postgres
      password: postgres
      host: localhost
      port: 5432
      database: postgres

  # Elasticsearch configuration for deployments.
  # Airflow clients access Elasticsearch differently.
  # Houston has full acces, while the deployments connect
  # via NGINX for auth.
  elasticsearch:
    connection:
      host: localhost
      port: 9200

  # An astro unit defines the smallest billable unit
  # in the system. Default values are based on
  # the GCP n1-standard-1. CPU should always be expressed
  # in millicpu and memory should be expressed in Mibibytes.
  astroUnit:
    cpu: 100
    memory: 384
    pods: 1
    airflowConns: 5
    actualConns: 0.5
    price: ~

  # This defines how much extra capacity, in astro units,
  # that a user can expand a deployment to. This is currently
  # represented as a slider in the UI.
  maxExtraAu: 400

  # This defines the maximum size a pod can be in astro units.
  maxPodAu: 35

  # This defines all possible components for an airflow
  # deployment and the default AU to use for the kubernetes
  # resource requests, as well as its limits.
  components:
    - name: scheduler
      au:
        default: 5
        limit: 30
    - name: webserver
      au:
        default: 2
        limit: 30
    - name: statsd
      au:
        default: 2
        limit: 30
    - name: pgbouncer
      au:
        default: 2
        limit: 2
    - name: flower
      au:
        default: 2
        limit: 2
    - name: redis
      au:
        default: 2
        limit: 2
    - name: workers
      au:
        default: 10
        limit: 30
      extra:
        - name: terminationGracePeriodSeconds
          default: 600
          limit: 36000
        - name: replicas
          default: 1
          limit: 10

  # This defines which executors should be supported, as well
  # as the components required to run a particular
  # executor configuration.
  executors:
    - name: LocalExecutor
      enabled: true
      components:
        - scheduler
        - webserver
        - statsd
        - pgbouncer
    - name: CeleryExecutor
      enabled: true
      components:
        - scheduler
        - webserver
        - statsd
        - pgbouncer
        - workers
        - flower
        - redis
    - name: KubernetesExecutor
      enabled: false
      components:
        - scheduler
        - webserver
        - statsd
        - pgbouncer

  # These are static configs that get merged directly into the values
  # passed to helm for each deployment.
  helm:
    # If enabled, deploy ServiceAccounts / Roles / RoleBindings
    # for components that require kubernetes apiserver access.
    rbacEnabled: true
    ingress:
      # Attach an airflow deployment to the system level ingress controller.
      enabled: true
    networkPolicies:
      # Enabled network polices to restrict the way pods can communicate.
      enabled: true
    pgbouncer:
      # Adds a pgbouncer service between the airflow pods (scheduler / webserver/ workers),
      # and the backend database.
      enabled: true
